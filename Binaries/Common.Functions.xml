<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Common.Functions</name>
    </assembly>
    <members>
        <member name="M:Common.ArrayExtensions.AddRange``1(``0[]@,System.Int32,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            This will copy the source range into the target array and if needed the target array will grow only if the source elements cannot otherwise be added.
            </summary>
            <typeparam name="T">The elemnet type of the array and range</typeparam>
            <param name="target">The array that will be updated/appended to</param>
            <param name="targetStartingIndex">The starting index into the array where the elements from source will be added from</param>
            <param name="source">The source range where the elements will be copied from</param>
            <param name="sourceStartingIndex">The starting index into the source range</param>
            <param name="sourceCount">The number of elements that will be copied from the source</param>
            <example>
            <code>
            	var targetArray = new int[] { 1, 2, 3, 4, 5 };
            	var sourceList = new List&lt;int&gt;() { 5, 6, 7, 8, 9 };
            	
            	Common.ArrayExtensions.AddRange(ref targetArray, 5, sourceList, 1, 3);
            	
            	Dump(targetArray); // { 1, 2, 3, 4, 5, 6, 7, 8 }
            	
            	targetArray = new int[] { 1, 2, 3, 4, 5 };
            	sourceList = new List&lt;int&gt; { 3, 4, 5, 6, 7, 8, 9 };
            	
            	Common.ArrayExtensions.AddRange(ref targetArray, 2, sourceList, 0, 6);
            	
            	Dump(targetArray); // { 1, 2, 3, 4, 5, 6, 7, 8 }
            
            </code>
            </example>
            <seealso cref="M:Common.LinqExtensions.CopyTo``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,``0[]@,System.Int32)"/>
            <remarks>
             This method will update (in place) the target array.
            </remarks>
        </member>
        <member name="M:Common.ArrayExtensions.AddRange``1(``0[],System.Int32,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            This will copy the source range into the target array regardless of the copy array&quot;s lenght. This will returned the new array with both elements.
            </summary>
            <typeparam name="T">The elemnet type of the array and range</typeparam>
            <param name="copyFromArray">The array that will be copied from</param>
            <param name="copyStartingIndex">The starting index into the array where copying will be started from</param>
            <param name="source">The source range where the elements will be taken copied from</param>
            <param name="sourceStartingIndex">The starting index into the source range</param>
            <param name="sourceCount">The number of elements that will be copied from the source</param>
            <returns>
            Returns the newly copied array.
            </returns>
            <example>
            <code>
            	var targetArray = new int[] { 1, 2, 3, 4, 5 };
            	var sourceList = new List&lt;int&gt;() { 5, 6, 7, 8, 9 };
            	
            	Dump(Common.ArrayExtensions.AddRange(targetArray, 5, sourceList, 1, 3)); // { 1, 2, 3, 4, 5, 6, 7, 8 }
            	
            	Dump(targetArray); // { 1, 2, 3, 4, 5 }
            	
            	targetArray = new int[] { 1, 2, 3, 4, 5 };
            	sourceList = new List&lt;int&gt; { 3, 4, 5, 6, 7, 8, 9 };
            	
            	Dump(Common.ArrayExtensions.AddRange(targetArray, 2, sourceList, 0, 6)); // { 1, 2, 3, 4, 5, 6, 7, 8 }
            	
            	Dump(targetArray); // { 1, 2, 3, 4, 5 }
            
            </code>
            </example>
            <seealso cref="M:Common.LinqExtensions.CopyTo``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,``0[]@,System.Int32)"/>
            <remarks>
             This method will return an newly updated array. 
            </remarks>
        </member>
        <member name="M:Common.ArrayExtensions.AddRange``1(``0[],System.Collections.Generic.IEnumerable{``0})">
            <summary>
            This will copy the source range into the target array regardless of the copy array&quot;s lenght. This will returned the new array with both elements.
            </summary>
            <typeparam name="T">The elemnet type of the array and range</typeparam>	
            <param name="copyFromArray">The array that will be copied from</param>
            <param name="source">The source range where the elements will be copied from</param>		
            <returns>
            Returns the newly copied array.
            </returns>
            <remarks>
             This method will return an newly updated array. 
            </remarks>
        </member>
        <member name="M:Common.ArrayExtensions.Remove``1(``0[],``0)">
            <summary>
            Returns a new array where the first item is removed. The new array&quot;s lenght is altered to reflect the removed item.
            
            If the items does not match any element in the source, the original source array is returned.
            </summary>
            <typeparam name="T">Element type of the array</typeparam>
            <param name="sourceArray">source array used to search for item</param>
            <param name="itemToRemove">item to remove</param>
            <returns>
            The new array where item is removed or the original source array if item was not found.
            </returns>
            <remarks>
            If type T implements the IEquatable&lt;T&gt; generic interface, the equality comparer is the Equals method of that interface; otherwise, the default equality comparer is Object.Equals. 
            </remarks>
        </member>
        <member name="M:Common.ArrayExtensions.RemoveAll``1(``0[],System.Predicate{``0})">
            <summary>
            Returns a new array where the element matches the match predicate. The new array&quot;s lenght is altered to reflect the removed items.
            
            If the items does not match any element in the source, the original source array is returned.
            </summary>
            <typeparam name="T">Element type of the array</typeparam>
            <param name="sourceArray">source array used to search for item</param>
            <param name="match">
            Predicate function used to determine which elements are removed.
            </param>
            <returns>
            The new array where items are removed or the original source array if nothing matches.
            </returns>		
        </member>
        <member name="M:Common.ArrayExtensions.RemoveAt``1(``0[],System.Int32)">
            <summary>
            Returns a new array where the item at removeAtIndex is removed. The new array&quot;s lenght is altered to reflect the removed item.
            
            If the removeAtIndex is not valid (less than 0 or greater than the total number of elements) the original array is returned.
            </summary>
            <typeparam name="T">Element type of the array</typeparam>
            <param name="sourceArray">source array</param>
            <param name="removeAtIndex">Index where Item is removed</param>
            <returns>
            The new array where item is removed or the original source array if the removeAtIndex is not valid.
            </returns>		
        </member>
        <member name="M:Common.ArrayExtensions.RemoveRange``1(``0[],System.Int32,System.Int32)">
            <summary>
            Returns a new array where the item at removeAtIndex is removed. The new array&quot;s lenght is altered to reflect the removed item.
            
            If the removeAtIndex is not valid (less than 0 or greater than the total number of elements) the original array is returned.
            </summary>
            <typeparam name="T">Element type of the array</typeparam>
            <param name="sourceArray">source array</param>
            <param name="removeAtIndexStart">Starting Index where the first Item is removed</param>
            <param name="numberOfElementToRemove">Number of Items to remove</param>
            <returns>
            The new array where item is removed or the original source array if the removeAtIndex is not valid or numberOfElementToRemove is not greater than zero.
            </returns>
        </member>
        <member name="M:Common.ArrayExtensions.RemoveAll``1(``0[],System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a new array where elements in the collection are removed. The new array&quot;s lenght is altered to reflect the removed items.
            
            If nothing is matched, the original source array is returned.
            </summary>
            <typeparam name="T">Element type of the array</typeparam>
            <param name="sourceArray">source array used to search for item</param>
            <param name="collectionOfItemsToRemove">item to be removed</param>
            <returns>
            The new array where items are removed or the original source array if nothing is matched.
            </returns>
            <remarks>
            If type T implements the IEquatable&lt;T&gt; generic interface, the equality comparer is the Equals method of that interface; otherwise, the default equality comparer is Object.Equals. 
            </remarks>	
        </member>
        <member name="M:Common.ArrayExtensions.Copy``1(``0[])">
            <summary>
            Creates a copy of the source array.
            </summary>
            <typeparam name="T">type of element within the array</typeparam>
            <param name="sourceArray">array that will be copied</param>
            <returns>A new array were each element from the source array has been copied</returns>
            <seealso cref="M:System.Array.Copy(System.Array,System.Array,System.Int32)"/>
        </member>
        <member name="M:Common.ArrayExtensions.Copy``1(``0[],System.Int32,System.Int32)">
            <summary>
            Creates a copy of the source array starting at the starting index for a number of elements
            </summary>
            <typeparam name="T">element type</typeparam>
            <param name="sourceArray">array that will be copied</param>
            <param name="startingIndex">starting index of the first element that will be copied</param>
            <param name="numberOfElements">number of elements copied</param>
            <returns>A new array of elements copied from the source array</returns>
            <seealso cref="M:System.Array.CopyTo(System.Array,System.Int32)"/>
            <exception cref="T:System.ArgumentNullException">sourceArray is null.-or-destinationArray is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            startingIndex is less than zero or greater than the array length
            </exception>
            <exception cref="T:System.ArgumentException">
            numberOfElements is greater than the number of elements from startingIndex to the end of sourceArray
            </exception>
        </member>
        <member name="T:Common.ConfigHelper">
            <property name="keyword" value="Configuration" />
            <property name="keyword" value="Helper" />
            <property name="keyword" value="Parsing" />
            <property name="keyword" value="Inline Variables" />
            <property name="keyword" value="Embedded Variables" />
            <property name="keyword" value="Inline Parameters" />
            <property name="keyword" value="Embedded Parameters" />
            
            <summary>
            This is a&quot;helper&quot; static class used to aid in the
            processing of configuration file values.
            </summary>
            <remarks>
            Every method (unless otherwise stated) in this class can
            operator against inline (embedded) &quot;special&quot;
            directory or file variables. These inline variables will be
            delimited by opening and closing brackets (&quot;[&quot;,
            &quot;]&quot;). Once encountered the system will try to
            evaluate the variable and the corresponding value and/or
            action will be applied and the returned value substituted for
            this inline variable. If the inline variable is not
            recognized by the system, no action is performed and the
            original value is still present.
            
            
            
            \Examples of inline variables are: [LoggedInUser],
            [DeploymentLocation], etc.
            
            
            
            Below are the defined inline variables:
            <xtable columnwidths="25c%">
            Inline                                   Meaning
             Variable                                 
             Name                                     
            ---------------------------------------  -----------------------------------------------------------------------------------------------------------------------------------------
            LoggedInUser                             The user name of the
                                                      logged in User (without
                                                      domain)
            LocalHostName                            The name of this Local
                                                      Host (without domain)
            LocalHostNameFQDN                        The Fully Qualified Name of this Computer including domain. If the domain does not exists just the name of this computer.
            LocalHostFullName                       The Fully Qualified Name of this Computer including domain, the domain\Host format, or just the Host name depending on what information is available.
            LocalHostIPAddress                       The IP address (x.x.x.x)
                                                      of the local host
            ProcessId                                The process Id of this
                                                      process
            ApplicationName                          The name of the
             \-or-                                    Application that is
             AppName                                  running this assembly
            ApplicationVersion                       The Application version
             \-or-                                    (v.v.v.v) that is
             AppVersion                               running this assembly
             \-or-                                    
             AppVer 
             ApplicationRunTimeDirectory             Tries to determine the 
             \-or-                                    best directory the
             AppRunTimeDir                            application started in.
             \-or-
             AppRTDir
            DeploymentVersion                        The Deployment Version
             \-or-                                    of the Deployment
             DeploymentVer                            Package. If there is no
             \-or-                                    Deployment Package
             DeployVer                                (version) the
                                                      Application's Version is
                                                      used
            DeploymentLocation                       The Directory Location
             \-or-                                    of where the Deployment
             DeployLocation                           Package is being
             \-or-                                    deployed
             DeploymentLoc                            
             \-or-                                    
             DeployLoc                                
            DeploymentLocationData                   The Directory Location
             \-or-                                    of where the Deployment
             DeployLocData                            Package is being
                                                      deployed
            DeploymentLocationData                   The Directory location
             \-or-                                    of the deployment
             DeployLocData                            package's data location
            ApplicationUserProfile                   Defined as
             \-or-                                    &quot;[MyDocuments]\\[ApplicationName]&quot;
             AppUserProfile                           
            ApplicationVersionName                   Defined as
             \-or-                                    &quot;[ApplicationName]\\[DeploymentVersion]&quot;
             ApplicationVerName                       
             \-or-                                    
             AppVersionName                           
             \-or-                                    
             AppVerName                               
            CompanyName                              The name of the Company
                                                      as defined in by the
                                                      Application execution
                                                      property.
            CurrentDir                               The Current Working
             \-or-                                    Directory which can be
             CurrentDirectory                         different from where the
             \-or-                                    Application started.
             CurrDir                                  
            WorkingDirectory                         The same as Current
             \-or-                                    Directory
             WorkingDir                               
             \-or-                                    
             WorkDir                                  
            StartUpDirectory                         The directory where the
             \-or-                                    Process/Application
             StartUpDir                               started in
            MachineName                              The NetBIOS name of this
                                                      local computer
            OperatingSystemVersion                   The name of the current
             \-or-                                    OS Version (e.g.,
             OSVersion                                &quot;Microsoft Windows
                                                      NT 6.0.6002 Service Pack
                                                      2&quot;)
            OSPlatformId                             The OS platform Id as
                                                      defined by Microsoft
                                                      <see cref="T:System.PlatformID"/>
            DomainName                               The name of the Domain
                                                      the users belongs to. If
                                                      the user does not belong
                                                      to a domain the
                                                      computer's Name is used.
            DomainFQ                                 The Fully qualified Domain name of the Domain
                                                      this computer belongs to. 
            UserName                                 The display name of the
                                                      logged in user.
            AssemblyDir                              The directory of the
                                                      loaded exe Assembly. 
            AssemblyFullName                         The Full name of the
                                                      loaded exe Assembly.
            AssemblyLocation                         The location of the
                                                      loaded exe Assembly. See
                                                      <see cref="P:Common.Functions.AssemblyLocation"/>.
            AssemblyProbeDir                         The directory used to
                                                      probe for assemblies.
                                                      See <see cref="P:Common.Functions.AssemblyProbeDir"/>.
            CommonPatternLibDir                       The directory of where this Common Pattern Assembly was loaded from.
             \-or-                                    
            CPLD
            $&quot;EnvironmentVariableName&quot;     A name of an
                                                      Environmental Variable
                                                      (e.g., PATH, HOMEDRIVE,
                                                      etc.). Note that quotes
                                                      are required!
            System                                   An argument name that
             Special                                  represents the <see cref="T:System.Environment.SpecialFolder"/>
             Folder                                   
             Enumerator                               * ApplicationData &#45;&#45;
                                                        The directory that
                                                        serves as a common
                                                        repository for
                                                        application&#45;specific
                                                        data for the current
                                                        roaming user.
                                                      * CommonApplicationData
                                                        &#45;&#45; The directory
                                                        that serves as a common
                                                        repository for
                                                        application&#45;specific
                                                        data that is used by all
                                                        users.
                                                      * \ 
                                                        LocalApplicationData &#45;&#45;
                                                        The directory that
                                                        serves as a common
                                                        repository for
                                                        application&#45;specific
                                                        data that is used by the
                                                        current, non&#45;roaming
                                                        user.
                                                      * Cookies &#45;&#45; The
                                                        directory that serves as
                                                        a common repository for
                                                        Internet cookies.
                                                      * Desktop &#45;&#45; The
                                                        logical Desktop rather
                                                        than the physical file
                                                        system location.
                                                      * Favorites &#45;&#45;
                                                        The directory that
                                                        serves as a common
                                                        repository for the
                                                        user's favorite items.
                                                      * History &#45;&#45; The
                                                        directory that serves as
                                                        a common repository for
                                                        Internet history items.
                                                      * InternetCache &#45;&#45;
                                                        The directory that
                                                        serves as a common
                                                        repository for temporary
                                                        Internet files.
                                                      * Programs &#45;&#45;
                                                        The directory that
                                                        contains the user's
                                                        program groups.
                                                      * MyComputer &#45;&#45;
                                                        The &quot;My Computer&quot;
                                                        folder
                                                      * MyMusic &#45;&#45; The
                                                        &quot;My Music&quot;
                                                        folder.
                                                      * MyPictures &#45;&#45;
                                                        The &quot;My Pictures&quot;
                                                        folder.
                                                      * Recent &#45;&#45; The
                                                        directory that contains
                                                        the user's most recently
                                                        used documents.
                                                      * SendTo &#45;&#45; The
                                                        directory that contains
                                                        the Send To menu items.
                                                      * StartMenu &#45;&#45;
                                                        The directory that
                                                        contains the Start menu
                                                        items.
                                                      * Startup &#45;&#45; The
                                                        directory that
                                                        corresponds to the
                                                        user's Startup program
                                                        group.
                                                      * \  System &#45;&#45;
                                                        The System directory.
                                                      * Templates &#45;&#45;
                                                        The directory that
                                                        serves as a common
                                                        repository for document
                                                        templates.
                                                      * \  DesktopDirectory &#45;&#45;
                                                        The directory used to
                                                        physically store file
                                                        objects on the desktop.
                                                      * \  Personal &#45;&#45;
                                                        The directory that
                                                        serves as a common
                                                        repository for
                                                        documents.
                                                      * \  MyDocuments &#45;&#45;
                                                        The &quot;My Documents&quot;
                                                        folder.
                                                      * \  ProgramFiles &#45;&#45;
                                                        The program files
                                                        directory
                                                      * \  CommonProgramFiles
                                                        &#45;&#45; The directory
                                                        for components that are
                                                        shared across
                                                        applications.
            Search(&quot;DirectoryList&quot;         An action function that
             ,                                        will take the &quot;FileList&quot;
             &quot;FileList&quot;)                    and search for one or
                                                      more files in the
                                                      &quot;DiroryList&quot;.
                                                      <seealso cref="M:Common.ConfigHelper.Search(System.String)"/>For
                                                      \Example:
                                                      Search([MyDocuments];c:\\docs;\\\\networkhost\\docs
                                                      ,
                                                      myFile.doc;company.doc)Searches
                                                      the
                                                      &quot;c:\\&lt;User&gt;\\MyDocuments&quot;,
                                                      &quot;c:\\docs&quot;,
                                                      and &quot;\\\\networkhost\\docs&quot;
                                                      directories for either
                                                      one of the following
                                                      files, &quot;myFile.doc&quot;
                                                      or &quot;Company.doc&quot;.
                                                      If found the absolute
                                                      path of the file
                                                      (including filename) is
                                                      returned.
            SearchNewest(&quot;DirectoryList&quot;   Same as Search above but
             ,                                        only returns the newest
             &quot;FileList&quot;)                    (most recent) file. For
                                                      more information see <see cref="M:Common.ConfigHelper.SearchNewest(System.String)" />.
            CheckNOTNull(&quot;PathList&quot;)       A list of comma
                                                      delimited paths or
                                                      inline variables where
                                                      each element is
                                                      evaluated and the first
                                                      one that is not null and
                                                      not an empty string is
                                                      returned. For more
                                                      information see <see cref="M:Common.ConfigHelper.NullCheck(System.String)" /> For
                                                      \Example:
                                                      CheckNotNull([WorkingDirectory],
                                                      [StartUpDirectory],
                                                      [Search([MyDocuments];c:\\docs;\\\\networkhost\\docs
                                                      ,
                                                      myFile.doc;company.doc)],
                                                      c:\\bin\\). In this
                                                      \example if all the
                                                      inline variables return
                                                      null, &quot;c:\\bin\\&quot;
                                                      is returned since it is
                                                      the last path in the
                                                      directory.
            </xtable>
            
            Note that the variable names are not case sensitive. 
            </remarks>   
            
        </member>
        <member name="F:Common.ConfigHelper.regexSplitArg">
             <summary>
              A description of the regular expression:
              
              [Item]: A named capture group. [.*?]
                  Any character, any number of repetitions, as few as possible
              ;
              
            
             </summary>
        </member>
        <member name="M:Common.ConfigHelper.Search(System.String)">
            <property name="keyword" value="Path" />
            <property name="keyword" value="Directory" />
            <property name="keyword" value="File" />
            <property name="keyword" value="Exist" />
            
            <summary>
            Searches the given directory list for the first existence of
            the file from the file list.
            </summary>
            <param name="searchStringArgs">This argument is used as the
                                           search criteria to determine
                                           if one of the files in the
                                           \file list is found in one of
                                           the directories in the
                                           directory list.<para></para><para></para>This
                                           string consists of two
                                           sections delimited by a &quot;,&quot;
                                           (comma). The first section is
                                           a list of directories
                                           separated by a semicolon (;).
                                           The second section is a list
                                           of possible files that maybe
                                           found in one of the
                                           directories in the first
                                           section. Each file is
                                           separated by a semicolon (;).<para></para><para></para>Note
                                           that any of the elements in
                                           either list can contain
                                           inline parameters as defined
                                           in the remarks of <see cref="T:Common.ConfigHelper" text="ConfigHelper Class" />.</param>
            <example>
            An application (TestAPP) is trying to find a set of possible
            log files (mylog.log; mylog.txt) within a set of directories
            (Windows' default program data directory;the current users'
            document directory;C:\\Windows) in this search order.
            
            
            
            &quot;[ApplicationData]\\TestApp;[LocalApplicationData]\\TestApp;[CommonApplicationData]\\TestApp;[MyDocuments]\\TestApp;C:\\Windows,mylog.log;mylog.txt&quot;
            
            
            
            Search will take the first file in the file section
            (mylog.log) and search for the existence of &quot;mylog.log&quot;
            in each directory in the directory section. If found Search
            will return the complete path of where the file was found. If
            not found, Search will take the next argument (mylog.txt) and
            perform the same directory search.
            
            
            
            If mylog.log was found the the [CommonApplicationData]
            directory, Search will return C:\\ProgramData\\mylog.log.
            
            
            
            \Note that each inline parameter will be expanded
            ([CommonApplicationData] -&gt; C:\\ProgramData\\). See <see cref="M:Common.ConfigHelper.Parse(System.String)" />
            for more information about inline parameters.
            </example>
            <returns>
            \Returns the complete path (directory and file) of where the
            existence of file was found, otherwise NULL is return to
            indicate none of the files were found within any of the
            directories.
            </returns>
            <remarks>
            See <see cref="T:Common.ConfigHelper" text="ConfigHelper Class" />
            regarding inline parameters.
            </remarks>                                                                                                                                                    
        </member>
        <member name="M:Common.ConfigHelper.SearchNewest(System.String)">
            <property name="keyword" value="Path" />
            <property name="keyword" value="Directory" />
            <property name="keyword" value="File" />
            <property name="keyword" value="Exist. Recent Version" />
            <property name="keyword" value="Newest Version" />
            
            <summary>
            Searches the given directory list for the most recent
            (newest) version of the file from the file list, if it
            existence.
            </summary>
            <param name="searchStringArgs">This argument is used as the
                                           search criteria to determine
                                           if one of the files in the
                                           \file list is found in one of
                                           the directories in the
                                           directory list and if found
                                           is it the most recent
                                           (newest) version.<para></para><para></para>This
                                           string consists of two
                                           sections delimited by a &quot;,&quot;
                                           (comma). The first section is
                                           a list of directories
                                           separated by a semicolon (;).
                                           The second section is a list
                                           of possible files that maybe
                                           found in one of the
                                           directories in the first
                                           section. Each file is
                                           separated by a semicolon (;).<para></para><para></para>Note
                                           that any of the elements in
                                           either list can contain
                                           inline parameters as defined
                                           in the remarks of <see cref="T:Common.ConfigHelper" text="ConfigHelper Class" />.</param>
            <example>
            See <see cref="M:Common.ConfigHelper.Search(System.String)" />
            for an example
            </example>
            <returns>
            \Returns the complete path (directory and file) of where the
            existence and most recent (newest) version of file was found,
            otherwise NULL is return to indicate none of the files were
            found within any of the directories.
            </returns>
            <remarks>
            See <see cref="T:Common.ConfigHelper" text="ConfigHelper Class" />
            regarding inline parameters.
            
            \See Also <see cref="M:Common.ConfigHelper.Search(System.String)" />.
            
            
            </remarks>                                                                                                            
        </member>
        <member name="M:Common.ConfigHelper.NullCheck(System.String)">
            <property name="keyword" value="Null" />
            <property name="keyword" value="Parse" />
            <property name="keyword" value="empty string" />
            
            <summary>
            \ \ 
            
            This functions returns the first non null/empty string value
            given after each element is evaluated by calling <see cref="M:Common.ConfigHelper.Parse(System.String)" />.
            </summary>
            <param name="checkStringArgs">A string value that represents
                                          a series of paths, files,
                                          inline variables, etc.
                                          delimited by a semicolon (;)
                                          or comma (,).</param>
            <returns>
            \Returns null indicating that the string list parsed to a
            null/empty string or a null/empty string was given.
            </returns>
            <remarks>
            This function is used ensure a path is returned after
            evaluating the string list.
            </remarks>
            <example>
            &quot;[Search([CommonProgramData];[MyDocuments],myFile.log;myFile.txt),[MyDocuments]\\myFile.log&quot;
            
            
            
            If the search fails (returns null), the path of
            &quot;[MyDocuments]\\myFile.log&quot; is returned where
            &quot;[MyDocuments]&quot; is evaluated.
            </example>                                                                                                                        
        </member>
        <member name="M:Common.ConversionHelpers.ParseArgumentValueToString(System.Object,System.Boolean)">
            <summary>
            Returns a String representation of the argValue properly delimited. For example in the case of an array an string of all elements are returned...
            </summary>
            <param name="argValue">The value that will be translated to a string</param>
            <param name="useHashAsDateTimeIndicator">True (default) the Database date/time string indicators are used (i.e., #). False uses the .Net string delimiater (i.e., &quot;) (</param>
            <returns>A string representation of the argValue</returns>
            <example>
            	ConversionHelpers.ParseArgumentValueToString(new int[] { 1, 2, 3, 4, 5}) => &quot;{ 1, 2, 3, 4, 5 }&quot;
            	ConversionHelpers.ParseArgumentValueToString(new int[,] { {1, 2}, {3, 4}, {5, 6} }) => &quot;{ { 1, 2 }, { 3, 4 }, { 5, 6 } }&quot;
            	ConversionHelpers.ParseArgumentValueToString(null) => &quot;null&quot;
            	ConversionHelpers.ParseArgumentValueToString(&quot;abcd&quot;) => &quot;\&quot;abc\&quot;&quot;
            	ConversionHelpers.ParseArgumentValueToString(new DateTime(2012, 12, 25)) => &quot;#12/25/2012#&quot;
            	ConversionHelpers.ParseArgumentValueToString(new DateTime(2012, 12, 25), false) => &quot;\&quot;12/25/2012\&quot;&quot;
            	ConversionHelpers.ParseArgumentValueToString(new List&lt;int&gt;() { 1, 2, 3 }) => &quot;{ 1, 2, 3 };&quot;
            	
            </example>
        </member>
        <member name="M:Common.ConversionHelpers.ParseArgumentValueToString(System.Array,System.Boolean)">
            <summary>
            Returns a String representation of the Array.
            </summary>
            <param name="argValue">An array</param>
            <param name="useHashAsDateTimeIndicator">True (default) the Database date/time string indicators are used (i.e., #). False uses the .Net string delimiater (i.e., &quot;) </param>
            <returns>A string representation of the Array</returns>
            <example>
            	ConversionHelpers.ParseArgumentValueToString(new int[] { 1, 2, 3, 4, 5}) => &quot;{ 1, 2, 3, 4, 5 }&quot;
            	ConversionHelpers.ParseArgumentValueToString(new int[,] { {1, 2}, {3, 4}, {5, 6} }) => &quot;{ { 1, 2 }, { 3, 4 }, { 5, 6 } }&quot;
            </example>
            <seealso cref="M:Common.ConversionHelpers.ParseArgumentValueToString(System.Object,System.Boolean)"/>
        </member>
        <member name="M:Common.ConversionHelpers.GetDefaultValue``1">
            <summary>
            Returns the Default Value based on T.
            </summary>
            <typeparam name="T">The type used to determine the default value</typeparam>
            <returns>The Default Value</returns>
        </member>
        <member name="M:Common.ConversionHelpers.CastToType``1(System.Object)">
            <summary>
            Cast argValue to type T.
            </summary>
            <typeparam name="T">The type that will be cast</typeparam>
            <param name="objectValue">The value that will be cast</param>
            <returns>The newly casted object</returns>		
            <exception cref="T:System.InvalidCastException">If objectValue cannot be casted this exception is thrown</exception>
        </member>
        <member name="M:Common.ConversionHelpers.GetDefaultValue(System.Type)">
            <summary>
            Returns the type's (objectType) default value.
            </summary>
            <param name="objectType">The type used to determine its' default value</param>
            <returns>The type's default value</returns>
        </member>
        <member name="M:Common.ConversionHelpers.Cast(System.Type,System.Object,System.Boolean)">
            <summary>
            Cast's objectValue to objectType (dynamically).
            </summary>
            <param name="objectType">The type the value will be casted to</param>
            <param name="objectValue">The object that will be casted</param>
            <param name="createDefaultIfNull">if true (default is false), if argValue is null the type's default value is returned. If false (default), null is returned.</param>
            <returns>The newly casted object</returns>
            <exception cref="T:System.InvalidCastException">If objectValue cannot be casted this exception is thrown</exception>
        </member>
        <member name="M:Common.ConversionHelpers.ChangeType(System.Object,System.Type,System.Type,System.Boolean,System.Boolean)">
            <summary>
            Converts convertValue from the convertValueType to the New convertToThisType data type.
            </summary>
            <param name="objectValue">The value to be converted</param>
            <param name="objectValuesType">the value's current data type</param>
            <param name="convertToThisType">the value's new data type</param>
            <param name="returnDefaultValueWhenDBNull">
            If true (default) and if the value is a DBNull the new data type's default value is returned.
            If false and if the new data type is a Value type, the function will try to convert the DBNull via the Convert.ChangeType method.
            </param>
            <param name="returnDefaultValueWhenNull">
            If true (default false) and if the value is null the new data type's default value is returned.
            If false (default) and if the new data type is a Value type, the function will try to convert the null via the Convert.ChangeType method.
            </param>
            <returns>New Value based on the New Data Type</returns>
            <remarks>
            If returnDefaultValueWhenDBNull is true, the current value is a DBNull, and the new data type is a Value type; 
            the default value for that that data type is returned, except if it is Nullable.
            In this case the value will be a Nullable object without a value (HasValue is false).
            
            If the objectValue is NULL and the new data type is a Nullable Value Type, a Nullable object is returned without a value (HasValue is false).
            </remarks>
            <exception cref="T:System.InvalidCastException">Thrown when the objectValue cannot be converted to the new data type.</exception>
        </member>
        <member name="M:Common.ConversionHelpers.ChangeType(System.Object,System.Type,System.Boolean,System.Boolean)">
            <summary>
            See ChangeType(object convertValue, System.Type objectValuesType, System.Type convertToThisType, bool returnDefaultValueWhenDBNull = true, bool returnDefaultValueWhenNull = false)
            
            Converts convertValue from the convertValueType to the New convertToThisType data type.
            </summary>
            <param name="objectValue">The value to be converted</param>
            <param name="convertToThisType">the value's new data type</param>
            <param name="returnDefaultValueWhenDBNull">
            If true (default) and if the value is a DBNull the new data type's default value is returned.
            If false and if the new data type is a Value type, the function will try to convert the DBNull via the Convert.ChangeType method.
            </param>
            <param name="returnDefaultValueWhenNull">
            If true (default false) and if the value is null the new data type's default value is returned.
            If false (default) and if the new data type is a Value type, the function will try to convert the null via the Convert.ChangeType method.
            </param>
            <returns>New Value based on the New Data Type</returns>
            <remarks>If objectValue is null or DBNull typeof(Object) is passed to ConvertToValue as the objectValuesType argument.</remarks>
            <seealso cref="M:Common.ConversionHelpers.ChangeType(System.Object,System.Type,System.Type,System.Boolean,System.Boolean)"/>
            <exception cref="T:System.InvalidCastException">Thrown when the objectValue cannot be converted to the new data type.</exception>
        </member>
        <member name="M:Common.ConversionHelpers.ChangeType``2(``1)">
            <summary>
            See ChangeType(object convertValue, System.Type objectValuesType, System.Type convertToThisType, bool returnDefaultValueWhenDBNull = true, bool returnDefaultValueWhenNull = false)
            
            Converts convertValue from type T to type V
            </summary>
            <param name="objectValue">The value to be converted</param>		
            <typeparam name="V">Convets convertValue to type V</typeparam>
            <typeparam name="T">the type of objectValue</typeparam>
            <returns>New Value based on the New Data Type</returns>
            <remarks>If objectValue is null or DBNull, the new type's default value will be returned.</remarks>
            <seealso cref="M:Common.ConversionHelpers.ChangeType(System.Object,System.Type,System.Type,System.Boolean,System.Boolean)"/>
            <exception cref="T:System.InvalidCastException">Thrown when the objectValue cannot be converted to the new data type.</exception>
        </member>
        <member name="M:Common.ConversionHelpers.ChangeType``1(System.Object,System.Type)">
            <summary>
            See ChangeType(object convertValue, System.Type objectValuesType, System.Type convertToThisType, bool returnDefaultValueWhenDBNull = true, bool returnDefaultValueWhenNull = false)
            
            Converts convertValue to type V
            </summary>
            <param name="objectValue">The value to be converted</param>		
            <param name="objectValuesType">the value's current data type</param>
            <typeparam name="V">Convets convertValue to type V</typeparam>		
            <returns>New Value based on the New Data Type</returns>
            <remarks>If objectValue is null or DBNull, the new type's default value will be returned.</remarks>
            <seealso cref="M:Common.ConversionHelpers.ChangeType(System.Object,System.Type,System.Type,System.Boolean,System.Boolean)"/>
            <exception cref="T:System.InvalidCastException">Thrown when the objectValue cannot be converted to the new data type.</exception>
        </member>
        <member name="M:Common.ConversionHelpers.ChangeType``1(System.Object)">
            <summary>
            See ChangeType(object convertValue, System.Type objectValuesType, System.Type convertToThisType, bool returnDefaultValueWhenDBNull = true, bool returnDefaultValueWhenNull = false)
            
            Converts convertValue to type V
            </summary>
            <param name="objectValue">The value to be converted</param>				
            <typeparam name="V">Convets convertValue to type V</typeparam>		
            <returns>New Value based on the New Data Type</returns>
            <remarks>If objectValue is null or DBNull, the new type's default value will be returned.</remarks>
            <seealso cref="M:Common.ConversionHelpers.ChangeType(System.Object,System.Type,System.Type,System.Boolean,System.Boolean)"/>
            <exception cref="T:System.InvalidCastException">Thrown when the objectValue cannot be converted to the new data type.</exception>
        </member>
        <member name="T:Common.CreateDynamicClass">
            <summary>
            This will create and compile a sealed public class based on the namespace, class name, collection of member name and type, and optionally a base class type.
            </summary>
        </member>
        <member name="M:Common.CreateDynamicClass.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Tuple{System.Type,System.String}},System.Type)">
            <summary>
            Returns a compiled class based on the arguments given
            </summary>       
            <param name="newClassName">
            The name of the class.
            
            This name must conform to the C# class name restricts. To generate a proper class name use the CreateDynamicClass.MakeClassNameFromString static method.
            </param>
            <param name="memberProperties">
            This defines the public properties of the class. 
            
            A collection of pairs where the first is the data type of the property and the second is the property&apos;s name.
            </param>
            <param name="baseType">
            If not null, the data type that is the base class that this new class will inherent.
            </param>
            <exception cref="T:System.InvalidProgramException">
            This is thrown when there is a compiler error with the new class. 
            </exception>
        </member>
        <member name="M:Common.CreateDynamicClass.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Type},System.Type)">
            <summary>
            Returns a compiled class based on the arguments given
            </summary>       
            <param name="newClassName">
            The name of the class.
            
            This name must conform to the C# class name restricts. To generate a proper class name use the CreateDynamicClass.MakeClassNameFromString static method.
            </param>
            <param name="propertyNames">
            The class property names
            </param>
            <param name="propertyTypes"></param>
            <param name="baseType">
            The class property type associated with the name.
            </param>       
            <exception cref="T:System.InvalidProgramException">
            This is thrown when there is a compiler error with the new class. 
            </exception>
        </member>
        <member name="P:Common.CreateDynamicClass.ClassName">
            <summary>
            Returns the class name
            </summary>
        </member>
        <member name="P:Common.CreateDynamicClass.Type">
            <summary>
            Returns the type object of this class.
            </summary>
        </member>
        <member name="P:Common.CreateDynamicClass.Properties">
            <summary>
            Returns all public properties as defined in the memberProperties argument of this constructor.
            </summary>
        </member>
        <member name="P:Common.CreateDynamicClass.Item(System.Int32)">
            <summary>
            Returns the PropertyInfo object based on index.
            </summary>
            <param name="nIndex"></param>
            <returns></returns>
        </member>
        <member name="P:Common.CreateDynamicClass.Item(System.String)">
            <summary>
            Returns the PropertyInfo object based on the Property&apos;s Name
            </summary>
            <param name="propertyName">The name of the property to retreive</param>
            <returns>The ProperyInfo or null to indicate that the property does not exists</returns>
        </member>
        <member name="M:Common.CreateDynamicClass.MakeClassNameFromString(System.String)">
            <summary>
            Returns a proper class name
            </summary>
            <param name="className">The string that will be turned into a proper class name</param>
            <returns></returns>
        </member>
        <member name="M:Common.CreateDynamicClass.CreateInstance">
            <summary>
            Creates an instance to the class.
            </summary>
            <returns>newly created instance of this class type</returns>
        </member>
        <member name="M:Common.CreateDynamicClass.CreateInstance(System.Object[])">
            <summary>
            Creates an instance of the class based on the parameters given that are used to populate the instance. 
            </summary>
            <param name="constructorParameters">
            A list of parameters that are used to populate the instance based on the order of the parameters defined in the memberProperties argument of the constructor.
            </param>
            <returns>A newly created instance that has been initialized</returns>
        </member>
        <member name="M:Common.CreateDynamicClass.CreateInstanceWrapper">
            <summary>
            Creates a DynamicClassInstance (wrapper around the instance) to the class.
            </summary>
            <returns>newly created DynamicClassInstance of this class type</returns>
        </member>
        <member name="M:Common.CreateDynamicClass.CreateInstanceWrapper(System.Object[])">
            <summary>
            Creates a DynamicClassInstance (wrapper around the instance) of the class based on the parameters given that are used to populate the instance. 
            </summary>
            <param name="constructorParameters">
            A list of parameters that are used to populate the instance based on the order of the parameters defined in the memberProperties argument of the constructor.
            </param>
            <returns>A newly created DynamicClassInstance instance that has been initialized</returns>
        </member>
        <member name="M:Common.CreateDynamicClass.Contains(System.String)">
            <summary>
            Returns true to indicate that the property exists in this class.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Common.CreateDynamicClass.GetValue(System.Object,System.String)">
            <summary>
            Returns the value of the property based on the instance
            </summary>
            <param name="instance">The instance of this class</param>
            <param name="propertyName">The property name of the value to retreive</param>
            <returns>The value of the property</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Thrown if the property does not exists within the class
            </exception>
        </member>
        <member name="M:Common.CreateDynamicClass.GetValues(System.Object,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns a collection of values associated with the collection of property names.
            </summary>
            <param name="instance">The instance of this class</param>
            <param name="propertyNames">A collection of proerpty names that will be used to retreive their assocated values</param>
            <returns>A collection of associated values</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Thrown if the property does not exists within the class
            </exception>
        </member>
        <member name="M:Common.CreateDynamicClass.GetValue``1(System.Object,System.String)">
            <summary>
            Returns the value of the property based on the instance
            </summary>
            <typeparam name="T">Converts the value to this type</typeparam>
            <param name="instance">The instance of this class</param>
            <param name="propertyName">The property name of the value to retreive</param>
            <returns>The value of the property converted to type T</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Thrown if the property does not exists within the class
            </exception>
        </member>
        <member name="M:Common.CreateDynamicClass.GetValues(System.Object)">
            <summary>
            Returns all property values for the instance
            </summary>
            <param name="instance">The instance of this class</param>
            <returns>Collection of property values for the instance</returns>
        </member>
        <member name="M:Common.CreateDynamicClass.GetPropertyValues(System.Object)">
            <summary>
            Returns a collection of tuples where the first item is the property information object and the second is the associated value.
            </summary>
            <param name="instance">The instance of this class</param>
            <returns>
            Returns a collection of tuples where the first item is the property information object and the second is the associated value.
            </returns>
        </member>
        <member name="M:Common.CreateDynamicClass.SetValue(System.Object,System.String,System.Object)">
            <summary>
            Sets the property of the instance to this value
            </summary>
            <param name="instance">The instance of this class</param>
            <param name="propertyName">The property name of the value to set</param>
            <param name="newValue">The new value that will be set</param>
            <exception cref="T:System.IndexOutOfRangeException">
            Thrown if the property does not exists within the class
            </exception>
        </member>
        <member name="M:Common.CreateDynamicClass.SetValues(System.Object,System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Object}})">
            <summary>
            Updates instance based on the property name and value tuple.
            </summary>
            <param name="instance">The instance of this class</param>
            <param name="propertyNameValueSetCollection">
            A collection of tuples where the first item it the class&apos;s property name and the second item is the assocated value that will be used to update the property.
            </param>
            <exception cref="T:System.IndexOutOfRangeException">
            Thrown if the property does not exists within the class
            </exception>
        </member>
        <member name="T:Common.DynamicClassInstance">
            <summary>
            A Wrapper around an instance that is created from the class created by CreateDynamicClass. This adds several helper methods to retrieve and set property values
            within the instance.
            </summary>
        </member>
        <member name="M:Common.DynamicClassInstance.Create(Common.CreateDynamicClass)">
            <summary>
            Creates a DynamicClassInstance instance based on the CreateDynamicClass.
            </summary>
            <param name="dynamicClass">CreateDynamicClass instance</param>
            <returns>A DynamicClassInstance with its associated CreateDynmaicClass instance</returns>
        </member>
        <member name="M:Common.DynamicClassInstance.Create(Common.CreateDynamicClass,System.Object[])">
            <summary>
            Creates a DynamicClassInstance instance based on the CreateDynamicClass and associated arguments
            </summary>
            <param name="dynamicClass">CreateDynamicClass instance</param>
            <param name="constrouctorArgs">
            A list of parameters that are used to populate the instance based on the order of the parameters defined in the dynamicClass argument of the constructor.
            </param>
            <returns>A DynamicClassInstance with its associated CreateDynmaicClass instance</returns>
        </member>
        <member name="P:Common.DynamicClassInstance.Instance">
            <summary>
            an instance created from the CreateDynamicClass object.
            </summary>
        </member>
        <member name="P:Common.DynamicClassInstance.Properties">
            <summary>
            A collection of property information associated with the Instance.
            </summary>
        </member>
        <member name="P:Common.DynamicClassInstance.UnderlyingType">
            <summary>
            Returns the Instance&apos;s type as defined by CreateDynamicClass object.
            </summary>
        </member>
        <member name="P:Common.DynamicClassInstance.Item(System.String)">
            <summary>
            Returns the value associated with the property name within the instance.
            </summary>
            <param name="propertyName">The name of the property that will be used to retereive the value</param>
            <returns>The value of proeprty</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Thrown if the property does not exists within the class
            </exception>
        </member>
        <member name="M:Common.DynamicClassInstance.Contains(System.String)">
            <summary>
            Returns true to indicate that the property exists in this class.
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Common.DynamicClassInstance.GetProperty(System.String)">
            <summary>
            Get&apos;s the property information or returns null to indicate that the property does not exist within the class&apos;s instance.
            </summary>
            <param name="propertyName">The name of the property</param>
            <returns>The property information or null to indicate that it does not exists</returns>
        </member>
        <member name="M:Common.DynamicClassInstance.GetValue(System.String)">
            <summary>
            Returns the value of the property based on the instance
            </summary>        
            <param name="propertyName">The property name of the value to retreive</param>
            <returns>The value of the property</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Thrown if the property does not exists within the class
            </exception>
        </member>
        <member name="M:Common.DynamicClassInstance.GetValues(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns a collection of values associated with the collection of property names.
            </summary>        
            <param name="propertyNames">A collection of proerpty names that will be used to retreive their assocated values</param>
            <returns>A collection of associated values</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Thrown if the property does not exists within the class
            </exception>
        </member>
        <member name="M:Common.DynamicClassInstance.GetValues">
            <summary>
            Returns all property values for the instance
            </summary>
            <returns>Collection of property values for the instance</returns>
        </member>
        <member name="M:Common.DynamicClassInstance.GetPropertyValues">
            <summary>
            Returns a collection of tuples where the first item is the property information object and the second is the associated value.
            </summary>
            <returns>
            Returns a collection of tuples where the first item is the property information object and the second is the associated value.
            </returns>
        </member>
        <member name="M:Common.DynamicClassInstance.GetValue``1(System.String)">
            <summary>
            Returns the value of the property based on the instance
            </summary>
            <typeparam name="T">Converts the value to this type</typeparam>        
            <param name="propertyName">The property name of the value to retreive</param>
            <returns>The value of the property converted to type T</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Thrown if the property does not exists within the class
            </exception>
        </member>
        <member name="M:Common.DynamicClassInstance.SetValue(System.String,System.Object)">
            <summary>
            Sets the property of the instance to this value
            </summary>       
            <param name="propertyName">The property name of the value to set</param>
            <param name="newValue">The new value that will be set</param>
            <exception cref="T:System.IndexOutOfRangeException">
            Thrown if the property does not exists within the class
            </exception>
        </member>
        <member name="M:Common.DynamicClassInstance.SetValues(System.Collections.Generic.IEnumerable{System.Tuple{System.String,System.Object}})">
            <summary>
            Updates instance based on the property name and value tuple.
            </summary>       
            <param name="propertyNameValueSetCollection">
            A collection of tuples where the first item it the class&apos;s property name and the second item is the assocated value that will be used to update the property.
            </param>
            <exception cref="T:System.IndexOutOfRangeException">
            Thrown if the property does not exists within the class
            </exception>
        </member>
        <member name="M:Common.DataTableExtensions.ConvertToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Converts the source collection to a data table based on the source collection element type&apos;s public properties (not public member variables).
            </summary>
            <typeparam name="T">source collection element type</typeparam>
            <param name="source">the collection that will be converted</param>
            <param name="dataTableName">Optional name. If null the entityType&apos;s data table name is used</param>
            <returns>
            A new datatable based on T&apos;s public properties.
            </returns>
        </member>
        <member name="M:Common.DataTableExtensions.ConvertToDataTable(System.Collections.IEnumerable,System.Type,System.String)">
            <summary>
            Converts the source collection to a data table based on the source collection element type&apos;s public properties (not public member variables).
            </summary>
            <param name="source">the collection that will be converted</param>
            <param name="elementType">element data type</param>
            <param name="dataTableName">Optional name. If null the entityType&apos;s data table name is used</param>
            <returns>
            A new datatable based on T&apos;s public properties.
            </returns>
        </member>
        <member name="M:Common.DataTableExtensions.ConvertToDataTable(System.Collections.IEnumerable,System.String)">
            <summary>
            Converts the source collection to a data table based on the source collection element type&apos;s public properties (not public member variables).
            </summary>
            <param name="source">the collection that will be converted</param>
            <param name="dataTableName">Optional name. If null the entityType&apos;s data table name is used</param>
            <returns>
            A new datatable based on T&apos;s public properties.
            </returns>
        </member>
        <member name="M:Common.DataTableExtensions.CreateTable``1(System.String)">
            <summary>
            Creates a New DataTable based on T&apos;s public properties (not public member variables).
            Each public property will become a column with the corresponding data type within the data table.
            </summary>
            <typeparam name="T">The data type that will be used to create the datatable</typeparam>
            <param name="dataTableName">Optional name. If null the entityType&apos;s data table name is used</param>
            <returns>
            A new datatable based on T&apos;s public properties.
            </returns>
        </member>
        <member name="M:Common.DataTableExtensions.CreateTable(System.Type,System.String)">
            <summary>
            Creates a New DataTable based on T&apos;s public properties (not public member variables).
            Each public property will become a column with the corresponding data type within the data table.
            </summary>
            <param name="entityType">data type used to create the data table</param>
            <param name="dataTableName">Optional name. If null the entityType&apos;s data table name is used</param>
            <returns>
            A new datatable based on T&apos;s public properties.
            </returns>
        </member>
        <member name="M:Common.DataTableExtensions.ConvertToDataTable(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a New single column DataTable.
            </summary>
            <param name="source">a collection of strings</param>
            <param name="dataTableName">Optional name. If null, &quot;string&quot; is used</param>
            <returns>
            A single column data table whose elements are from the collection of strings.
            </returns>
        </member>
        <member name="M:Common.DataTableExtensions.ConvertToDataTable(System.Collections.Generic.IEnumerable{System.String},System.Boolean,System.String)">
            <summary>
            Creates a New single column DataTable.
            </summary>
            <param name="source">a collection of strings</param>
            <param name="treatEmptyStringAsDBNull">if true empty and nulls are treated as DBNull value. If false only nulls are treated as DBNull value.</param>
            <param name="dataTableName">Optional name. If null, &quot;string&quot; is used</param>
            <returns>
            A single column data table whose elements are from the collection of strings.
            </returns>
        </member>
        <member name="M:Common.DataTableExtensions.ToList``1(System.Data.DataTable,``0)">
            <summary>
            Returns a collection where the collection elements are defined as an Anonymous Type based on the template given. All data table values are converted to the corresponding AT type.
            </summary>
            <typeparam name="AT">Defines the Anonymous Type via the template given</typeparam>
            <param name="dataTable"></param>
            <param name="anonymousTypeTemplate">
            Anonymous Type Template given as a anonymous definition via the new keyword.
            
            Each property in the Anonymous Type must match the name of the Column and data type in the DataTable.
            
            Note that only the properties/columns defined will be returned! As such you can define a sub-set of the returning result set in the Anonymous Type Template.
            </param>
            <returns>Collection of Anonymous Type elements based on the template given</returns>
            <example>
            <code>
                dataTable.ToList(new {MIC=String.Empty,Institution=String.Empty, Acronym=String.Empty,LastUpdated=new System.Nullable&lt;DateTime&gt;()})
            </code>
                
                In this example four columns will be selected and returned (MIC (returns string), Institution (returns string), Acronym (returns string), and LastUpdated (returns DateTime which can be nullable)). Note that the last column (LastUpdated)
                can contain nulls (i.e., DBNulls). The data type of each properly must match the associated column type.
                
                Note that the result set can return 5 columns, but only 4 are returned to your application since only 4 are defined!
            </example>
        </member>
        <member name="M:Common.DataTableExtensions.ToList``1(System.Data.DataTable)">
            <summary>
            Returns a list of items of type T where the data row&apos;s columns are mapped to the public properties of type T. All data row values are converted to the corresponding type&apos;s property type.
            </summary>
            <typeparam name="T">A class/struct of public properties that are used to map to the columns of the data row</typeparam>
            <param name="dataTable">Data table that will be converted to a list</param>
            <returns>A list of mapped T items</returns>
        </member>
        <member name="M:Common.DataTableExtensions.ToList(System.Data.DataTable)">
            <summary>
            Converts data rows into a list of associated DynamicClassInstance
            </summary>
            <param name="dataTable">a data table that will be converted to a list</param>
            <returns>a collection of DynamicClassInstance based on the data table</returns>
        </member>
        <member name="M:Common.DataTableExtensions.ToList``1(System.Data.DataTable,System.Func{System.Data.DataRow,Common.CreateDynamicClass,System.Object,``0})">
            <summary>
            Returns a list of object based on DynamicClassInstance class
            </summary>
            <typeparam name="T">A type dervied from DynamicClassInstance</typeparam>
            <param name="dataTable">A datatable that is converted to a List of type DynamicClassInstance</param>
            <param name="creationFunctions">
            A function that is called to create an instance based on DynamicClassInstance.
            
            The first argument is the data row associated with the created instance from the CreateDynamicClass object.
            The second argument is the CreateDynamicClass object.
            The third argument is the instance associated with the data row.
            The function will return an instance based on DynamicClassInstance.
            </param>
            <returns>A list of converted data rows</returns>
        </member>
        <member name="M:Common.DataTableExtensions.ToArray(System.Data.DataTable)">
            <summary>
            Returns the DataTable as an array where the first dimension is the rows and the second is the columns values.
            </summary>
            <param name="dataTable"></param>
            <returns>A 2-dimension Array</returns>
        </member>
        <member name="M:Common.DataTableExtensions.ConvertToDataTable(System.Collections.Generic.IEnumerable{System.Int16},System.String)">
            <summary>
            Converts the source collection to a data table based on the source collection element type&apos;s public properties (not public member variables).
            </summary>        
            <param name="source">the collection that will be converted</param>
            <param name="dataTableName">Optional name. If null the entityType&apos;s data table name is used</param>
            <returns>
            A new datatable based on T&apos;s public properties.
            </returns>
        </member>
        <member name="M:Common.DataTableExtensions.ConvertToDataTable(System.Collections.Generic.IEnumerable{System.Nullable{System.Int16}},System.String)">
            <summary>
            Converts the source collection to a data table based on the source collection element type&apos;s public properties (not public member variables).
            </summary>       
            <param name="source">the collection that will be converted</param>
            <param name="dataTableName">Optional name. If null the entityType&apos;s data table name is used</param>
            <returns>
            A new datatable based on T&apos;s public properties.
            </returns>
        </member>
        <member name="M:Common.DataTableExtensions.ConvertToDataTable(System.Collections.Generic.IEnumerable{System.Int32},System.String)">
            <summary>
            Converts the source collection to a data table based on the source collection element type&apos;s public properties (not public member variables).
            </summary>        
            <param name="source">the collection that will be converted</param>
            <param name="dataTableName">Optional name. If null the entityType&apos;s data table name is used</param>
            <returns>
            A new datatable based on T&apos;s public properties.
            </returns>
        </member>
        <member name="M:Common.DataTableExtensions.ConvertToDataTable(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}},System.String)">
            <summary>
            Converts the source collection to a data table based on the source collection element type&apos;s public properties (not public member variables).
            </summary>       
            <param name="source">the collection that will be converted</param>
            <param name="dataTableName">Optional name. If null the entityType&apos;s data table name is used</param>
            <returns>
            A new datatable based on T&apos;s public properties.
            </returns>
        </member>
        <member name="M:Common.DataTableExtensions.ConvertToDataTable(System.Collections.Generic.IEnumerable{System.Int64},System.String)">
            <summary>
            Converts the source collection to a data table based on the source collection element type&apos;s public properties (not public member variables).
            </summary>        
            <param name="source">the collection that will be converted</param>
            <param name="dataTableName">Optional name. If null the entityType&apos;s data table name is used</param>
            <returns>
            A new datatable based on T&apos;s public properties.
            </returns>
        </member>
        <member name="M:Common.DataTableExtensions.ConvertToDataTable(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}},System.String)">
            <summary>
            Converts the source collection to a data table based on the source collection element type&apos;s public properties (not public member variables).
            </summary>       
            <param name="source">the collection that will be converted</param>
            <param name="dataTableName">Optional name. If null the entityType&apos;s data table name is used</param>
            <returns>
            A new datatable based on T&apos;s public properties.
            </returns>
        </member>
        <member name="M:Common.DataTableExtensions.ConvertToDataTable(System.Collections.Generic.IEnumerable{System.UInt16},System.String)">
            <summary>
            Converts the source collection to a data table based on the source collection element type&apos;s public properties (not public member variables).
            </summary>        
            <param name="source">the collection that will be converted</param>
            <param name="dataTableName">Optional name. If null the entityType&apos;s data table name is used</param>
            <returns>
            A new datatable based on T&apos;s public properties.
            </returns>
        </member>
        <member name="M:Common.DataTableExtensions.ConvertToDataTable(System.Collections.Generic.IEnumerable{System.Nullable{System.UInt16}},System.String)">
            <summary>
            Converts the source collection to a data table based on the source collection element type&apos;s public properties (not public member variables).
            </summary>       
            <param name="source">the collection that will be converted</param>
            <param name="dataTableName">Optional name. If null the entityType&apos;s data table name is used</param>
            <returns>
            A new datatable based on T&apos;s public properties.
            </returns>
        </member>
        <member name="M:Common.DataTableExtensions.ConvertToDataTable(System.Collections.Generic.IEnumerable{System.UInt32},System.String)">
            <summary>
            Converts the source collection to a data table based on the source collection element type&apos;s public properties (not public member variables).
            </summary>        
            <param name="source">the collection that will be converted</param>
            <param name="dataTableName">Optional name. If null the entityType&apos;s data table name is used</param>
            <returns>
            A new datatable based on T&apos;s public properties.
            </returns>
        </member>
        <member name="M:Common.DataTableExtensions.ConvertToDataTable(System.Collections.Generic.IEnumerable{System.Nullable{System.UInt32}},System.String)">
            <summary>
            Converts the source collection to a data table based on the source collection element type&apos;s public properties (not public member variables).
            </summary>       
            <param name="source">the collection that will be converted</param>
            <param name="dataTableName">Optional name. If null the entityType&apos;s data table name is used</param>
            <returns>
            A new datatable based on T&apos;s public properties.
            </returns>
        </member>
        <member name="M:Common.DataTableExtensions.ConvertToDataTable(System.Collections.Generic.IEnumerable{System.UInt64},System.String)">
            <summary>
            Converts the source collection to a data table based on the source collection element type&apos;s public properties (not public member variables).
            </summary>        
            <param name="source">the collection that will be converted</param>
            <param name="dataTableName">Optional name. If null the entityType&apos;s data table name is used</param>
            <returns>
            A new datatable based on T&apos;s public properties.
            </returns>
        </member>
        <member name="M:Common.DataTableExtensions.ConvertToDataTable(System.Collections.Generic.IEnumerable{System.Nullable{System.UInt64}},System.String)">
            <summary>
            Converts the source collection to a data table based on the source collection element type&apos;s public properties (not public member variables).
            </summary>       
            <param name="source">the collection that will be converted</param>
            <param name="dataTableName">Optional name. If null the entityType&apos;s data table name is used</param>
            <returns>
            A new datatable based on T&apos;s public properties.
            </returns>
        </member>
        <member name="M:Common.DataTableExtensions.ConvertToDataTable(System.Collections.Generic.IEnumerable{System.Decimal},System.String)">
            <summary>
            Converts the source collection to a data table based on the source collection element type&apos;s public properties (not public member variables).
            </summary>        
            <param name="source">the collection that will be converted</param>
            <param name="dataTableName">Optional name. If null the entityType&apos;s data table name is used</param>
            <returns>
            A new datatable based on T&apos;s public properties.
            </returns>
        </member>
        <member name="M:Common.DataTableExtensions.ConvertToDataTable(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}},System.String)">
            <summary>
            Converts the source collection to a data table based on the source collection element type&apos;s public properties (not public member variables).
            </summary>       
            <param name="source">the collection that will be converted</param>
            <param name="dataTableName">Optional name. If null the entityType&apos;s data table name is used</param>
            <returns>
            A new datatable based on T&apos;s public properties.
            </returns>
        </member>
        <member name="M:Common.DataTableExtensions.ConvertToDataTable(System.Collections.Generic.IEnumerable{System.Single},System.String)">
            <summary>
            Converts the source collection to a data table based on the source collection element type&apos;s public properties (not public member variables).
            </summary>        
            <param name="source">the collection that will be converted</param>
            <param name="dataTableName">Optional name. If null the entityType&apos;s data table name is used</param>
            <returns>
            A new datatable based on T&apos;s public properties.
            </returns>
        </member>
        <member name="M:Common.DataTableExtensions.ConvertToDataTable(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}},System.String)">
            <summary>
            Converts the source collection to a data table based on the source collection element type&apos;s public properties (not public member variables).
            </summary>       
            <param name="source">the collection that will be converted</param>
            <param name="dataTableName">Optional name. If null the entityType&apos;s data table name is used</param>
            <returns>
            A new datatable based on T&apos;s public properties.
            </returns>
        </member>
        <member name="M:Common.DataTableExtensions.ConvertToDataTable(System.Collections.Generic.IEnumerable{System.Double},System.String)">
            <summary>
            Converts the source collection to a data table based on the source collection element type&apos;s public properties (not public member variables).
            </summary>        
            <param name="source">the collection that will be converted</param>
            <param name="dataTableName">Optional name. If null the entityType&apos;s data table name is used</param>
            <returns>
            A new datatable based on T&apos;s public properties.
            </returns>
        </member>
        <member name="M:Common.DataTableExtensions.ConvertToDataTable(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}},System.String)">
            <summary>
            Converts the source collection to a data table based on the source collection element type&apos;s public properties (not public member variables).
            </summary>       
            <param name="source">the collection that will be converted</param>
            <param name="dataTableName">Optional name. If null the entityType&apos;s data table name is used</param>
            <returns>
            A new datatable based on T&apos;s public properties.
            </returns>
        </member>
        <member name="M:Common.DataTableExtensions.ConvertToDataTable(System.Collections.Generic.IEnumerable{System.DateTime},System.String)">
            <summary>
            Converts the source collection to a data table based on the source collection element type&apos;s public properties (not public member variables).
            </summary>        
            <param name="source">the collection that will be converted</param>
            <param name="dataTableName">Optional name. If null the entityType&apos;s data table name is used</param>
            <returns>
            A new datatable based on T&apos;s public properties.
            </returns>
        </member>
        <member name="M:Common.DataTableExtensions.ConvertToDataTable(System.Collections.Generic.IEnumerable{System.Nullable{System.DateTime}},System.String)">
            <summary>
            Converts the source collection to a data table based on the source collection element type&apos;s public properties (not public member variables).
            </summary>       
            <param name="source">the collection that will be converted</param>
            <param name="dataTableName">Optional name. If null the entityType&apos;s data table name is used</param>
            <returns>
            A new datatable based on T&apos;s public properties.
            </returns>
        </member>
        <member name="M:Common.DataTableExtensions.ConvertToDataTable(System.Collections.Generic.IEnumerable{System.DateTimeOffset},System.String)">
            <summary>
            Converts the source collection to a data table based on the source collection element type&apos;s public properties (not public member variables).
            </summary>        
            <param name="source">the collection that will be converted</param>
            <param name="dataTableName">Optional name. If null the entityType&apos;s data table name is used</param>
            <returns>
            A new datatable based on T&apos;s public properties.
            </returns>
        </member>
        <member name="M:Common.DataTableExtensions.ConvertToDataTable(System.Collections.Generic.IEnumerable{System.Nullable{System.DateTimeOffset}},System.String)">
            <summary>
            Converts the source collection to a data table based on the source collection element type&apos;s public properties (not public member variables).
            </summary>       
            <param name="source">the collection that will be converted</param>
            <param name="dataTableName">Optional name. If null the entityType&apos;s data table name is used</param>
            <returns>
            A new datatable based on T&apos;s public properties.
            </returns>
        </member>
        <member name="M:Common.DataTableExtensions.ConvertToDataTable(System.Collections.Generic.IEnumerable{System.TimeSpan},System.String)">
            <summary>
            Converts the source collection to a data table based on the source collection element type&apos;s public properties (not public member variables).
            </summary>        
            <param name="source">the collection that will be converted</param>
            <param name="dataTableName">Optional name. If null the entityType&apos;s data table name is used</param>
            <returns>
            A new datatable based on T&apos;s public properties.
            </returns>
        </member>
        <member name="M:Common.DataTableExtensions.ConvertToDataTable(System.Collections.Generic.IEnumerable{System.Nullable{System.TimeSpan}},System.String)">
            <summary>
            Converts the source collection to a data table based on the source collection element type&apos;s public properties (not public member variables).
            </summary>       
            <param name="source">the collection that will be converted</param>
            <param name="dataTableName">Optional name. If null the entityType&apos;s data table name is used</param>
            <returns>
            A new datatable based on T&apos;s public properties.
            </returns>
        </member>
        <member name="M:Common.DateTimeHelpers.IsMinOrMaxValue(System.DateTime)">
            <summary>
            Returns true if check date/time is either a DateTime.MinValue or a DateTime.MaxValue.
            </summary>
            <param name="checkDateTime">date/time to be checked</param>
            <returns>true if date/time is a MinValue or a MaxValue, false otherwise</returns>
        </member>
        <member name="M:Common.DateTimeHelpers.IsMinOrMaxValue(System.DateTimeOffset)">
            <summary>
            Returns true if check date/time is either a DateTimeOffset.MinValue or a DateTimeOffset.MaxValue.
            </summary>
            <param name="checkDateTimeOffset">date/time to be checked</param>
            <returns>true if date/time is a MinValue or a MaxValue, false otherwise</returns>
        </member>
        <member name="M:Common.DateTimeHelpers.IsMinOrMaxValue(System.TimeSpan)">
            <summary>
            Returns true if check Time Span is either a TimeSpan.MinValue or a TimeSpan.MaxValue.
            </summary>
            <param name="checkTimeSpan">Time span to be checked</param>
            <returns>true if timespan is a MinValue or a MaxValue, false otherwise</returns>
        </member>
        <member name="M:Common.DateTimeHelpers.ApplyActionIfNotMinOrMaxValue(System.DateTime,System.Func{System.DateTime,System.DateTime})">
            <summary>
            Applies action only if check date/time is NOT a DateTime.MinValue or DateTime.MaxValue.
            </summary>
            <param name="checkDateTime">date/time to check and apply to action</param>
            <param name="actionIfNotMinOrMax">
            An action that will receive the checkDateTime value and return a date/time value.
            </param>
            <returns>
            If check date/time is a MinValue or MaxValue, that value will be returned.
            If check date/time is NOT a MinValue or MaxValue, action is called where the argument is the check date/time and a date/time value should be returned.
            </returns>
        </member>
        <member name="M:Common.DateTimeHelpers.ApplyActionIfMinOrMaxValue(System.DateTime,System.Func{System.DateTime,System.DateTime},System.Func{System.DateTime,System.DateTime})">
             <summary>
             Applies action depending on if checkDateTime is a Min or Max value.
             </summary>
             <param name="checkDateTime">date/time used to determine which action is called</param>
             <param name="actionIfMinOrMaxValue">
             Called when checkDateTime is a DateTime Min or Max Value.
             
             Must return a DateTime object that is returned from this method.
             </param>
             <param name="actionIfNotMinOrMax">
             Called when checkDateTime is NOT a DateTime Min or Max Value.
            
             Must return a DateTime object that is returned from this method.
             </param>
             <returns>
             Returns the DateTime object returned from the action.
             </returns>
        </member>
        <member name="M:Common.DateTimeHelpers.ApplyActionIfNotMinOrMaxValue(System.DateTimeOffset,System.Func{System.DateTimeOffset,System.DateTimeOffset})">
            <summary>
            Applies action only if check date/time is NOT a DateTimeOffset.MinValue or DateTimeOffset.MaxValue.
            </summary>
            <param name="checkDateTimeOffset">date/time to check and apply to action</param>
            <param name="actionIfNotMinOrMax">
            An action that will receive the checkDateTimeOffset value and return a date/time value.
            </param>
            <returns>
            If check date/time is a MinValue or MaxValue, that value will be returned.
            If check date/time is NOT a MinValue or MaxValue, action is called where the argument is the check date/time and a date/time value should be returned.
            </returns>
        </member>
        <member name="M:Common.DateTimeHelpers.ApplyActionIfMinOrMaxValue(System.DateTimeOffset,System.Func{System.DateTimeOffset,System.DateTimeOffset},System.Func{System.DateTimeOffset,System.DateTimeOffset})">
             <summary>
             Applies action depending on if checkDateTimeOffset is a Min or Max value.
             </summary>
             <param name="checkDateTimeOffset">date/time used to determine which action is called</param>
             <param name="actionIfMinOrMaxValue">
             Called when checkDateTimeOffset is a DateTimeOffset Min or Max Value.
             
             Must return a DateTimeOffset object that is returned from this method.
             </param>
             <param name="actionIfNotMinOrMax">
             Called when checkDateTimeOffset is NOT a DateTimeOffset Min or Max Value.
            
             Must return a DateTimeOffset object that is returned from this method.
             </param>
             <returns>
             Returns the DateTimeOffset object returned from the action.
             </returns>
        </member>
        <member name="M:Common.DateTimeHelpers.ApplyActionIfNotMinOrMaxValue(System.TimeSpan,System.Func{System.TimeSpan,System.TimeSpan})">
            <summary>
            Applies action only if check timespan is NOT a TimeSpan.MinValue or TimeSpan.MaxValue.
            </summary>
            <param name="checkTimeSpan">Timespan to check and apply to action</param>
            <param name="actionIfNotMinOrMax">
            An action that will receive the checkTimeSpan value and return a TimeSpan value.
            </param>
            <returns>
            If check TimeSpan is a MinValue or MaxValue, that value will be returned.
            If check TimeSpan is NOT a MinValue or MaxValue, action is called where the argument is the check TimeSpan and a TimeSpan value should be returned.
            </returns>
        </member>
        <member name="M:Common.DateTimeHelpers.ApplyActionIfMinOrMaxValue(System.TimeSpan,System.Func{System.TimeSpan,System.TimeSpan},System.Func{System.TimeSpan,System.TimeSpan})">
             <summary>
             Applies action depending on if checkTimeSpan is a Min or Max value.
             </summary>
             <param name="checkTimeSpan">TimeSpan used to determine which action is called</param>
             <param name="actionIfMinOrMaxValue">
             Called when checkTimeSpan is a TimeSpan Min or Max Value.
             
             Must return a TimeSpan object that is returned from this method.
             </param>
             <param name="actionIfNotMinOrMax">
             Called when checkTimeSpan is NOT a TimeSpan Min or Max Value.
            
             Must return a TimeSpan object that is returned from this method.
             </param>
             <returns>
             Returns the TimeSpan object returned from the action.
             </returns>
        </member>
        <member name="M:Common.DateTimeHelpers.ValidValue(System.DateTime,System.DateTime)">
            <summary>
            If value A is NOT a Max/Min that value will be returned. 
            If value A is a Max/Min, value B is check and if NOT that value is returned.
            If value B is a Max/Min, value A is returned.
            </summary>
            <param name="dateTimeA">Value to Check</param>
            <param name="dateTimeB">Value to Check</param>
            <returns>
            Returns either A or B depending on which value is NOT the Max/Min. If both values are Max/Min value A is returned.
            </returns>
        </member>
        <member name="M:Common.DateTimeHelpers.ValidValue(System.DateTimeOffset,System.DateTimeOffset)">
            <summary>
            If value A is NOT a Max/Min that value will be returned. 
            If value A is a Max/Min, value B is check and if NOT that value is returned.
            If value B is a Max/Min, value A is returned.
            </summary>
            <param name="dateTimeA">Value to Check</param>
            <param name="dateTimeB">Value to Check</param>
            <returns>
            Returns either A or B depending on which value is NOT the Max/Min. If both values are Max/Min value A is returned.
            </returns>
        </member>
        <member name="M:Common.DateTimeHelpers.ValidValue(System.TimeSpan,System.TimeSpan)">
            <summary>
            If value A is NOT a Max/Min that value will be returned. 
            If value A is a Max/Min, value B is check and if NOT that value is returned.
            If value B is a Max/Min, value A is returned.
            </summary>
            <param name="timespanA">Value to Check</param>
            <param name="timespanB">Value to Check</param>
            <returns>
            Returns either A or B depending on which value is NOT the Max/Min. If both values are Max/Min value A is returned.
            </returns>
        </member>
        <member name="M:Common.DateTimeHelpers.RemoveSeconds(System.DateTime)">
            <summary>
            Removes Seconds and MilliSeconds from the given dateTime parameter.				
            </summary>
            <returns>Returns a new DateTime with the Seconds/Milliseconds removed</returns>
        </member>
        <member name="M:Common.DateTimeHelpers.RemoveMinutes(System.DateTime)">
            <summary>
            Removes Minutes from the given dateTime parameter.				
            </summary>
            <returns>Returns a new DateTime with the Minutes removed</returns>
        </member>
        <member name="M:Common.DateTimeHelpers.RemoveHours(System.DateTime)">
            <summary>
            Removes Hours from the given dateTime parameter.				
            </summary>
            <returns>Returns a new DateTime with the Hours removed</returns>
        </member>
        <member name="M:Common.DateTimeHelpers.RemoveSeconds(System.DateTimeOffset)">
            <summary>
            Removes Seconds and MilliSeconds from the given dateTimeOffset parameter.				
            </summary>
            <returns>Returns a new DateTime with the Seconds/Milliseconds removed</returns>
        </member>
        <member name="M:Common.DateTimeHelpers.RemoveMinutes(System.DateTimeOffset)">
            <summary>
            Removes Minutes from the given dateTimeOffset parameter.				
            </summary>
            <returns>Returns a new DateTime with the Minutes removed</returns>
        </member>
        <member name="M:Common.DateTimeHelpers.RemoveHours(System.DateTimeOffset)">
            <summary>
            Removes Hours from the given dateTimeOffset parameter.				
            </summary>
            <returns>Returns a new DateTime with the Hours removed</returns>
        </member>
        <member name="M:Common.DateTimeHelpers.RemoveSeconds(System.TimeSpan)">
            <summary>
            Removes Seconds and MilliSeconds from the given time parameter.				
            </summary>
            <returns>Returns a new TimeSpan with the Seconds/Milliseconds removed</returns>
        </member>
        <member name="M:Common.DateTimeHelpers.RemoveMinutes(System.TimeSpan)">
            <summary>
            Removes Minutes from the given time parameter.				
            </summary>
            <returns>Returns a new TimeSpan with the Minutes removed</returns>
        </member>
        <member name="M:Common.DateTimeHelpers.RemoveHours(System.TimeSpan)">
            <summary>
            Removes Hours from the given time parameter.				
            </summary>
            <returns>Returns a new TimeSpan with the Hours removed</returns>
        </member>
        <member name="M:Common.DateTimeHelpers.ConvertFromMinsToMilliSeconds(System.UInt16)">
            <summary>
            Returns the number of milliseconds based on the number of minutes given.
            </summary>
            <param name="nbrMins">Number of Minutes that will be converted to milliseconds</param>
            <returns>Number of Milliseconds</returns>
        </member>
        <member name="M:Common.DateTimeHelpers.ConvertFromMilliSecondsToMins(System.Double)">
            <summary>
            Returns the number of minutes based on the number of milliseconds given.
            </summary>
            <param name="milliSeconds">Number of milliseconds to be converted to minutes</param>
            <returns>Number of minutes</returns>
        </member>
        <member name="M:Common.DateTimeHelpers.TimeOnly(System.DateTime)">
            <summary>
            Returns the Time portion of a Date/Time object. Uses the System.DateTime TimeOfDay property.
            </summary>		
            <returns>A Time Span of the Time portion of a Date/Time object.</returns>
        </member>
        <member name="M:Common.DateTimeHelpers.DateOnly(System.DateTime)">
            <summary>
            Returns the Date portion of a Date/Time object. Uses the System.DateTime Date property.
            </summary>
            <returns>DateTime object with only the Date portion of the given argument</returns>
        </member>
        <member name="M:Common.DateTimeHelpers.NewDateTime(System.TimeSpan,System.DateTimeKind)">
            <summary>
            Creates a New DateTime object based only on the TimeSpan object.
            </summary>
            <returns>Returns a DateTime object based on the number of ticks from the TimeSpan</returns>
        </member>
        <member name="M:Common.DateTimeHelpers.NewTimeSpan(System.DateTime)">
            <summary>
            Creates a New TimeSpan object based only on the DateTime object.
            </summary>
            <returns>Returns a TimeSpan object based on the number of ticks from the DateTime</returns>
        </member>
        <member name="M:Common.DateTimeHelpers.Combine(System.DateTime,System.TimeSpan)">
            <summary>
            Combines the Date portion of the dateOnly argument and the newTime argument.
            </summary>
            <param name="dateOnly">Uses the date portion only (time is ignored)</param>
            <param name="newTime">Time that will be used to combine with the date</param>
            <returns>A new DateTime that is a combination of the date and time</returns>
        </member>
        <member name="M:Common.DateTimeHelpers.CombineToOffset(System.DateTime,System.TimeSpan,System.TimeSpan)">
            <summary>
            Combines the Date portion of the dateOnly argument and the newTime argument.
            </summary>
            <param name="dateOnly">Uses the date portion only (time is ignored)</param>
            <param name="newTime">ime that will be used to combine with the date</param>
            <param name="timezoneOFfSet">The Timezone Offset</param>
            <returns>A new DateTimeOffset based on the date, time, and Timezone offset</returns>
        </member>
        <member name="M:Common.DateTimeHelpers.CombineToOffset(System.DateTime,System.TimeSpan,System.Int32)">
            <summary>
            Combines the Date portion of the dateOnly argument and the newTime argument.
            </summary>
            <param name="dateOnly">Uses the date portion only (time is ignored)</param>
            <param name="newTime">ime that will be used to combine with the date</param>
            <param name="timezoneOFfSetInHours">The Timezone Offset in hours</param>
            <returns>A new DateTimeOffset based on the date, time, and Timezone offset</returns>
        </member>
        <member name="M:Common.DateTimeHelpers.Combine(System.DateTime,System.TimeSpan,System.TimeSpan)">
            <summary>
            Combines the Date portion of the dateOnly argument and the newTime argument. If newTime is greater than timeCheck, one day is subtracted from the date.
            </summary>
            <param name="dateOnly">Uses the date portion only (time is ignored)</param>
            <param name="newTime">Time that will be used to combine with the date</param>
            <param name="timeCheck">The check time used to determine if the date used is the given date or the prior day</param>
            <returns>A new DateTime that is a combination of the date and time</returns>
            <example>
            This method can be used to adjust for spanned dates.
            
            For example the dateOnly is '2012-02-04 11:46:32', newTime is '19:30:00', and timeCheck is '8:30:00'.
            In this example the result is '2012-02-03 19:30:00'
            
            For example the dateOnly is '2012-02-04 11:46:32', newTime is '8:30:00', and timeCheck is '16:30:00'.
            In this example the result is '2012-02-04 8:30:00'
            </example>
        </member>
        <member name="M:Common.DateTimeHelpers.RoundUp(System.DateTime,System.TimeSpan)">
            <summary>
            This method will always round up the given date/time based on the given time span. 
            </summary>
            <example>
            roundUpDateTime is '2012-02-04 9:08:10' and roundUpToTimeInterval is 30 mins; the result is '2012-02-04 9:30:00'
            roundUpDateTime is '2012-02-04 9:08:10' and roundUpToTimeInterval is 15 mins; the result is '2012-02-04 9:15:00'
            roundUpDateTime is '2012-02-04 9:08:10' and roundUpToTimeInterval is 10 mins; the result is '2012-02-04 9:10:00'
            roundUpDateTime is '2012-02-04 9:08:10' and roundUpToTimeInterval is 5 mins; the result is '2012-02-04 9:10:00'
            roundUpDateTime is '2012-02-04 9:08:10' and roundUpToTimeInterval is 45 mins; the result is '2012-02-04 9:45:00'
            roundUpDateTime is '2012-02-04 9:46:10' and roundUpToTimeInterval is 45 mins; the result is '2012-02-04 10:30:00'
            roundUpDateTime is '2012-02-04 9:46:10' and roundUpToTimeInterval is 30 mins; the result is '2012-02-04 10:00:00'
            roundUpDateTime is '2012-02-04 9:46:10' and roundUpToTimeInterval is 10 mins; the result is '2012-02-04 10:50:00'
            roundUpDateTime is '2012-02-04 9:46:10' and roundUpToTimeInterval is 5 mins; the result is '2012-02-04 10:50:00'
            </example>
            <exception cref="T:System.ArgumentOutOfRangeException">If roundUpToTimeInterval is less than or equal to zero an ArgumentOutOfRangeException is thrown.</exception>
            <param name="roundUpDateTime">The Date/Time that will be rounded up</param>
            <param name="roundUpToTimeInterval">The time interval that will be used to round up the roundUpDateTime value</param>
            <returns>A new Date/Time that represents the rounded up value of the given arguments</returns>
        </member>
        <member name="M:Common.DateTimeHelpers.RoundUp(System.DateTimeOffset,System.TimeSpan)">
            <see cref="M:Common.DateTimeHelpers.RoundUp(System.DateTimeOffset,System.TimeSpan)"/>        
        </member>
        <member name="T:Common.DateTimeHelpers.RoundToType">
            <summary>
            An Enumerator used to determine how time is rounded.
            </summary>
        </member>
        <member name="M:Common.DateTimeHelpers.Round(System.DateTime,Common.DateTimeHelpers.RoundToType)">
            <summary>
            Rounds the given date/time up or down based on the RoundToType enumerator.
            </summary>
            <param name="roundDateTime">The date/time that will be rounded up or down</param>
            <param name="roundToType">Rounding Type</param>
            <returns>A new date/time that is rounded</returns>
        </member>
        <member name="M:Common.DateTimeHelpers.Round(System.DateTimeOffset,Common.DateTimeHelpers.RoundToType)">
            <see cref="M:Common.DateTimeHelpers.Round(System.DateTime,Common.DateTimeHelpers.RoundToType)"/>     
        </member>
        <member name="M:Common.DateTimeHelpers.Round(System.DateTime,System.TimeSpan)">
            <summary>
            Rounds the give date/time up or down based on a time interval
            </summary>
            <example>
            roundDateTime is '2012-02-04 8:34:10' and roundTimeInterval is 30 mins; the result is '2012-02-04 8:30:00'
            roundDateTime is '2012-02-04 8:34:10' and roundTimeInterval is 15 mins; the result is '2012-02-04 8:30:00'
            roundDateTime is '2012-02-04 8:34:10' and roundTimeInterval is 5 mins; the result is '2012-02-04 8:35:00'
            roundDateTime is '2012-02-04 8:34:10' and roundTimeInterval is 1 mins; the result is '2012-02-04 8:34:00'
            roundDateTime is '2012-02-04 8:34:35' and roundTimeInterval is 1 min; the result is '2012-02-04 8:35:00'
            roundDateTime is '2012-02-04 8:34:10' and roundTimeInterval is 30 secs; the result is '2012-02-04 8:34:00'
            roundDateTime is '2012-02-04 8:34:35' and roundTimeInterval is 30 secs; the result is '2012-02-04 8:34:30'
            roundDateTime is '2012-02-04 8:34:46' and roundTimeInterval is 30 secs; the result is '2012-02-04 8:35:00'
            </example>
            <param name="roundDateTime">Date/time that will be rounded</param>
            <param name="roundTimeInterval">A time span that is used to determine how the date/time is rounded</param>
            <returns>A new DateTime object that is rounded</returns>
            <remarks>This uses the Middle Point Rounding Style of ToEven</remarks>
        </member>
        <member name="M:Common.DateTimeHelpers.Round(System.DateTimeOffset,System.TimeSpan)">
            <see cref="M:Common.DateTimeHelpers.Round(System.DateTime,System.TimeSpan)"/> 
        </member>
        <member name="M:Common.DateTimeHelpers.Round(System.DateTime,System.TimeSpan,System.MidpointRounding)">
            <summary>
            Rounds the give date/time up or down based on a time interval
            </summary>
            <example>
            roundDateTime is '2012-02-04 8:34:10', roundTimeInterval is 30 mins, and roundingStyle is ToEven; the result is '2012-02-04 8:30:00'
            roundDateTime is '2012-02-04 8:34:10', roundTimeInterval is 15 mins, and roundingStyle is ToEven; the result is '2012-02-04 8:30:00'
            roundDateTime is '2012-02-04 8:34:10', roundTimeInterval is 5 mins, and roundingStyle is ToEven; the result is '2012-02-04 8:35:00'
            roundDateTime is '2012-02-04 8:34:10', roundTimeInterval is 1 min, and roundingStyle is ToEven; the result is '2012-02-04 8:34:00'
            roundDateTime is '2012-02-04 8:34:35', roundTimeInterval is 1 min, and roundingStyle is ToEven; the result is '2012-02-04 8:35:00'
            roundDateTime is '2012-02-04 8:34:10', roundTimeInterval is 30 secs, and roundingStyle is ToEven; the result is '2012-02-04 8:34:00'
            roundDateTime is '2012-02-04 8:34:35', roundTimeInterval is 30 secs, and roundingStyle is ToEven; the result is '2012-02-04 8:34:30'
            roundDateTime is '2012-02-04 8:34:46', roundTimeInterval is 30 secs, and roundingStyle is ToEven; the result is '2012-02-04 8:35:00'
            roundDateTime is '2012-02-04 8:34:30', roundTimeInterval is 1 min, and roundingStyle is ToEven; the result is '2012-02-04 8:34:00'
            roundDateTime is '2012-02-04 8:34:30', roundTimeInterval is 1 min, and roundingStyle is AwayFromZero; the result is '2012-02-04 8:35:00'
            </example>
            <param name="roundDateTime">Date/time that will be rounded</param>
            <param name="roundTimeInterval">A time span that is used to determine how the date/time is rounded</param>
            <param name="roundingStyle">Middle Point Rounding Style</param>
            <returns>A new DateTime object that is rounded</returns>
        </member>
        <member name="M:Common.DateTimeHelpers.Round(System.DateTimeOffset,System.TimeSpan,System.MidpointRounding)">
            <see cref="M:Common.DateTimeHelpers.Round(System.DateTime,System.TimeSpan,System.MidpointRounding)"/> 
        </member>
        <member name="M:Common.DateTimeHelpers.Convert(System.DateTime,System.String)">
            <summary>
            Returns a converted date time from the local timezone to the new time zone
            </summary>
            <param name="convertDateTime">Date/Time that will be Converted</param>
            <param name="toTimeZone">The Time Zone to convert to</param>
            <returns>A new Date/Time based on the given time zone</returns>
            <exception cref="T:System.TimeZoneNotFoundException">The exception that is thrown when a time zone cannot be found.</exception>
            <exception cref="T:System.InvalidTimeZoneException">The exception that is thrown when time zone information is invalid.</exception>
        </member>
        <member name="M:Common.DateTimeHelpers.Convert(System.DateTime,System.TimeZoneInfo)">
            <see cref="M:Common.DateTimeHelpers.Convert(System.DateTime,System.String)"/>
        </member>
        <member name="M:Common.DateTimeHelpers.Convert(System.DateTime,System.String,System.String)">
            <summary>
            Returns a converted date time from the source (from) time zone to the target (new) time zone
            </summary>
            <param name="convertDateTime">Date/Time that will be Converted</param>
            <param name="fromTimeZone">The Time Zone that the given Date/Time is in</param>
            <param name="toTimeZone">The Time Zone to convert to</param>
            <returns>A new Date/Time converted to the new time zone</returns>
            <exception cref="T:System.TimeZoneNotFoundException">The exception that is thrown when a time zone cannot be found.</exception>
            <exception cref="T:System.InvalidTimeZoneException">The exception that is thrown when time zone information is invalid.</exception>
        </member>
        <member name="M:Common.DateTimeHelpers.Convert(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)">
            <see cref="M:Common.DateTimeHelpers.Convert(System.DateTime,System.String,System.String)"/>
        </member>
        <member name="M:Common.DateTimeHelpers.Convert(System.DateTime,System.Int32,System.DateTimeKind)">
            <summary>
            Returns a converted date time based on the given time zone offset.
            </summary>
            <param name="convertDateTime">Date/Time that will be Converted</param>       
            <param name="toTimeZoneOffSet">The Time Zone offset</param>
            <param name="dateTimeKind"></param>
            <returns>A new Date/Time converted to the offset</returns>
            <remarks>
            Warning: This conversion does NOT that into account Day Light Savings Time/Standard time conversions!
            </remarks>
        </member>
        <member name="M:Common.DateTimeHelpers.Convert(System.DateTime,System.Int32,System.Int32,System.DateTimeKind)">
            <summary>
            Returns a converted date time based on the given time zone offset.
            </summary>
            <param name="convertDateTime">Date/Time that will be Converted</param>
            <param name="fromTimeZoneOffset">The time zone offset of the given date/time</param>
            <param name="toTimeZoneOffSet">The Time Zone offset to the new time zone</param>
            <param name="dateTimeKind"></param>
            <returns>A new Date/Time converted to the new offset</returns>
            <remarks>        
            Warning: This conversion does NOT that into account Day Light Savings Time/Standard time conversions!
            </remarks>
        </member>
        <member name="M:Common.DateTimeHelpers.Convert(System.DateTime,System.TimeSpan,System.DateTimeKind)">
            <summary>
            Returns a converted date time based on the local time to the given time zone offset.
            </summary>
            <param name="convertDateTime">Date/Time that will be Converted</param>       
            <param name="toTimeZoneOffSet">The Time Zone offset to the new time zone</param>
            <param name="dateTimeKind"></param>
            <returns>A new Date/Time converted to the new offset</returns>
            <remarks>        
            Warning: This conversion does NOT that into account Day Light Savings Time/Standard time conversions!
            </remarks>
        </member>
        <member name="M:Common.DateTimeHelpers.Convert(System.DateTime,System.TimeSpan,System.TimeSpan,System.DateTimeKind)">
            <summary>
            Returns a converted date time based on the given time zone offset.
            </summary>
            <param name="convertDateTime">Date/Time that will be Converted</param>
            <param name="fromOffSet">The time zone offset of the given date/time</param>
            <param name="toOffSet">The Time Zone offset to the new time zone</param>
            <param name="dateTimeKind"></param>
            <returns>A new Date/Time converted to the new offset</returns>
            <remarks>        
            Warning: This conversion does NOT that into account Day Light Savings Time/Standard time conversions!
            </remarks>
        </member>
        <member name="M:Common.DateTimeHelpers.Convert(System.DateTimeOffset,System.String)">
            <summary>
            Returns a converted date time offset to the target (new) time zone
            </summary>
            <param name="convertDateTimeOffSet">Date/Time Offset that will be Converted</param>        
            <param name="toTimeZone">The Time Zone to convert to</param>
            <returns>A new Date/Time Offset converted to the new time zone</returns>
            <exception cref="T:System.TimeZoneNotFoundException">The exception that is thrown when a time zone cannot be found.</exception>
            <exception cref="T:System.InvalidTimeZoneException">The exception that is thrown when time zone information is invalid.</exception>
        </member>
        <member name="M:Common.DateTimeHelpers.Convert(System.DateTimeOffset,System.TimeZoneInfo)">
            <see cref="M:Common.DateTimeHelpers.Convert(System.DateTimeOffset,System.String)"/>
        </member>
        <member name="M:Common.DateTimeHelpers.ConvertToOffSet(System.DateTime)">
            <summary>
            Returns a Date/Time using the local time zone or UTC depending on the KindOf property to a new Date/Time Offset
            </summary>
            <param name="convertDateTime">The Date/Time instance that will be converted</param>               
            <returns>A new Date/Time Offset based on the local timezone or UTC</returns>       
        </member>
        <member name="M:Common.DateTimeHelpers.ConvertToOffSet(System.DateTime,System.String)">
            <summary>
            Returns a Date/Time Offset converted to the new Time Zone based on the given convertDateTime depending on the KindOf property.
            </summary>
            <param name="convertDateTime">Date/Time that will be Converted</param>        
            <param name="toTimeZone">The Time Zone to convert to</param>
            <returns>A new Date/Time Offset based on the new TimeZone</returns>
            <exception cref="T:System.TimeZoneNotFoundException">The exception that is thrown when a time zone cannot be found.</exception>
            <exception cref="T:System.InvalidTimeZoneException">The exception that is thrown when time zone information is invalid.</exception>
        </member>
        <member name="M:Common.DateTimeHelpers.ConvertToOffSet(System.DateTime,System.TimeZoneInfo)">
            <see cref="M:Common.DateTimeHelpers.ConvertToOffSet(System.DateTime,System.String)"/>
        </member>
        <member name="M:Common.DateTimeHelpers.ConvertToOffSet(System.DateTime,System.String,System.String)">
            <summary>
            Returns a Date/Time Offset converted to the new Time Zone based on the given Source TimeZone Date/Time value.
            </summary>
            <param name="convertDateTime">Date/Time that will be Converted</param>
            <param name="fromTimeZone">Time Zone of the given Date/Time value</param>
            <param name="toTimeZone">The Time Zone to convert to</param>
            <returns>A new Date/Time Offset based on the new TimeZone</returns>
            <exception cref="T:System.TimeZoneNotFoundException">The exception that is thrown when a time zone cannot be found.</exception>
            <exception cref="T:System.InvalidTimeZoneException">The exception that is thrown when time zone information is invalid.</exception>
        </member>
        <member name="M:Common.DateTimeHelpers.ConvertToOffSet(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)">
            <see cref="M:Common.DateTimeHelpers.ConvertToOffSet(System.DateTime,System.String,System.String)"/>
        </member>
        <member name="M:Common.DateTimeHelpers.IsValidClockTime(System.TimeSpan)">
            <summary>
            Validates the TimeSpan to ensure it falls within normal clock (time) hours (0 greater-equal checkTime less 24 hours)
            </summary>
            <param name="checkTimeSpanForProperClockHours">The TimeSpan instance to validate</param>
            <returns>True to indicate that the TimeSpan is a valid clock time</returns>
        </member>
        <member name="M:Common.DateTimeHelpers.IsWithInSession(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Determines if the checkTime is withing the start and end Session parameters. 
            
            Note that this function can detect Session Day Spanning (e.g., The start time occurs at night and the end time occurs in the morning).
            </summary>
            <param name="checkTime">Time to check</param>
            <param name="startTime">The starting time within the session (inclusive)</param>
            <param name="endTime">The ending time within the session (inclusive)</param>
            <returns>True to indicate that the checkTime is within the session.</returns>
            <remarks>
            This does not check any of the parameters to determine if they have valid clock time values (0 greater-equal checkTime less 24 hours) To determine if the values are valid use the IsValidClockTime function.
            
            Session length cannot exceed 24 hours!
            </remarks>
        </member>
        <member name="M:Common.DateTimeHelpers.IsWithInSession(System.TimeSpan,System.DayOfWeek,System.TimeSpan,System.DayOfWeek,System.TimeSpan,System.DayOfWeek)">
            <summary>
            Determines if the checkTime is withing the start and end Session parameters. 
            
            Note that this function can detect Session Day Spanning (e.g., The start time occurs at night and the end time occurs in the morning).
            </summary>
            <param name="checkTime">Time to check</param>
            <param name="checkDOW">The Day of the Week associated with the time to check</param>
            <param name="startTime">The starting time within the session (inclusive)</param>
            <param name="startDOW">The Starting Day of the week used for this session (inclusive)</param>
            <param name="endTime">The ending time within the session (inclusive)</param>
            <param name="endDOW">The Ending Day of the week used for this session (inclusive)</param>
            <returns>True to indicate that the checkTime is within the session.</returns>
            <remarks>
            This does not check any of the parameters to determine if they have valid clock time values (0 greater-equal checkTime less 24 hours) To determine if the values are valid use the IsValidClockTime function.
            
            Session length cannot exceed 24 hours!
            </remarks>
            <example>
                Session is from Sunday at 10 PM to Tuesday ending at 6 AM. Check to determine if 1 AM on a Monday is within the session:
                
                    DateTime.IsWithInSession(new TimeSpan(1, 0 , 0),
                                                System.DayOfWeek.Monday,
                                                new TimeSpan(22, 0 , 0),
                                                System.DayOfWeek.Sunday,
                                                new TimeSpan(6, 0 , 0),
                                                System.DayOfWeek.Tuesday)
                                                
                    This should return true!
                    
                Same Session information as above but determine if 9 PM on a Sunday is within the session:
                
                    DateTime.IsWithInSession(new TimeSpan(21, 0 , 0),
                                                System.DayOfWeek.Sunday,
                                                new TimeSpan(22, 0 , 0),
                                                System.DayOfWeek.Sunday,
                                                new TimeSpan(6, 0 , 0),
                                                System.DayOfWeek.Tuesday)
                                                
                    This should return false!
                    
                Same Session information as above but determine if 6 AM on a Tuesday is within the session:
                
                    DateTime.IsWithInSession(new TimeSpan(6, 0 , 0),
                                                System.DayOfWeek.Tuesday,
                                                new TimeSpan(22, 0 , 0),
                                                System.DayOfWeek.Sunday,
                                                new TimeSpan(6, 0 , 0),
                                                System.DayOfWeek.Tuesday)
                                                
                    This should return true!
                    
                Same Session information as above but determine if 6 AM on a Wednesday is within the session:
                
                    DateTime.IsWithInSession(new TimeSpan(6, 0 , 0),
                                                System.DayOfWeek.Wednesday,
                                                new TimeSpan(22, 0 , 0),
                                                System.DayOfWeek.Sunday,
                                                new TimeSpan(6, 0 , 0),
                                                System.DayOfWeek.Tuesday)
                                                
                    This should return false!
            
            </example>
        </member>
        <member name="M:Common.DateTimeHelpers.IsWithInSession(System.DateTime,System.TimeSpan,System.DayOfWeek,System.TimeSpan,System.DayOfWeek)">
            <see cref="M:Common.DateTimeHelpers.IsWithInSession(System.TimeSpan,System.DayOfWeek,System.TimeSpan,System.DayOfWeek,System.TimeSpan,System.DayOfWeek)"/>
        </member>
        <member name="M:Common.DateTimeHelpers.IsWithInSession(System.DateTimeOffset,System.TimeSpan,System.DayOfWeek,System.TimeSpan,System.DayOfWeek)">
            <see cref="M:Common.DateTimeHelpers.IsWithInSession(System.TimeSpan,System.DayOfWeek,System.TimeSpan,System.DayOfWeek,System.TimeSpan,System.DayOfWeek)"/>
        </member>
        <member name="M:Common.DateTimeHelpers.IsWithInSession(System.DateTime,System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Determines if the checkTime is withing the start and end Session DateTime if useStartEndDateTimeForCheck is true (default). 
                    
            If useStartEndDateTimeForCheck is false, the startDateTime's and endDateTime's Day Of Week and Time is used to check the checkDateTime's time only.
            </summary>
            <param name="checkDateTime">The Date and/or Time to be checked</param>
            <param name="startDateTime">The Start Date and/or time to used for check</param>
            <param name="endDateTime">The End Date and/or time to used for check</param>
            <param name="useStartEndDateTimeForCheck">
            True to check the date and time based on the given Start/End Date and Time.
            False to do check based on the Day of Week and Time values only.
            </param>
            <returns>True to indicate that the checkTime is within the session.</returns>        
            
            <see cref="M:Common.DateTimeHelpers.IsWithInSession(System.TimeSpan,System.DayOfWeek,System.TimeSpan,System.DayOfWeek,System.TimeSpan,System.DayOfWeek)"/>        
        </member>
        <member name="M:Common.DateTimeHelpers.IsWithInSession(System.DateTimeOffset,System.DateTimeOffset,System.DateTimeOffset,System.Boolean)">
            <see cref="M:Common.DateTimeHelpers.IsWithInSession(System.DateTime,System.DateTime,System.DateTime,System.Boolean)"/>         
        </member>
        <member name="M:Common.DateTimeHelpers.IsWithInSession(System.TimeSpan,System.DayOfWeek,System.DateTime,System.DateTime)">
            <see cref="M:Common.DateTimeHelpers.IsWithInSession(System.TimeSpan,System.DayOfWeek,System.TimeSpan,System.DayOfWeek,System.TimeSpan,System.DayOfWeek)"/>
        </member>
        <member name="M:Common.DateTimeHelpers.CreateSessionParameters(System.DateTime,System.TimeSpan,System.DayOfWeek,System.TimeSpan,System.DayOfWeek,System.DateTime@,System.DateTime@,System.Boolean,System.Boolean)">
            <summary>
            Creates the Session Start Date/Time and End Date/Time based on the baseDate Argument.
            </summary>
            <param name="baseDate">The Date (and time if checkBaseTime and/or useBaseTimeToDetermineSessionSpan are true) used as the reference date/time for the Session Start/End</param>
            <param name="startTime">The Starting Time of the Session</param>
            <param name="startDOW">The Starting Day of the Week of the Session</param>
            <param name="endTime">The Ending Time of the Session</param>
            <param name="endDOW">The Day of the Week of the Ending Time</param>
            <param name="startDateTime">Returns the Session's Start Date/Time</param>
            <param name="endDateTime">Returns the Session's End Date/Time</param>
            <param name="checkBaseTime">If true (default is false), the baseDate and its' time are checked to determine if the given date/time is valid for this session</param>
            <param name="useBaseTimeToDetermineSessionSpan">\
            If true (default is false), and if the baseDate is NOT on the Session's Start or End Day of the week, the baseDate's time is used to determine the proper Session Start/End date.
            
            Note that this argument only applies when the session spans a day (e.g., 9 PM to 4 AM session).
            </param>
            <returns>
            Returns true to indicate that the Session's Start/End Date/Time were created. If false the Session's Start Date/Time is set to DateTime.MinValue and the End Date/Time is set to DateTime.MaxValue.
            </returns>
            <remarks>
            False can be returned when the baseDate does not fall within the Session's Start/End DOW or when checkBaseTime is true but the check fails.
            </remarks>
            <example>
            
            Session is defined as Monday to Friday from 9 AM to 5 PM and the base Date is 11/8/2012 (Thur).
            
                DateTimeHelpers.CreateSessionParameters(new DateTime(2012, 11, 8),
                                                            new TimeSpan(9, 0, 0),
                                                            DayOfWeek.Monday,
                                                            new TimeSpan(17, 0, 0),
                                                            DayOfWeek.Friday,
                                                            out sessionStartDateTime,
                                                            out sessionEndDateTime,
                                                            false,
                                                            false);
                                                            
                Returned Values:
                    Returned: true
                    sessionStartDateTime:   11/8/2012 9 AM
                    sessionEndDateTime:     11/8/2012 5 PM
            
            Same session Info as above except base date is 11/8/2012 1 AM (Thur).
            
                DateTimeHelpers.CreateSessionParameters(new DateTime(2012, 11, 8, 1, 0, 0),
                                                            new TimeSpan(9, 0, 0),
                                                            DayOfWeek.Monday,
                                                            new TimeSpan(17, 0, 0),
                                                            DayOfWeek.Friday,
                                                            out sessionStartDateTime,
                                                            out sessionEndDateTime,
                                                            false,
                                                            false);
                                                            
                Returned Values:
                    Returned: true
                    sessionStartDateTime:   11/8/2012 9 AM
                    sessionEndDateTime:     11/8/2012 5 PM
                    
            Same session Info as above except base date is 11/8/2012 1 AM (Thur) and checkBaseTime is true.
            
                DateTimeHelpers.CreateSessionParameters(new DateTime(2012, 11, 8, 1, 0, 0),
                                                            new TimeSpan(9, 0, 0),
                                                            DayOfWeek.Monday,
                                                            new TimeSpan(17, 0, 0),
                                                            DayOfWeek.Friday,
                                                            out sessionStartDateTime,
                                                            out sessionEndDateTime,
                                                            true,  //Changed to True!!!!
                                                            false);
                                                            
                Returned Values:
                    Returned: false
                    sessionStartDateTime:   DateTime.MinValue
                    sessionEndDateTime:     DateTime.MaxValue
                    
            Session is defined as Sunday to Friday from 7 PM to 9 AM and the base Date is 11/8/2012 (Thur).
            
                DateTimeHelpers.CreateSessionParameters(new DateTime(2012, 11, 8),
                                                            new TimeSpan(19, 0, 0),
                                                            DayOfWeek.Sunday,
                                                            new TimeSpan(9, 0, 0),
                                                            DayOfWeek.Friday,
                                                            out sessionStartDateTime,
                                                            out sessionEndDateTime,
                                                            false,
                                                            false);
                                                            
                Returned Values:
                    Returned: true
                    sessionStartDateTime:   11/7/2012 7 PM
                    sessionEndDateTime:     11/8/2012 9 AM
            
            Same session as above except the base Date is 11/8/2012 (Thur) 1 AM (not within session).
            
                DateTimeHelpers.CreateSessionParameters(new DateTime(2012, 11, 8, 1, 0, 0),
                                                            new TimeSpan(19, 0, 0),
                                                            DayOfWeek.Sunday,
                                                            new TimeSpan(9, 0, 0),
                                                            DayOfWeek.Friday,
                                                            out sessionStartDateTime,
                                                            out sessionEndDateTime,
                                                            false,
                                                            false);
                                                            
                Returned Values:
                    Returned: true
                    sessionStartDateTime:   11/7/2012 7 PM
                    sessionEndDateTime:     11/8/2012 9 AM
            
            Same session as above except the base Date is 11/8/2012 (Thur) 1 AM (not within session) and useBaseTimeToDetermineSessionSpan is true.
            
                DateTimeHelpers.CreateSessionParameters(new DateTime(2012, 11, 8, 1, 0, 0),
                                                            new TimeSpan(19, 0, 0),
                                                            DayOfWeek.Sunday,
                                                            new TimeSpan(9, 0, 0),
                                                            DayOfWeek.Friday,
                                                            out sessionStartDateTime,
                                                            out sessionEndDateTime,
                                                            false,
                                                            true); //Changed to True!!!
                                                            
                Returned Values:
                    Returned: true
                    sessionStartDateTime:   11/7/2012 7 PM
                    sessionEndDateTime:     11/8/2012 9 AM
            
            Same session as above except the base Date is 11/7/2012 (Thur) 8 PM and useBaseTimeToDetermineSessionSpan is true.
            
                DateTimeHelpers.CreateSessionParameters(new DateTime(2012, 11, 7, 20, 0, 0),
                                                            new TimeSpan(19, 0, 0),
                                                            DayOfWeek.Sunday,
                                                            new TimeSpan(9, 0, 0),
                                                            DayOfWeek.Friday,
                                                            out sessionStartDateTime,
                                                            out sessionEndDateTime,
                                                            false,
                                                            true); //Changed to True!!!
                                                            
                Returned Values:
                    Returned: true
                    sessionStartDateTime:   11/7/2012 7 PM
                    sessionEndDateTime:     11/8/2012 9 AM
            
            Same session as above except the base Date is 11/8/2012 (Thur) 8 PM and useBaseTimeToDetermineSessionSpan is true.
            
                DateTimeHelpers.CreateSessionParameters(new DateTime(2012, 11, 8, 20, 0, 0),
                                                            new TimeSpan(19, 0, 0),
                                                            DayOfWeek.Sunday,
                                                            new TimeSpan(9, 0, 0),
                                                            DayOfWeek.Friday,
                                                            out sessionStartDateTime,
                                                            out sessionEndDateTime,
                                                            false,
                                                            true); //Changed to True!!!
                                                            
                Returned Values:
                    Returned: true
                    sessionStartDateTime:   11/8/2012 7 PM
                    sessionEndDateTime:     11/9/2012 9 AM
            
            Same session as above except the base Date is 11/8/2012 (Thur) 6 PM (not within session) and useBaseTimeToDetermineSessionSpan is false.
            
                DateTimeHelpers.CreateSessionParameters(new DateTime(2012, 11, 8, 18, 0, 0),
                                                            new TimeSpan(19, 0, 0),
                                                            DayOfWeek.Sunday,
                                                            new TimeSpan(9, 0, 0),
                                                            DayOfWeek.Friday,
                                                            out sessionStartDateTime,
                                                            out sessionEndDateTime,
                                                            false, //DO NOT CHECK baseDate's time
                                                            false); //Changed to False!!!
                                                            
                Returned Values:
                    Returned: true
                    sessionStartDateTime:   11/7/2012 7 PM
                    sessionEndDateTime:     11/8/2012 9 AM
            
            Same session as above except the base Date is 11/8/2012 (Thur) 6 PM (not within session) and useBaseTimeToDetermineSessionSpan is true.
            
                DateTimeHelpers.CreateSessionParameters(new DateTime(2012, 11, 8, 18, 0, 0),
                                                            new TimeSpan(19, 0, 0),
                                                            DayOfWeek.Sunday,
                                                            new TimeSpan(9, 0, 0),
                                                            DayOfWeek.Friday,
                                                            out sessionStartDateTime,
                                                            out sessionEndDateTime,
                                                            false, //DO NOT CHECK baseDate's time
                                                            true); //Changed to True!!!
                                                            
                Returned Values:
                    Returned: true
                    sessionStartDateTime:   11/7/2012 7 PM
                    sessionEndDateTime:     11/8/2012 9 AM
                    
                Note that this result will be returned when any time is out of session (9:00:01 AM to 6:59:59.999 PM) when the Day of Week is Monday to Thursday.
                The useBaseTimeToDetermineSessionSpan parameter is ignored on dates that fall on Sunday and Friday.
                
            Same session as above except the base Date is 11/4/2012 (Sun) 6 PM (not within session) and useBaseTimeToDetermineSessionSpan is true.
            
                DateTimeHelpers.CreateSessionParameters(new DateTime(2012, 11, 4, 18, 0, 0),
                                                            new TimeSpan(19, 0, 0),
                                                            DayOfWeek.Sunday,
                                                            new TimeSpan(9, 0, 0),
                                                            DayOfWeek.Friday,
                                                            out sessionStartDateTime,
                                                            out sessionEndDateTime,
                                                            false, //DO NOT CHECK baseDate's time
                                                            true); //Changed to True!!!
                                                            
                Returned Values:
                    Returned: true
                    sessionStartDateTime:   11/4/2012 7 PM
                    sessionEndDateTime:     11/5/2012 9 AM
                    
               Note that the useBaseTimeToDetermineSessionSpan parameter is ignored on dates that fall on Sunday (session start) and Friday (session end).
               
             Same session as above except the base Date is 11/9/2012 (Friday) 6 PM (not within session) and the result would be:
             
                    Returned: true
                    sessionStartDateTime:   11/8/2012 7 PM
                    sessionEndDateTime:     11/9/2012 9 AM
            
            Same session as above except the base Date is 11/8/2012 (Thur) 6 PM (not within session) and checkBaseTime is true.
            
                DateTimeHelpers.CreateSessionParameters(new DateTime(2012, 11, 8, 18, 0, 0),
                                                            new TimeSpan(19, 0, 0),
                                                            DayOfWeek.Sunday,
                                                            new TimeSpan(9, 0, 0),
                                                            DayOfWeek.Friday,
                                                            out sessionStartDateTime,
                                                            out sessionEndDateTime,
                                                            true, //Changed to true; Check baseDate' Time!
                                                            true);
                                                            
                Returned Values:
                    Returned: false
                    sessionStartDateTime:   DateTime.MinValue
                    sessionEndDateTime:     DateTime.MaxValue
                            
            
            </example>
        </member>
        <member name="M:Common.DateTimeHelpers.DetermineDateFromDOW(System.Int32,System.Int32,System.Int32,System.DayOfWeek)">
            <summary>
            Determines the Date from the Day of the Week, Year, Month, and Week the DOW falls on...
            </summary>
            <param name="year">Year</param>
            <param name="month">Month</param>
            <param name="weekInMonth">The week the DOW falls in</param>
            <param name="dayofweek">Day of the Week</param>
            <returns>The date where the Day of the week falls on...</returns>
        </member>
        <member name="M:Common.DateTimeHelpers.DetermineTimeZoneTransitionTime(System.Int32,System.TimeZoneInfo,System.DateTime@,System.DateTime@,System.TimeSpan@)">
            <summary>
            Determines the Windows' Time Zone Transition Date/Time based on the given Time Zone information and date.
            </summary>
            <param name="forYear">The Year used to determine the Start/End Transition date/time </param>
            <param name="timeZoneInfo">Time Zone used to determine the transaction date/time</param>
            <param name="startTransitionDateTime">Returns the front Transition Date/Time or DateTime.MinValue when there are no Date/Time Transitions</param>
            <param name="endTransitionDateTime">Returns the back Transition Date/Time or DateTime.MinValue when there are no Date/Time Transitions</param>
            <param name="daylightDelta">The time span used to adjust the base time zone offset when day light saving time starts</param>
            <exception cref="T:System.NullReferenceException">Is thrown when timeZoneInfo is null</exception>
            <returns>true to indicate that there are transition start and end date/time</returns>
            <remarks>
            Note that this is based on the Windows' .Net TimeZoneInfo classes and is dependent on which Windows' Time Zone rules and patches are loaded on the workstation. 
            
            For a complete access to all rules use the IANA Rules defined by the Common.Patterns.TimeZoneInfo or Common.TimeZones assemblies.
            </remarks>
            <example>
            
                TimeSpan daylightDelta;
                DateTime startTransitionDateTime;
                DateTime endTransitionDateTime
                
                Common.DateTime.DetermineTimeZoneTransitionTime(2012, "Central Time Zone", out startTransitionDateTime, out endTransitionDateTime, out daylightDelta);
                Returns: true
                startTransitionDateTime: '2012-3-11 2:00:00 AM'
                endTransitionDateTime: '2012-11-4 2:00:00 AM'
                daylightDelta: +1 hour
                
            </example>
        </member>
        <member name="M:Common.DateTimeHelpers.GetNextTimeZoneTransitionTime(System.DateTime,System.TimeZoneInfo,System.TimeSpan@,System.Boolean@,System.Boolean)">
            <summary>
            Returns the next Date/Time a Time Zone when either go into Day Light Saving time or exist Day Light Saving time.
            </summary>
            <param name="baseDateTime">The base date/time to determine the next transition date/time</param>
            <param name="timeZoneInfo">The Time Zone used to determine the next transition</param>
            <param name="adjustedTimezoneUTCOffSet">
            Returns the adjusted time zone's UTC offset when the transition date/time is triggered.
            
            Note that in the case when a time zone does not have a transition date/time, this will return TimeSpan.Zero.
            </param>
            <param name="isDayLightSavingTime">Returns true to indicate that this next transition will be in Day Light Saving Time.</param>
            <param name="allowNextYearDate">If true (default) and if the baseDateTime exceeds the ending transition the next year's transition will be used.</param>
            <exception cref="T:System.NullReferenceException">Is thrown when timeZoneInfo is null</exception>       
            <returns>Returns the next Date/Time a Time Zone will be in transition or DateTime.MaxValue if the Time Zone does have DST or allowNextYearDate is false and the next transition is the following year.</returns>
            <remarks>
            Note that this is based on the Windows' .Net TimeZoneInfo classes and is dependent on which Windows' Time Zone rules and patches are loaded on the workstation. 
            
            For a complete access to all rules use the IANA Rules defined by the Common.Patterns.TimeZoneInfo or Common.TimeZones assemblies.
            </remarks>
            <example>
                For Central Time Zone...
                
                TimeSpan currentTZUTCOffset;
                bool isDayLightSavingTime;
                
                Common.DateTime.GetNextTimeZoneTransitionTime(new DateTime(2012, 2, 23, 14, 34, 20), "Central Time Zone", out currentTZUTCOffset, out isDayLightSavingTime);
                Returns: '2012-3-11 2:00:00 AM'
                currentTZUTCOffset: -5 hours
                isDayLightSavingTime: true
            
                Common.DateTime.GetNextTimeZoneTransitionTime(new DateTime(2012, 7, 23, 14, 34, 20), "Central Time Zone", out currentTZUTCOffset, out isDayLightSavingTime);
                Returns: '2012-11-4 2:00:00 AM'
                currentTZUTCOffset: -6 hours
                isDayLightSavingTime: false
                
                Common.DateTime.GetNextTimeZoneTransitionTime(new DateTime(2012, 11, 23, 14, 34, 20), "Central Time Zone", out currentTZUTCOffset, out isDayLightSavingTime);
                Returns: '2013-3-10 2:00:00 AM'
                currentTZUTCOffset: -5 hours
                isDayLightSavingTime: true
                
                Common.DateTime.GetNextTimeZoneTransitionTime(new DateTime(2012, 11, 23, 14, 34, 20), "Central Time Zone", out currentTZUTCOffset, out isDayLightSavingTime, false);
                Returns: DateTime.MaxValue
                currentTZUTCOffset:  TimeSpan.Zero
                isDayLightSavingTime: false
            
            </example>
        </member>
        <member name="M:Common.DateTimeHelpers.GetCurrentTimeZoneTransitionTime(System.DateTime,System.TimeZoneInfo,System.TimeSpan@,System.Boolean@,System.Boolean)">
            <summary>
            Returns the Time zone Transition date/times periods for the given baseDateTime. 
            </summary>
            <param name="baseDateTime">The date/time used to determine the transitions</param>
            <param name="timeZoneInfo">The Time Zone used to determine the transitions</param>
            <param name="currentTimezoneUTCOffSet">Returns the current UTC Time Zone offset</param>
            <param name="isDayLightSavingTime">Returns true to indicate that the current date/time is in day light saving time</param>
            <param name="allowPriorNextYearDate">
            If true (default) the function will return the start date if in a prior year or the end date if in the next year.
            Otherwise MinDate or MaxDate is returned when the base date/time is before the start date of DST or after the end of DST.
            </param>
            <returns>
            The first returned parameter is the time zone's transition start date/time and the second is the time zone's transition end date/time.
            </returns>
            <remarks>
            Note that this is based on the Windows' .Net TimeZoneInfo classes and is dependent on which Windows' Time Zone rules and patches are loaded on the workstation. 
            
            For a complete access to all rules use the IANA Rules defined by the Common.Patterns.TimeZoneInfo or Common.TimeZones assemblies.
            </remarks>
            <example>
                For Central Time Zone...
                
                TimeSpan currentTZUTCOffset;
                bool isDayLightSavingTime;
                
                Common.DateTime.GetCurrentTimeZoneTransitionTime(new DateTime(2012, 2, 23, 14, 34, 20), "Central Time Zone", out currentTZUTCOffset, out isDayLightSavingTime);
                Returns: Tuple&lt;'2011-11-6 2:00:00 AM', '2012-3-11 2:00:00 AM'&gt;
                currentTZUTCOffset: -6 hours
                isDayLightSavingTime: false
            
                Common.DateTime.GetCurrentTimeZoneTransitionTime(new DateTime(2012, 7, 23, 14, 34, 20), "Central Time Zone", out currentTZUTCOffset, out isDayLightSavingTime);
                Returns: Tuple&lt;'2012-3-11 2:00:00 AM', '2012-11-4 2:00:00 AM'&gt;
                currentTZUTCOffset: -5 hours
                isDayLightSavingTime: true
                
                Common.DateTime.GetCurrentTimeZoneTransitionTime(new DateTime(2012, 11, 23, 14, 34, 20), "Central Time Zone", out currentTZUTCOffset, out isDayLightSavingTime);
                Returns: Tuple&lt;'2012-11-14 2:00:00 AM', '2013-3-10 2:00:00 AM'&gt;
                currentTZUTCOffset: -6 hours
                isDayLightSavingTime: false
            
                Common.DateTime.GetCurrentTimeZoneTransitionTime(new DateTime(2012, 11, 23, 14, 34, 20), "Central Time Zone", out currentTZUTCOffset, out isDayLightSavingTime, false);
                Returns: Tuple&lt;'2012-11-14 2:00:00 AM', DateTime.MaxValue&gt;
                currentTZUTCOffset: -6 hours
                isDayLightSavingTime: false
                
                Common.DateTime.GetCurrentTimeZoneTransitionTime(new DateTime(2012, 2, 23, 14, 34, 20), "Central Time Zone", out currentTZUTCOffset, out isDayLightSavingTime, false);
                Returns: Tuple&lt;DateTime.MinValue, '2012-3-11 2:00:00 AM'&gt;
                currentTZUTCOffset: -6 hours
                isDayLightSavingTime: false
            </example>
        </member>
        <member name="M:Common.DateTimeHelpers.ConvertToMonth(System.String)">
            <summary>
            Converts a month string to the corresponding month number
            </summary>
            <param name="monthStr">A 3 character representation of the month or the full month's name</param>
            <returns>An index starting from 1 of the corresponding month</returns>
            <exception cref="T:System.ArgumentException">If the month string does not match</exception>
        </member>
        <member name="M:Common.DateTimeHelpers.ConvertToMonth(System.Int32)">
            <summary>
            Takes a month's index and returns a 3 character representation of the month
            </summary>
            <param name="month">The month's numeric representation</param>
            <returns>3 character representation of the month</returns>
            <exception cref="T:System.IndexOutOfRangeException">If the month index is out of bounds</exception>
        </member>
        <member name="M:Common.DateTimeHelpers.ConvertToDateTime(System.String,System.Int32,System.Int32)">
            <summary>
            Converts a given day string pattern into a date/time.
            </summary>
            <param name="dayPattern">
            A value like "LastSun" or "Sun&gt;=1" or a number which represent the day within the month.
            
            Warning: cannot have any whitespace between the DOW, the operator, and the number (e.g., Sun &gt;= 8 is NOT allowed).
            </param>
            <param name="year">The year for the given date</param>
            <param name="month">The month for the given date</param>
            <returns>A Datetime object in the given month and year
            matching the pattern with a type of DateTimeKind.Local</returns>
            <exception cref="T:System.ArgumentException">Thrown when the pattern was not able to be parsed</exception>
            <remarks>
            The string pattern used to identify the day of the week within a month. # is used to define the day with the month or occurrence. 
            For Example, Mon&gt;=1 -- The first Monday in the month,
            				Mon&gt;=8 -- The first Monday after the 8th of the month
            				Mon&lt;=8 -- The previous Monday before the 8th of the month
            				Mon*=2 -- The second Monday in the month
            Mon&gt;=# -- The next Day of the week after the date (#).
            Tue&gt;=#
            Wed&gt;=#
            Thu&gt;=#
            Fri&gt;=#
            Sat&gt;=#
            Sun&gt;=#
            
            DOW&lt;=# -- DOW - Day of Week as defined above; Previous Day of the week before the date (#)
            DOW*=# -- DOW - Day of Week as defined above; day of the week monthly occurrence (2 Monday in the Month). # can be negative (go backward, previous 2nd Monday).
            
            The string pattern to identify the last day of the week in the month:
            LastMon
            LastTue
            LastWed
            LastThu
            LastFri
            LastSat
            LastSun
            </remarks>
        </member>
        <member name="M:Common.DateTimeHelpers.First(System.DateTime)">
            <summary>
            Gets a DateTime representing the first day in the current month
            </summary>
            <param name="current">The current date</param>
            <returns></returns>
        </member>
        <member name="M:Common.DateTimeHelpers.First(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets a DateTime representing the first specified day in the current month
            </summary>
            <param name="current">The current day</param>
            <param name="dayOfWeek">The current day of week</param>
            <returns></returns>
        </member>
        <member name="M:Common.DateTimeHelpers.Last(System.DateTime)">
            <summary>
            Gets a DateTime representing the last day in the current month
            </summary>
            <param name="current">The current date</param>
            <returns></returns>
        </member>
        <member name="M:Common.DateTimeHelpers.Last(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets a DateTime representing the last specified day in the current month
            </summary>
            <param name="current">The current date</param>
            <param name="dayOfWeek">The current day of week</param>
            <returns></returns>
        </member>
        <member name="M:Common.DateTimeHelpers.Next(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets a DateTime representing the first date following the current date which falls on the given day of the week
            </summary>
            <param name="current">The current date</param>
            <param name="dayOfWeek">The day of week for the next date to get</param>
        </member>
        <member name="M:Common.DateTimeHelpers.Previous(System.DateTime,System.DayOfWeek)">
            <summary>
            Gets a DateTime representing the first date before the current date which falls on the given day of the week
            </summary>
            <param name="current">The current date</param>
            <param name="dayOfWeek">The day of week for the next date to get</param>
        </member>
        <member name="M:Common.DateTimeHelpers.ConvertToDOW(System.DayOfWeek)">
            <summary>
            Returns the int value of the Day of the Week enum where Sunday is 7 (.Net Sunday is 0).
            </summary>
            <param name="dow">Day of the Week</param>
            <returns>The day of the week numeric representation</returns>
        </member>
        <member name="M:Common.DateTimeHelpers.ConvertToDOW(System.Int32)">
            <summary>
            Converts the DOW number (Sunday is defined as 7) to a DayOfWeek enum. 
            </summary>
            <param name="dow">The day of the week number</param>
            <returns>DayOfWeek enum</returns>
        </member>
        <member name="M:Common.DateTimeHelpers.ConvertToDOW(System.String)">
            <summary>
            Converts the DOW string to a DayOfWeek enum. 
            </summary>
            <param name="dow">The day of the week string</param>
            <returns>DayOfWeek enum</returns>
        </member>
        <member name="M:Common.DateTimeHelpers.ConvertToTimeSpan(System.String)">
            <summary>
            Converts a given time string into a timespan.
            </summary>
            <param name="time">A string representation of a time.
            This may be just hours (hh), hours and minutes (hh:mm)
            or hours, minutes and seconds (hh:mm:ss)</param>		
            <returns>A timespan representing the input value</returns>     
        </member>
        <member name="T:Common.DateTimeHelpers.LocalTimeZoneNextTransitionInfo">
            <summary>
            Represents information regarding the Next Time Zone Transition. For Example transitioning from Day Light Saving to Standard Time...
            </summary>
        </member>
        <member name="P:Common.DateTimeHelpers.LocalTimeZoneNextTransitionInfo.TransitionDateTime">
            <summary>
            The Date and Time when the Next Time Zone Transition will take place in local time
            </summary>
        </member>
        <member name="P:Common.DateTimeHelpers.LocalTimeZoneNextTransitionInfo.IsDayLightSaving">
            <summary>
            Returns true to indicate that the next Transition will be in Day Light Saving Time
            </summary>
        </member>
        <member name="P:Common.DateTimeHelpers.LocalTimeZoneNextTransitionInfo.UTCOffSet">
            <summary>
            The UTC Time Span Offset
            </summary>
        </member>
        <member name="P:Common.DateTimeHelpers.LocalTimeZoneNextTransitionInfo.TransitionDateTimeUTC">
            <summary>
            The Date and Time when the Next Time Zone Transition will take place in UTC
            </summary>
        </member>
        <member name="P:Common.DateTimeHelpers.LocalTimeZoneNextTransitionInfo.UTCOffSetInTicks">
            <summary>
            The UTC Time Span Offset in Ticks
            </summary>
        </member>
        <member name="P:Common.DateTimeHelpers.LocalTimeZoneNextTransitionInformation">
            <summary>
            Returns the Time Zone's next Transition Period Information
            </summary>
        </member>
        <member name="P:Common.DateTimeHelpers.Now">
            <summary>
            A Faster version of the DateTime.Now property.
            
            This has a minimum resolution between 10 milliseconds to 16 milliseconds (same as for DateTime.Now) and is between 7 to 12 times faster...
            </summary>
            <remarks>
            This property uses cached local time zone information like the UTC offset. It will update this cached automatically when the time Day Light Saving time is either
            entered or exited. 
            
            For the best performance it is recommended to call DateTimeHelpers.UpdateLocalTimeZoneNextTransitionInfo() before any calls to this property so that the time zone cache is initialized,
            otherwise upon first use of this property the time zone cache will be initialization...
            
            DateTimeHelpers.Now is between 7 to 12 times faster than DateTime.Now...
            </remarks>
            <seealso cref="M:Common.DateTimeHelpers.UpdateLocalTimeZoneNextTransitionInfo(System.Nullable{System.DateTime})"/>
        </member>
        <member name="M:Common.DateTimeHelpers.UpdateLocalTimeZoneNextTransitionInfo(System.Nullable{System.DateTime})">
            <summary>
            Manually updates the LocalTimeZoneNextTransitionInfo and current local time zone offset caches for the DateTimeHelpers.Now property.
            </summary>
            <param name="useThisDateTime">if given the date/time that will be used for the update. If null (default), the current time is used.</param>
            <returns>The updated LocalTimeZoneNextTransitionInfo structure</returns>
        </member>
        <member name="M:Common.DateTimeRange.CompareTo(System.DateTime)">
            <summary>
            Returns -1 if compareDateTime is greater than the Max DateTime
            Returns 1 if the compareDateTime is less than the Min DateTime
            Returns 0 to indicate that the compareDateTime is within the Range (IsBetween) of the Max and Min DateTimes.
            </summary>       
        </member>
        <member name="M:Common.DateTimeRange.CompareTo(Common.DateTimeRange)">
            <summary>
            Returns 0 if the DateTimeRange instances are the same.
            Returns 1 to indicated that the compareMaxMinDateTime instance "Over Laps" "this" instance (the Max and Min values are greater than the Max and Min values of "this" instance)
            Returns -1 to indicated that the "this" instance "Over Laps" compareMaxMinDateTime instance (the Max and Min values are greater than the Max and Min values of compareMaxMinDateTime instance)
            Otherwise, it returns 1 if "this" instance's time span is greater than compareMaxMinDateTime's time span. -1 is returned if the time span is less than "this" instance.
            </summary>       
            <example>
                DateTimeRange{03/01/2012,04/12/2012}.CompareTo(DateTimeRange{03/10/2012,04/15/2012}) returns -1 (3/1 &lt; 3/12 and 4/12 &lt; 4/12)
            
                ---+-----|---------+------|--
                  3/1/12         4/12/12
                      3/10/12           4/15/12
            
                DateTimeRange{03/01/2012,04/12/2012}.CompareTo(DateTimeRange{03/10/2012,04/01/2012}) returns 1 (Time Span between 3/1/2012 and 4/12/2012 is greater than 3/10/2012 and 4/1/2012)
            
                  |-----  42 Days  ------|
                         | 22 Days |
                --+------|---------|-----+--
                 3/1/12               4/12/12
                      3/10/12   4/1/12
                      
                DateTimeRange{03/10/2012,04/01/2012}.CompareTo(DateTimeRange{03/01/2012,04/12/2012}) returns -1 (Time Span between 3/1/2012 and 4/12/2012 is greater than 3/10/2012 and 4/1/2012)
            
                  |-----  42 Days  ------|
                         | 22 Days |
                --|------+---------+-----|--
                       3/10/12   4/1/12
                3/1/12                4/12/12
            
                DateTimeRange{03/01/2012,04/12/2012}.CompareTo(DateTimeRange{02/10/2012,04/15/2012}) returns -1 (Time Span)
                
                --|------+----------+------|--
                        3/1/12   4/12/12
                02/10/12                  4/15/12
                
                DateTimeRange{03/01/2012,04/12/2012}.CompareTo(DateTimeRange{03/01/2012,04/12/2012}) returns 0 (Same Date and Times)
                
                DateTimeRange{03/10/2012,04/15/2012}.CompareTo(DateTimeRange{03/01/2012,04/12/2012}) returns 1 (3/1 &lt; 3/10 and 4/12 &lt; 4/15)
                
                ---|-----+---------|------+--
                       3/10/12         4/15/12
                3/1/12          4/12/12        
                      
            </example>
            <seealso cref="M:Common.DateTimeRange.OverLaps(Common.DateTimeRange)"/>
        </member>
        <member name="M:Common.DateTimeRange.GetHashCode">
            <summary>
            Returns the Hash Code based on the following:
                this.Max.GetHashCode() ^ this.Min.GetHashCode()
            </summary>
            <returns>Hash Code</returns>
            <remarks>
            Note that the hash code will change when either the Max or Min values are changed.
            </remarks>
        </member>
        <member name="M:Common.DateTimeRange.SetMinMax(System.DateTime)">
            <summary>
            Compares the given date/time to the existing Max and Min values and determines if one of the values should be replaced.
            </summary>
            <param name="datetimeCompare">Date/Time used to determine if this value is the new Max/Min</param>
            <returns>
                0 -- The datetimeCompare value is between the current Max/Min
                -1 -- The datetimeCompare value is now the current Max value (Max value was less than datetimeCompare value)
                1 -- The datetimeCompare value is now the current Min Value (datetimeCompare value is greater than the Min value)
            </returns>
            <remarks>
                if AllowEventFiring is true and OnValueChangeEvent is defined, the OnValueChangeEvent event is executed if the Min/Max Value is changed.
                
                Not Thread Safe!
            </remarks>
        </member>
        <member name="M:Common.DateTimeRange.SetMinMax(System.DateTime,System.DateTime)">
            <summary>
            Sets the Min/Max to the new values.        
            </summary>
            <param name="newValueA">New Value</param>
            <param name="newValueB">New Value</param>
            <returns>Always returns 1</returns>
            <remarks>
                if AllowEventFiring is true and OnValueChangeEvent is defined, the OnValueChangeEvent event is always executed.
                If possible, newValueA should be the Max. Value. This eliminates a swap between the variables.
                
                Not Thread Safe!
            </remarks>
        </member>
        <member name="M:Common.DateTimeRange.SetMaximum(System.DateTime)">
            <summary>
            Sets the given date/time as the Maximum value only if it is greater than the Minimal value. 
            </summary>
            <param name="datetimeCompare">Date/Time used to determine if this value should replace the Maximum Value</param>
            <returns>
                0 -- The datetimeCompare value is not greater than the Minimal Value
                -1 -- The datetimeCompare value is now the current Max value       
            </returns>
            <remarks>
                if AllowEventFiring is true and OnValueChangeEvent is defined, the OnValueChangeEvent event is executed if the Max Value is changed.
                
                Not Thread Safe!
            </remarks>
        </member>
        <member name="M:Common.DateTimeRange.SetMinimal(System.DateTime)">
            <summary>
            Sets the given date/time as the Minimal value only if it is less than the Maximum value. 
            </summary>
            <param name="datetimeCompare">Date/Time used to determine if this value should replace the Minimal Value</param>
            <returns>
                0 -- The datetimeCompare value is not less than the Maximum Value        
                1 -- The datetimeCompare value is now the current Min Value
            </returns>
            <remarks>
                if AllowEventFiring is true and OnValueChangeEvent is defined, the OnValueChangeEvent event is executed if the Min Value is changed.
                
                Not Thread Safe!
            </remarks>
        </member>
        <member name="M:Common.DateTimeRange.IsBetween(System.DateTime)">
            <summary>
            Returns true if checkDateTime is greater than or equal to the Min value and less than or equal to the Max value.
            </summary>
            <param name="checkDateTime">The DateTime value that will be checked against the Min and Max range</param>
            <returns>true if checkDateTime is between the Min and Max range</returns>
            <seealso cref="M:Common.DateTimeRange.IsNotBetween(System.DateTime)"/>
            <seealso cref="M:Common.DateTimeRange.CompareTo(System.DateTime)"/>
        </member>
        <member name="M:Common.DateTimeRange.IsBetween(Common.DateTimeRange)">
             <summary>
             Returns true is the checkMaxMinDateTime instance is between "this" instance's Max and Min DateTime (inclusive)
             </summary>
             <remarks>
             This will only return true if the argument's Max date/time is less than or equal to the target's Max date/time
                 and the argument's Min date/time is greater than or equal to the target's Min date/time.
             </remarks>
             <example>
                 DateTimeRange{03/01/2012,04/12/2012}.IsBetween(DateTimeRange{03/10/2012,04/15/2012}) returns false
             
                 ---+-----|---------+------|--
                   3/1/12         4/12/12
                       3/10/12           4/15/12
             
                 DateTimeRange{03/01/2012,04/12/2012}.IsBetween(DateTimeRange{03/10/2012,04/01/2012}) returns true
            
                 --+------|---------|-----+--
                  3/1/12               4/12/12
                       3/10/12   4/1/12
                       
                 DateTimeRange{03/10/2012,04/01/2012}.IsBetween(DateTimeRange{03/01/2012,04/12/2012}) returns false
                    
                 --|------+---------+-----|--
                        3/10/12   4/1/12
                 3/1/12                4/12/12
             
                 DateTimeRange{03/01/2012,04/12/2012}.IsBetween(DateTimeRange{02/10/2012,04/15/2012}) returns false
                 
                 --|------+----------+------|--
                         3/1/12   4/12/12
                 02/10/12                  4/15/12
                 
                 DateTimeRange{03/01/2012,04/12/2012}.IsBetween(DateTimeRange{03/01/2012,04/12/2012}) returns true (same values)
                 DateTimeRange{03/01/2012,04/12/2012}.IsBetween(DateTimeRange{03/10/2012,04/12/2012}) returns true (Different Min Values, Same Max Values)
                 DateTimeRange{03/01/2012,04/12/2012}.IsBetween(DateTimeRange{03/01/2012,04/1/2012}) returns true (Same Min Values, Different Max Values)     
                 
                 DateTimeRange{03/10/2012,04/15/2012}.IsBetween(DateTimeRange{03/01/2012,04/12/2012}) returns false
                 
                 ---|-----+---------|------+--
                        3/10/12         4/15/12
                 3/1/12          4/12/12       
                 
                 DateTimeRange{01/10/2012,02/15/2012}.IsBetween(DateTimeRange{03/01/2012,04/12/2012}) returns false
                 
                 ---+--------+-----|--------|--
                 1/10/12  2/15/12
                                 3/1/12 4/12/12       
                       
             </example>
             <seealso cref="M:Common.DateTimeRange.IsNotBetween(Common.DateTimeRange)"/>
             <seealso cref="M:Common.DateTimeRange.CompareTo(Common.DateTimeRange)"/>
             <seealso cref="M:Common.DateTimeRange.OverLaps(Common.DateTimeRange)"/>
        </member>
        <member name="M:Common.DateTimeRange.IsNotBetween(System.DateTime)">
            <summary>
            Returns true when checkDateTime is NOT between the Max and Min Dates
            </summary>
            <param name="checkDateTime">Date/Time to check</param>
            <returns>True when NOT between and false otherwise</returns>
            <seealso cref="M:Common.DateTimeRange.IsBetween(System.DateTime)"/>
        </member>
        <member name="M:Common.DateTimeRange.IsNotBetween(Common.DateTimeRange)">
             <summary>
             Returns true when checkMaxMinDateTime is NOT between the target's Max and Min Dates
             </summary>
             <param name="checkMaxMinDateTime">Max/Min Date/Time to be checked</param>
             <returns>True when NOT between and false otherwise</returns>
             <remarks>
             This will only return true if the argument's Max date/time is greater than the target's Max date/time
                 and the argument's Min date/time is less than the target's Min date/time.
             </remarks>
             <example>
                 DateTimeRange{03/01/2012,04/12/2012}.IsNotBetween(DateTimeRange{03/10/2012,04/15/2012}) returns false
             
                 ---+-----|---------+------|--
                   3/1/12         4/12/12
                       3/10/12           4/15/12
             
                 DateTimeRange{03/01/2012,04/12/2012}.IsNotBetween(DateTimeRange{03/10/2012,04/01/2012}) returns false
            
                 --+------|---------|-----+--
                  3/1/12               4/12/12
                       3/10/12   4/1/12
                       
                 DateTimeRange{03/10/2012,04/01/2012}.IsNotBetween(DateTimeRange{03/01/2012,04/12/2012}) returns true
                    
                 --|------+---------+-----|--
                        3/10/12   4/1/12
                 3/1/12                4/12/12
             
                 DateTimeRange{03/01/2012,04/12/2012}.IsNotBetween(DateTimeRange{02/10/2012,04/15/2012}) returns false
                 
                 --|------+----------+------|--
                         3/1/12   4/12/12
                 02/10/12                  4/15/12
                 
                 DateTimeRange{03/01/2012,04/12/2012}.IsNotBetween(DateTimeRange{03/01/2012,04/12/2012}) returns false (same values)
                 
                 DateTimeRange{03/10/2012,04/15/2012}.IsNotBetween(DateTimeRange{03/01/2012,04/12/2012}) returns false
                 
                 ---|-----+---------|------+--
                        3/10/12         4/15/12
                 3/1/12          4/12/12       
                 
                 DateTimeRange{01/10/2012,02/15/2012}.IsNotBetween(DateTimeRange{03/01/2012,04/12/2012}) returns true
                 
                 ---+--------+-----|--------|--
                 1/10/12  2/15/12
                                 3/1/12 4/12/12       
                       
             </example>
             <seealso cref="M:Common.DateTimeRange.IsBetween(Common.DateTimeRange)"/>
        </member>
        <member name="M:Common.DateTimeRange.Includes(System.DateTime)">
            <summary>
            Returns true when checkDateTime is greater than or equal to the Min Date/Time and when it is less than the Max Date/Time (not equal to).
            </summary>
            <param name="checkDateTime">Date/Time to be Checked</param>
            <returns>
            Returns true when checkDateTime is greater than or equal to the Min Date/Time and when it is less than the Max Date/Time (not equal to).
            </returns>
            <remarks>
            Similar to IsBetween except that the check date/time must be less than the Max date/time (not equal to)
            </remarks>       
            <seealso cref="M:Common.DateTimeRange.IsBetween(System.DateTime)"/>
            <seealso cref="M:Common.DateTimeRange.CompareTo(System.DateTime)"/>
        </member>
        <member name="M:Common.DateTimeRange.Includes(Common.DateTimeRange)">
             <summary>
             Returns true when checkMaxMinDateTime is greater than or equal to the Min Date/Time and when it is less than the Max Date/Time (not equal to).
             </summary>
             <param name="checkMaxMinDateTime">Date/Time to be Checked</param>
             <returns>
             Returns true when checkMaxMinDateTime is greater than or equal to the Min Date/Time and when it is less than the Max Date/Time (not equal to).
             </returns>
             <remarks>
             Similar to IsBetween except that the check date/time must be less than the Max date/time (not equal to)
             </remarks> 
             <example>
                 DateTimeRange{03/01/2012,04/12/2012}.Includes(DateTimeRange{03/10/2012,04/15/2012}) returns false
             
                 ---+-----|---------+------|--
                   3/1/12         4/12/12
                       3/10/12           4/15/12
             
                 DateTimeRange{03/01/2012,04/12/2012}.Includes(DateTimeRange{03/10/2012,04/01/2012}) returns true
            
                 --+------|---------|-----+--
                  3/1/12               4/12/12
                       3/10/12   4/1/12
                       
                 DateTimeRange{03/10/2012,04/01/2012}.Includes(DateTimeRange{03/01/2012,04/12/2012}) returns false
                    
                 --|------+---------+-----|--
                        3/10/12   4/1/12
                 3/1/12                4/12/12
             
                 DateTimeRange{03/01/2012,04/12/2012}.Includes(DateTimeRange{02/10/2012,04/15/2012}) returns false
                 
                 --|------+----------+------|--
                         3/1/12   4/12/12
                 02/10/12                  4/15/12
                 
                 DateTimeRange{03/01/2012,04/12/2012}.Includes(DateTimeRange{03/01/2012,04/12/2012}) returns false (same values)
                 DateTimeRange{03/01/2012,04/12/2012}.Includes(DateTimeRange{03/10/2012,04/12/2012}) returns false (Different Min Values, Same Max Values)
                 DateTimeRange{03/01/2012,04/12/2012}.Includes(DateTimeRange{03/01/2012,04/1/2012}) returns true (Same Min Values, Different Max Values)     
                 
                 DateTimeRange{03/10/2012,04/15/2012}.Includes(DateTimeRange{03/01/2012,04/12/2012}) returns false
                 
                 ---|-----+---------|------+--
                        3/10/12         4/15/12
                 3/1/12          4/12/12       
                 
                 DateTimeRange{01/10/2012,02/15/2012}.Includes(DateTimeRange{03/01/2012,04/12/2012}) returns false
                 
                 ---+--------+-----|--------|--
                 1/10/12  2/15/12
                                 3/1/12 4/12/12       
                       
             </example>
             <seealso cref="M:Common.DateTimeRange.IsBetween(Common.DateTimeRange)"/>
             <seealso cref="M:Common.DateTimeRange.OverLaps(Common.DateTimeRange)"/>
             <seealso cref="M:Common.DateTimeRange.CompareTo(Common.DateTimeRange)"/>
        </member>
        <member name="M:Common.DateTimeRange.IsWithIn(System.DateTime)">
            <summary>
            Returns true when checkDateTime is greater than the Min Date/Time (not equal to) and when it is less than the Max Date/Time (not equal to).
            </summary>
            <param name="checkDateTime">Date/Time to be Checked</param>
            <returns>
            Returns true when checkDateTime is greater than the Min Date/Time (not equal to) and when it is less than the Max Date/Time (not equal to).
            </returns>     
            <remarks>Similar to IsBetween except it is the Exclusive form</remarks>
            <seealso cref="M:Common.DateTimeRange.IsBetween(System.DateTime)"/>
            <seealso cref="M:Common.DateTimeRange.Includes(System.DateTime)"/>
            <seealso cref="M:Common.DateTimeRange.CompareTo(System.DateTime)"/>
        </member>
        <member name="M:Common.DateTimeRange.IsWithIn(Common.DateTimeRange)">
             <summary>
             Returns true when checkMaxMinDateTime is greater than the Min Date/Time (not equal to) and when it is less than the Max Date/Time (not equal to).
             </summary>
             <param name="checkMaxMinDateTime">Date/Time to be Checked</param>
             <returns>
             Returns true when checkMaxMinDateTime is greater than the Min Date/Time (not equal to) and when it is less than the Max Date/Time (not equal to).
             </returns>    
             <remarks>Similar to IsBetween except it is the Exclusive form</remarks>
             <example>
                 DateTimeRange{03/01/2012,04/12/2012}.IsWithIn(DateTimeRange{03/10/2012,04/15/2012}) returns false
             
                 ---+-----|---------+------|--
                   3/1/12         4/12/12
                       3/10/12           4/15/12
             
                 DateTimeRange{03/01/2012,04/12/2012}.IsWithIn(DateTimeRange{03/10/2012,04/01/2012}) returns true
            
                 --+------|---------|-----+--
                  3/1/12               4/12/12
                       3/10/12   4/1/12
                       
                 DateTimeRange{03/10/2012,04/01/2012}.IsWithIn(DateTimeRange{03/01/2012,04/12/2012}) returns false
                    
                 --|------+---------+-----|--
                        3/10/12   4/1/12
                 3/1/12                4/12/12
             
                 DateTimeRange{03/01/2012,04/12/2012}.IsWithIn(DateTimeRange{02/10/2012,04/15/2012}) returns false
                 
                 --|------+----------+------|--
                         3/1/12   4/12/12
                 02/10/12                  4/15/12
                 
                 DateTimeRange{03/01/2012,04/12/2012}.IsWithIn(DateTimeRange{03/01/2012,04/12/2012}) returns false (same values)
                 DateTimeRange{03/01/2012,04/12/2012}.IsWithIn(DateTimeRange{03/10/2012,04/12/2012}) returns false (Different Min Values, Same Max Values)
                 DateTimeRange{03/01/2012,04/12/2012}.IsWithIn(DateTimeRange{03/01/2012,04/1/2012}) returns false (Same Min Values, Different Max Values)     
                 
                 DateTimeRange{03/10/2012,04/15/2012}.IsWithIn(DateTimeRange{03/01/2012,04/12/2012}) returns false
                 
                 ---|-----+---------|------+--
                        3/10/12         4/15/12
                 3/1/12          4/12/12       
                 
                 DateTimeRange{01/10/2012,02/15/2012}.IsWithIn(DateTimeRange{03/01/2012,04/12/2012}) returns false
                 
                 ---+--------+-----|--------|--
                 1/10/12  2/15/12
                                 3/1/12 4/12/12       
                       
             </example>
             <seealso cref="M:Common.DateTimeRange.IsBetween(Common.DateTimeRange)"/>
             <seealso cref="M:Common.DateTimeRange.Includes(Common.DateTimeRange)"/>
             <seealso cref="M:Common.DateTimeRange.OverLaps(Common.DateTimeRange)"/>
             <seealso cref="M:Common.DateTimeRange.CompareTo(Common.DateTimeRange)"/>
        </member>
        <member name="M:Common.DateTimeRange.OverLaps(Common.DateTimeRange)">
            <summary>
            Returns 0 to indicated that either the instances are equal or one of the instances isBetween the Min/Max value of the other.
            Returns 1 to indicated that the maxminDateTimeOverLap instance "Over Laps" this instance (the Max and Min values are greater than the Max and Min values of "this" instance)
            Returns -1 to indicated that the "this" instance "Over Laps" maxminDateTimeOverLap instance (the Max and Min values are greater than the Max and Min values of maxminDateTimeOverLap instance)
            </summary>
            <example>
                DateTimeRange{03/01/2012,04/12/2012}.OverLaps(DateTimeRange{03/10/2012,04/15/2012}) returns -1
            
                --+--------|-----------------+------|----
                 3/1/12                    4/12/12
                        3/10/12                  4/15/12
                        
                DateTimeRange{03/01/2012,04/12/2012}.OverLaps(DateTimeRange{03/10/2012,04/01/2012}) returns 0 (argument instance IsBetween 3/1/2012 and 4/12/2012)
                
                --+------|-----------------|------+------
                3/1/12                         4/12/12
                      3/10/12           4/1/12  
            
                DateTimeRange{03/10/2012,04/01/2012}.OverLaps(DateTimeRange{03/01/2012,04/12/2012}) returns 0 (target instance IsBetween 3/1/2012 and 4/12/2012)
                
                --|------+-----------------+------|------
                      3/10/12           4/1/12  
                3/1/12                         4/12/12        
            
            
                DateTimeRange{03/01/2012,04/12/2012}.OverLaps(DateTimeRange{03/01/2012,04/12/2012}) returns 0 (Same Date and Times)
                
                DateTimeRange{03/10/2012,04/15/2012}.OverLaps(DateTimeRange{03/01/2012,04/12/2012}) returns 1
                
                ---|-----+------------------|-------+----
                       3/10/12                   4/15/12
                3/1/12                   4/12/12
                
            
                DateTimeRange{01/10/2012,02/15/2012}.OverLaps(DateTimeRange{03/01/2012,04/12/2012}) returns -1
                
                --+-----------+------|------------------|--
                1/10/12    2/15/12
                                  3/1/12             4/12/12
            </example>
            <remarks>
            To determine if maxminDateTimeOverLap is completely within the target's date/time, use either IsBetween or Includes methods.
            
            If maxminDateTimeOverLap is null, 1 is returned!
            </remarks>
            <seealso cref="M:Common.DateTimeRange.CompareTo(Common.DateTimeRange)"/>
            <seealso cref="M:Common.DateTimeRange.IsBetween(Common.DateTimeRange)"/>
            <seealso cref="M:Common.DateTimeRange.Includes(Common.DateTimeRange)"/>
        </member>
        <member name="M:Common.DateTimeRange.Intersect(Common.DateTimeRange)">
            <summary>
            Returns the Intersection (overlap) of the two DateTimeRange objects.
            </summary>
            <param name="maxMinDateTime"></param>
            <returns>The date/time range of the intersection or null indicating that the two ranges do not intersect</returns>
            <example>
                DateTimeRange{03/01/2012,04/12/2012}.Intersect(DateTimeRange{03/10/2012,04/15/2012}) returns DateTimeRange{03/10/2012,04/12/2012}
            
                --+--------|-----------------+------|----
                 3/1/12                    4/12/12
                        3/10/12                  4/15/12
                        
                DateTimeRange{03/01/2012,04/12/2012}.Intersect(DateTimeRange{03/10/2012,04/01/2012}) returns DateTimeRange{03/10/2012,04/01/2012}
                
                --+------|-----------------|------+------
                3/1/12                         4/12/12
                      3/10/12           4/1/12  
            
                DateTimeRange{03/10/2012,04/01/2012}.Intersect(DateTimeRange{03/01/2012,04/12/2012}) returns DateTimeRange{03/10/2012,04/01/2012}
                
                --|------+-----------------+------|------
                      3/10/12           4/1/12  
                3/1/12                         4/12/12        
            
            
                DateTimeRange{03/01/2012,04/12/2012}.Intersect(DateTimeRange{03/01/2012,04/12/2012}) returns DateTimeRange{03/01/2012,04/12/2012}
                
                DateTimeRange{03/10/2012,04/15/2012}.Intersect(DateTimeRange{03/01/2012,04/12/2012}) returns DateTimeRange{03/10/2012,04/12/2012}
                
                ---|-----+------------------|-------+----
                       3/10/12                   4/15/12
                3/1/12                   4/12/12
                
            
                DateTimeRange{01/10/2012,02/15/2012}.Intersect(DateTimeRange{03/01/2012,04/12/2012}) returns null
                
                --+-----------+------|------------------|--
                1/10/12    2/15/12
                                  3/1/12             4/12/12
            </example>
        </member>
        <member name="M:Common.DateTimeRange.NonIntersect(Common.DateTimeRange,System.Boolean)">
            <summary>
            Returns the Non-Intersection (non-overlapping) of the two DateTimeRange objects based on which range values are chosen.
            </summary>
            <param name="maxMinDateTime"></param>
            <param name="returnEarlierRange">
            True (default) to select the earlier (front) date/time range.
            False to select the later (back) date/time range.
            </param>
            <returns>The date/time range of the non-intersecting objects or null when the objects have the save date/time values</returns>
            <example>
                DateTimeRange{03/01/2012,04/12/2012}.NonIntersect(DateTimeRange{03/10/2012,04/15/2012}, true) returns DateTimeRange{03/1/2012,03/10/2012}
                DateTimeRange{03/01/2012,04/12/2012}.NonIntersect(DateTimeRange{03/10/2012,04/15/2012}, false) returns DateTimeRange{04/12/2012,04/15/2012}
            
                --+--------|-----------------+------|----
                 3/1/12                    4/12/12
                        3/10/12                  4/15/12
                        
                DateTimeRange{03/01/2012,04/12/2012}.NonIntersect(DateTimeRange{03/10/2012,04/01/2012}, true) returns DateTimeRange{03/1/2012,03/10/2012}
                DateTimeRange{03/01/2012,04/12/2012}.NonIntersect(DateTimeRange{03/10/2012,04/01/2012}, false) returns DateTimeRange{04/1/2012,04/12/2012}
                
                --+------|-----------------|------+------
                3/1/12                         4/12/12
                      3/10/12           4/1/12  
            
                DateTimeRange{03/10/2012,04/01/2012}.NonIntersect(DateTimeRange{03/01/2012,04/12/2012}, true) returns DateTimeRange{03/1/2012,03/10/2012}
                DateTimeRange{03/10/2012,04/01/2012}.NonIntersect(DateTimeRange{03/01/2012,04/12/2012}, false) returns DateTimeRange{04/1/2012,04/12/2012}
                
                --|------+-----------------+------|------
                      3/10/12           4/1/12  
                3/1/12                         4/12/12        
            
            
                DateTimeRange{03/01/2012,04/12/2012}.NonIntersect(DateTimeRange{03/01/2012,04/12/2012}) returns null
                
                DateTimeRange{03/10/2012,04/15/2012}.NonIntersect(DateTimeRange{03/01/2012,04/12/2012}, true) returns DateTimeRange{03/1/2012,03/10/2012}
                DateTimeRange{03/10/2012,04/15/2012}.NonIntersect(DateTimeRange{03/01/2012,04/12/2012}, false) returns DateTimeRange{04/12/2012,04/15/2012}
                
                ---|-----+------------------|-------+----
                       3/10/12                   4/15/12
                3/1/12                   4/12/12
                
            
                DateTimeRange{01/10/2012,02/15/2012}.NonIntersect(DateTimeRange{03/01/2012,04/12/2012}, true) returns DateTimeRange{01/10/2012,02/15/2012}
                DateTimeRange{01/10/2012,02/15/2012}.NonIntersect(DateTimeRange{03/01/2012,04/12/2012}, false) returns DateTimeRange{03/01/2012,04/12/2012}
                
                --+-----------+------|------------------|--
                1/10/12    2/15/12
                                  3/1/12             4/12/12
            </example>
            <remarks>
            if maxMinDateTime is null; a copy of this instance is returned.
            </remarks>
        </member>
        <member name="M:Common.DateTimeRange.OccurrenceIsBetween(System.DateTime)">
            <summary>
            Checks the occurrence date/time to determine if it falls between the Min/Max date/time such that 
            the occurrence year is between the Min/Max Year, is within month or if the same month between day and time.
            </summary>
            <param name="occursBetween">The date/tome that will be checked</param>
            <returns>true if the occurrence date/time is between the Min/Max date/time</returns>
            <example>
            	DateTimeRange{03/01/2010 02:00:00,04/12/2012 01:00:00}.OccurrenceIsBetween(DateTime{03/01/2010 02:00:00}) returns true
                DateTimeRange{03/01/2010 02:00:00,04/12/2012 01:00:00}.OccurrenceIsBetween(DateTime{03/01/2010 01:00:00}) returns false
                DateTimeRange{03/01/2010 02:00:00,04/12/2012 01:00:00}.OccurrenceIsBetween(DateTime{04/12/2012 01:00:00}) returns true
                DateTimeRange{03/01/2010 02:00:00,04/12/2012 01:00:00}.OccurrenceIsBetween(DateTime{04/12/2012 02:00:00}) returns false
                DateTimeRange{03/01/2010 02:00:00,04/12/2012 01:00:00}.OccurrenceIsBetween(DateTime{04/12/2011 02:00:00}) returns true
                DateTimeRange{03/01/2010 02:00:00,04/12/2012 01:00:00}.OccurrenceIsBetween(DateTime{03/01/2011 01:00:00}) returns true
                DateTimeRange{03/01/2010 02:00:00,04/12/2012 01:00:00}.OccurrenceIsBetween(DateTime{01/01/2011 01:00:00}) returns false
                DateTimeRange{03/01/2010 02:00:00,04/12/2012 01:00:00}.OccurrenceIsBetween(DateTime{06/01/2010 01:00:00}) returns false
                DateTimeRange{03/01/2010 02:00:00,04/12/2012 01:00:00}.OccurrenceIsBetween(DateTime{03/01/2011 01:00:00}) returns false
            </example>
            <seealso cref="M:Common.DateTimeRange.IsBetween(System.DateTime)"/>
        </member>
        <member name="M:Common.DateTimeRange.OccurrenceIsWithin(System.DateTime)">
            <summary>
            Checks the occurrence date/time to determine if it falls within the Min/Max date/time such that 
            the occurrence year is between the Min/Max Year, is within month or if the same month within day and time.
            </summary>
            <param name="occursBetween">The date/tome that will be checked</param>
            <returns>true if the occurrence date/time is within the Min/Max date/time</returns>
            <example>
            	DateTimeRange{03/01/2010 02:00:00,04/12/2012 01:00:00}.OccurrenceIsWithin(DateTime{03/01/2010 02:00:00}) returns false
            	DateTimeRange{03/01/2010 02:00:00,04/12/2012 01:00:00}.OccurrenceIsWithin(DateTime{03/01/2010 02:00:01}) returns true
                DateTimeRange{03/01/2010 02:00:00,04/12/2012 01:00:00}.OccurrenceIsWithin(DateTime{03/01/2010 01:00:00}) returns false
                DateTimeRange{03/01/2010 02:00:00,04/12/2012 01:00:00}.OccurrenceIsWithin(DateTime{04/12/2012 01:00:00}) returns false
                DateTimeRange{03/01/2010 02:00:00,04/12/2012 01:00:00}.OccurrenceIsWithin(DateTime{04/12/2012 00:59:59}) returns true
                DateTimeRange{03/01/2010 02:00:00,04/12/2012 01:00:00}.OccurrenceIsWithin(DateTime{04/12/2012 02:00:00}) returns false
                DateTimeRange{03/01/2010 02:00:00,04/12/2012 01:00:00}.OccurrenceIsWithin(DateTime{04/12/2011 02:00:00}) returns false
                DateTimeRange{03/01/2010 02:00:00,04/12/2012 01:00:00}.OccurrenceIsWithin(DateTime{03/01/2011 01:00:00}) returns false
                DateTimeRange{03/01/2010 02:00:00,04/12/2012 01:00:00}.OccurrenceIsWithin(DateTime{01/01/2011 01:00:00}) returns false
                DateTimeRange{03/01/2010 02:00:00,04/12/2012 01:00:00}.OccurrenceIsWithin(DateTime{06/01/2010 01:00:00}) returns false
                DateTimeRange{03/01/2010 02:00:00,04/12/2012 01:00:00}.OccurrenceIsBetween(DateTime{03/01/2011 01:00:00}) returns false
            </example>
            <seealso cref="M:Common.DateTimeRange.IsWithIn(System.DateTime)"/>
        </member>
        <member name="M:Common.DateTimeRange.OccurrenceIncludes(System.DateTime)">
            <summary>
            Checks the occurrence date/time to determine if it falls within the Min/Max date/time such that 
            the occurrence year is between the Min/Max Year, is within month or if the same month includes day and time.
            </summary>
            <param name="occursBetween">The date/tome that will be checked</param>
            <returns>true if the occurrence date/time is included in the Min/Max date/time</returns>
            <example>
            	DateTimeRange{03/01/2010 02:00:00,04/12/2012 01:00:00}.OccurrenceIncludes(DateTime{03/01/2010 02:00:00}) returns true		
                DateTimeRange{03/01/2010 02:00:00,04/12/2012 01:00:00}.OccurrenceIncludes(DateTime{03/01/2010 01:00:00}) returns false
                DateTimeRange{03/01/2010 02:00:00,04/12/2012 01:00:00}.OccurrenceIncludes(DateTime{04/12/2012 01:00:00}) returns false
                DateTimeRange{03/01/2010 02:00:00,04/12/2012 01:00:00}.OccurrenceIncludes(DateTime{04/12/2012 00:59:59}) returns true
                DateTimeRange{03/01/2010 02:00:00,04/12/2012 01:00:00}.OccurrenceIncludes(DateTime{04/12/2012 02:00:00}) returns false
                DateTimeRange{03/01/2010 02:00:00,04/12/2012 01:00:00}.OccurrenceIncludes(DateTime{04/12/2011 02:00:00}) returns false
                DateTimeRange{03/01/2010 02:00:00,04/12/2012 01:00:00}.OccurrenceIncludes(DateTime{03/01/2011 01:00:00}) returns false
                DateTimeRange{03/01/2010 02:00:00,04/12/2012 01:00:00}.OccurrenceIncludes(DateTime{03/01/2011 02:00:00}) returns true
                DateTimeRange{03/01/2010 02:00:00,04/12/2012 01:00:00}.OccurrenceIncludes(DateTime{01/01/2011 01:00:00}) returns false
                DateTimeRange{03/01/2010 02:00:00,04/12/2012 01:00:00}.OccurrenceIncludes(DateTime{06/01/2010 01:00:00}) returns false
            </example>
            <seealso cref="M:Common.DateTimeRange.Includes(System.DateTime)"/>
        </member>
        <member name="M:Common.DateTimeRange.Minimal(System.DateTime)">
            <summary>
            Returns the minimal date/time
            </summary>
            <param name="checkDateTime"></param>
            <returns>The minimal date/Time</returns>
        </member>
        <member name="M:Common.DateTimeRange.Minimal(Common.DateTimeRange)">
            <summary>
            Compares the DateTimeRange objects and returns the object that is the minimal object (uses operator &lt;).
            </summary>
            <param name="checkMaxMinDateTime"></param>
            <returns>Minimal Object</returns>
        </member>
        <member name="M:Common.DateTimeRange.MinDateTime(Common.DateTimeRange)">
            <summary>
            Uses each object's Min date/time to determine the minimal date/time.
            </summary>
            <param name="checkMaxMinDateTime"></param>
            <returns>The minimal Min date/time between the objects</returns>
        </member>
        <member name="M:Common.DateTimeRange.Maximum(System.DateTime)">
            <summary>
            Returns the maximum date/time
            </summary>
            <param name="checkDateTime"></param>
            <returns>Returns the maximum date/time</returns>
        </member>
        <member name="M:Common.DateTimeRange.Maximum(Common.DateTimeRange)">
            <summary>
            Compares the DateTimeRange objects and returns the object that is the maximum object (uses operator &gt;).
            </summary>
            <param name="checkMaxMinDateTime"></param>
            <returns>Maximum Object</returns>
        </member>
        <member name="M:Common.DateTimeRange.MaxDateTime(Common.DateTimeRange)">
            <summary>
            Uses each object's Max date/time to determine the maximum date/time.
            </summary>
            <param name="checkMaxMinDateTime"></param>
            <returns>The maximum Max date/time between the objects</returns>
        </member>
        <member name="M:Common.DateTimeRange.MaximumMinDateTime(Common.DateTimeRange)">
            <summary>
            Returns the Maximum date/time between the Min date/time values.
            </summary>
            <param name="checkMaxMinDateTime"></param>
            <returns>Maximum Min date/time between the objects</returns>
        </member>
        <member name="M:Common.DateTimeRange.MinimalMinDateTime(Common.DateTimeRange)">
            <summary>
            Returns the Minimal date/time between the Min date/time values.
            </summary>
            <param name="checkMaxMinDateTime"></param>
            <returns>Minimal Min date/time between the objects</returns>
        </member>
        <member name="M:Common.DateTimeRange.MinimalMaxDateTime(Common.DateTimeRange)">
            <summary>
            Returns the Minimal date/time between the Max date/time values.
            </summary>
            <param name="checkMaxMinDateTime"></param>
            <returns>Minimal Max date/time between the objects</returns>
        </member>
        <member name="M:Common.DateTimeRange.MaximumMaxDateTime(Common.DateTimeRange)">
            <summary>
            Returns the Maximum date/time between the Max date/time values.
            </summary>
            <param name="checkMaxMinDateTime"></param>
            <returns>Maximum Max date/time between the objects</returns>
        </member>
        <member name="M:Common.DateTimeRange.MaximumMinDateTime(System.DateTime)">
            <summary>
            Returns the Maximum date/time between the data/time given and the Min date/time values.
            </summary>
            <param name="checkDateTime"></param>
            <returns>Maximum Min date/time between the objects</returns>
        </member>
        <member name="M:Common.DateTimeRange.MinimalMinDateTime(System.DateTime)">
            <summary>
            Returns the Minimal date/time between the data/time given and the Min date/time values.
            </summary>
            <param name="checkDateTime"></param>
            <returns>Minimal Min date/time between the objects</returns>
            <remarks>
            This is the same as Minimal
            </remarks>
        </member>
        <member name="M:Common.DateTimeRange.MinimalMaxDateTime(System.DateTime)">
            <summary>
            Returns the Minimal date/time between the data/time given and the Max date/time values.
            </summary>
            <param name="checkDateTime"></param>
            <returns>Minimal Max date/time between the objects</returns>
        </member>
        <member name="M:Common.DateTimeRange.MaximumMaxDateTime(System.DateTime)">
            <summary>
            Returns the Maximum date/time between the data/time given and the Max date/time values.
            </summary>
            <param name="checkDateTime"></param>
            <returns>Maximum Max date/time between the objects</returns>
            <remarks>
            This is the same as Maximum
            </remarks>
        </member>
        <member name="M:Common.DateTimeRange.TimeSpan">
            <summary>
            Returns the span of time between the Maximum and Minimal Date/times
            </summary>
            <returns>Time Span</returns>
        </member>
        <member name="M:Common.DateTimeRange.op_GreaterThan(Common.DateTimeRange,System.DateTime)">
            <summary>
            Returns true if the RHS is greater than the Max of the MaxMinDate instance.
            </summary>
        </member>
        <member name="M:Common.DateTimeRange.op_GreaterThanOrEqual(Common.DateTimeRange,System.DateTime)">
            <summary>
            Returns true if the RHS is greater than or equal to the Max of the MaxMinDate instance.
            </summary>
        </member>
        <member name="M:Common.DateTimeRange.op_LessThan(Common.DateTimeRange,System.DateTime)">
            <summary>
            Returns true if the RHS is less than the Min of the MaxMinDate instance.
            </summary>
        </member>
        <member name="M:Common.DateTimeRange.op_LessThanOrEqual(Common.DateTimeRange,System.DateTime)">
            <summary>
            Returns true if the RHS is less than or equal the Min of the MaxMinDate instance.
            </summary>
        </member>
        <member name="M:Common.DateTimeRange.op_GreaterThan(System.DateTime,Common.DateTimeRange)">
            <summary>
            Returns true if the LHS is greater than the Min of the MaxMinDate instance.
            </summary>
        </member>
        <member name="M:Common.DateTimeRange.op_GreaterThanOrEqual(System.DateTime,Common.DateTimeRange)">
            <summary>
            Returns true if the LHS is greater than or equal to the Min of the MaxMinDate instance.
            </summary>
        </member>
        <member name="M:Common.DateTimeRange.op_LessThan(System.DateTime,Common.DateTimeRange)">
            <summary>
            Returns true if the LHS is Less than the Max of the MaxMinDate instance.
            </summary>
        </member>
        <member name="M:Common.DateTimeRange.op_LessThanOrEqual(System.DateTime,Common.DateTimeRange)">
            <summary>
            Returns true if the LHS is Less than or equal to the Max of the MaxMinDate instance.
            </summary>
        </member>
        <member name="M:Common.DateTimeRange.op_GreaterThan(Common.DateTimeRange,Common.DateTimeRange)">
            <summary>
            LHS's range must be greater then the RHS's range (LHS.Max &gt; RHS.Max and LHS.Min &gt; RHS.Min)
            </summary>
        </member>
        <member name="M:Common.DateTimeRange.op_GreaterThanOrEqual(Common.DateTimeRange,Common.DateTimeRange)">
            <summary>
            LHS's range must be greater then or equal to the RHS's range (LHS.Max &gt;= RHS.Max and LHS.Min &gt;= RHS.Min)
            </summary>
        </member>
        <member name="M:Common.DateTimeRange.op_LessThan(Common.DateTimeRange,Common.DateTimeRange)">
            <summary>
            LHS's range must be Less then the RHS's range (LHS.Max &lt; RHS.Max and LHS.Min &lt; RHS.Min)
            </summary>
        </member>
        <member name="M:Common.DateTimeRange.op_LessThanOrEqual(Common.DateTimeRange,Common.DateTimeRange)">
            <summary>
            LHS's range must be Less then or equal to the RHS's range (LHS.Max &lt;= RHS.Max and LHS.Min &lt;= RHS.Min)
            </summary>
        </member>
        <member name="M:Common.DateTimeRange.op_Equality(Common.DateTimeRange,Common.DateTimeRange)">
            <summary>
            The LHS's range must equal to the RHS's range (LHS.Max = RHS.Max and LHS.Min = LHS.Min)
            </summary>       
        </member>
        <member name="M:Common.DateTimeRange.op_Inequality(Common.DateTimeRange,Common.DateTimeRange)">
            <summary>
            The LHS's range must not be equal to the RHS's range (LHS.Max != RHS.Max or LHS.Min != LHS.Min)
            </summary>  
        </member>
        <member name="T:Common.DoubleConverter">
            <summary>
            A class to allow the conversion of doubles to string representations of
            their exact decimal values. The implementation aims for readability over
            efficiency.
            </summary>
        </member>
        <member name="M:Common.DoubleConverter.ToExactString(System.Double)">
            <summary>
            Converts the given double to a string representation of its
            exact decimal value.
            </summary>
            <param name="d">The double to convert.</param>
            <returns>A string representation of the double's exact decimal value.</returns>
        </member>
        <member name="T:Common.DoubleConverter.ArbitraryDecimal">
            <summary>
            Private class used for manipulating sequences of decimal digits.
            </summary>
        </member>
        <member name="F:Common.DoubleConverter.ArbitraryDecimal.digits">
            <summary>Digits in the decimal expansion, one byte per digit</summary>
        </member>
        <member name="F:Common.DoubleConverter.ArbitraryDecimal.decimalPoint">
            <summary> 
            How many digits are *after* the decimal point
            </summary>
        </member>
        <member name="M:Common.DoubleConverter.ArbitraryDecimal.#ctor(System.Int64)">
            <summary> 
            Constructs an arbitrary decimal expansion from the given long.
            The long must not be negative.
            </summary>
        </member>
        <member name="M:Common.DoubleConverter.ArbitraryDecimal.MultiplyBy(System.Int32)">
            <summary>
            Multiplies the current expansion by the given amount, which should
            only be 2 or 5.
            </summary>
        </member>
        <member name="M:Common.DoubleConverter.ArbitraryDecimal.Shift(System.Int32)">
            <summary>
            Shifts the decimal point; a negative value makes
            the decimal expansion bigger (as fewer digits come after the
            decimal place) and a positive value makes the decimal
            expansion smaller.
            </summary>
        </member>
        <member name="M:Common.DoubleConverter.ArbitraryDecimal.Normalize">
            <summary>
            Removes leading/trailing zeroes from the expansion.
            </summary>
        </member>
        <member name="M:Common.DoubleConverter.ArbitraryDecimal.ToString">
            <summary>
            Converts the value to a proper decimal string representation.
            </summary>
        </member>
        <member name="F:Common.EndianConverter.Endianness.LittleEndian">
            <summary>
            Little endian - least significant byte first
            </summary>
        </member>
        <member name="F:Common.EndianConverter.Endianness.BigEndian">
            <summary>
            Big endian - most significant byte first
            </summary>
        </member>
        <member name="T:Common.EndianConverter.EndianBitConverter">
            <summary>
            Equivalent of System.BitConverter, but with either endianness.
            </summary>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.IsLittleEndian">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
            <remarks>
            Different computer architectures store data using different byte orders. "Big-endian"
            means the most significant byte is on the left end of a word. "Little-endian" means the 
            most significant byte is on the right end of a word.
            </remarks>
            <returns>true if this converter is little-endian, false otherwise.</returns>
        </member>
        <member name="P:Common.EndianConverter.EndianBitConverter.Endianness">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
        </member>
        <member name="P:Common.EndianConverter.EndianBitConverter.Little">
            <summary>
            Returns a little-endian bit converter instance. The same instance is
            always returned.
            </summary>
        </member>
        <member name="P:Common.EndianConverter.EndianBitConverter.Big">
            <summary>
            Returns a big-endian bit converter instance. The same instance is
            always returned.
            </summary>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.DoubleToInt64Bits(System.Double)">
            <summary>
            Converts the specified double-precision floating point number to a 
            64-bit signed integer. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A 64-bit signed integer whose value is equivalent to value.</returns>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.Int64BitsToDouble(System.Int64)">
            <summary>
            Converts the specified 64-bit signed integer to a double-precision 
            floating point number. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A double-precision floating point number whose value is equivalent to value.</returns>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.SingleToInt32Bits(System.Single)">
            <summary>
            Converts the specified single-precision floating point number to a 
            32-bit signed integer. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A 32-bit signed integer whose value is equivalent to value.</returns>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.Int32BitsToSingle(System.Int32)">
            <summary>
            Converts the specified 32-bit signed integer to a single-precision floating point 
            number. Note: the endianness of this converter does not
            affect the returned value.
            </summary>
            <param name="value">The number to convert. </param>
            <returns>A single-precision floating point number whose value is equivalent to value.</returns>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.ToBoolean(System.Byte[],System.Int32)">
            <summary>
            Returns a Boolean value converted from one byte at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>true if the byte at startIndex in value is nonzero; otherwise, false.</returns>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.ToChar(System.Byte[],System.Int32)">
            <summary>
            Returns a Unicode character converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A character formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.ToDouble(System.Byte[],System.Int32)">
            <summary>
            Returns a double-precision floating point number converted from eight bytes 
            at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A double precision floating point number formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.ToSingle(System.Byte[],System.Int32)">
            <summary>
            Returns a single-precision floating point number converted from four bytes 
            at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A single precision floating point number formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.ToInt16(System.Byte[],System.Int32)">
            <summary>
            Returns a 16-bit signed integer converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit signed integer formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.ToInt32(System.Byte[],System.Int32)">
            <summary>
            Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 32-bit signed integer formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.ToInt64(System.Byte[],System.Int32)">
            <summary>
            Returns a 64-bit signed integer converted from eight bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 64-bit signed integer formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.ToUInt16(System.Byte[],System.Int32)">
            <summary>
            Returns a 16-bit unsigned integer converted from two bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 16-bit unsigned integer formed by two bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.ToUInt32(System.Byte[],System.Int32)">
            <summary>
            Returns a 32-bit unsigned integer converted from four bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 32-bit unsigned integer formed by four bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.ToUInt64(System.Byte[],System.Int32)">
            <summary>
            Returns a 64-bit unsigned integer converted from eight bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A 64-bit unsigned integer formed by eight bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.CheckByteArgument(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Checks the given argument for validity.
            </summary>
            <param name="value">The byte array passed in</param>
            <param name="startIndex">The start index passed in</param>
            <param name="bytesRequired">The number of bytes required</param>
            <exception cref="T:System.ArgumentNullException">value is a null reference</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            startIndex is less than zero or greater than the length of value minus bytesRequired.
            </exception>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.CheckedFromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Checks the arguments for validity before calling FromBytes
            (which can therefore assume the arguments are valid).
            </summary>
            <param name="value">The bytes to convert after checking</param>
            <param name="startIndex">The index of the first byte to convert</param>
            <param name="bytesToConvert">The number of bytes to convert</param>
            <returns></returns>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Convert the given number of bytes from the given array, from the given start
            position, into a long, using the bytes as the least significant part of the long.
            By the time this is called, the arguments have been checked for validity.
            </summary>
            <param name="value">The bytes to convert</param>
            <param name="startIndex">The index of the first byte to convert</param>
            <param name="bytesToConvert">The number of bytes to use in the conversion</param>
            <returns>The converted number</returns>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.ToString(System.Byte[])">
            <summary>
            Returns a String converted from the elements of a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <remarks>All the elements of value are converted.</remarks>
            <returns>
            A String of hexadecimal pairs separated by hyphens, where each pair 
            represents the corresponding element in value; for example, "7F-2C-4A".
            </returns>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.ToString(System.Byte[],System.Int32)">
            <summary>
            Returns a String converted from the elements of a byte array starting at a specified array position.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <remarks>The elements from array position startIndex to the end of the array are converted.</remarks>
            <returns>
            A String of hexadecimal pairs separated by hyphens, where each pair 
            represents the corresponding element in value; for example, "7F-2C-4A".
            </returns>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.ToString(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a String converted from a specified number of bytes at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <param name="length">The number of bytes to convert.</param>
            <remarks>The length elements from array position startIndex are converted.</remarks>
            <returns>
            A String of hexadecimal pairs separated by hyphens, where each pair 
            represents the corresponding element in value; for example, "7F-2C-4A".
            </returns>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.ToDecimal(System.Byte[],System.Int32)">
            <summary>
            Returns a decimal value converted from sixteen bytes 
            at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A decimal  formed by sixteen bytes beginning at startIndex.</returns>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.GetBytes(System.Decimal)">
            <summary>
            Returns the specified decimal value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 16.</returns>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.CopyBytes(System.Decimal,System.Byte[],System.Int32)">
            <summary>
            Copies the specified decimal value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">A character to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.GetBytes(System.Int64,System.Int32)">
            <summary>
            Returns an array with the given number of bytes formed
            from the least significant bytes of the specified value.
            This is used to implement the other GetBytes methods.
            </summary>
            <param name="value">The value to get bytes for</param>
            <param name="bytes">The number of significant bytes to return</param>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.GetBytes(System.Boolean)">
            <summary>
            Returns the specified Boolean value as an array of bytes.
            </summary>
            <param name="value">A Boolean value.</param>
            <returns>An array of bytes with length 1.</returns>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.GetBytes(System.Char)">
            <summary>
            Returns the specified Unicode character value as an array of bytes.
            </summary>
            <param name="value">A character to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.GetBytes(System.Double)">
            <summary>
            Returns the specified double-precision floating point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.GetBytes(System.Int16)">
            <summary>
            Returns the specified 16-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.GetBytes(System.Int32)">
            <summary>
            Returns the specified 32-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.GetBytes(System.Int64)">
            <summary>
            Returns the specified 64-bit signed integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.GetBytes(System.Single)">
            <summary>
            Returns the specified single-precision floating point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.GetBytes(System.UInt16)">
            <summary>
            Returns the specified 16-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.GetBytes(System.UInt32)">
            <summary>
            Returns the specified 32-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 4.</returns>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.GetBytes(System.UInt64)">
            <summary>
            Returns the specified 64-bit unsigned integer value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 8.</returns>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.CopyBytes(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the given number of bytes from the least-specific
            end of the specified value into the specified byte array, beginning
            at the specified index.
            This is used to implement the other CopyBytes methods.
            </summary>
            <param name="value">The value to copy bytes for</param>
            <param name="bytes">The number of significant bytes to copy</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.CopyBytesImpl(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the given number of bytes from the least-specific
            end of the specified value into the specified byte array, beginning
            at the specified index.
            This must be implemented in concrete derived classes, but the implementation
            may assume that the value will fit into the buffer.
            </summary>
            <param name="value">The value to copy bytes for</param>
            <param name="bytes">The number of significant bytes to copy</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.CopyBytes(System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Copies the specified Boolean value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">A Boolean value.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.CopyBytes(System.Char,System.Byte[],System.Int32)">
            <summary>
            Copies the specified Unicode character value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">A character to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.CopyBytes(System.Double,System.Byte[],System.Int32)">
            <summary>
            Copies the specified double-precision floating point value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.CopyBytes(System.Int16,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 16-bit signed integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.CopyBytes(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 32-bit signed integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.CopyBytes(System.Int64,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 64-bit signed integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.CopyBytes(System.Single,System.Byte[],System.Int32)">
            <summary>
            Copies the specified single-precision floating point value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.CopyBytes(System.UInt16,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 16-bit unsigned integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.CopyBytes(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 32-bit unsigned integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.CopyBytes(System.UInt64,System.Byte[],System.Int32)">
            <summary>
            Copies the specified 64-bit unsigned integer value into the specified byte array,
            beginning at the specified index.
            </summary>
            <param name="value">The number to convert.</param>
            <param name="buffer">The byte array to copy the bytes into</param>
            <param name="index">The first index into the array to copy the bytes into</param>
        </member>
        <member name="T:Common.EndianConverter.EndianBitConverter.Int32SingleUnion">
            <summary>
            Union used solely for the equivalent of DoubleToInt64Bits and vice versa.
            </summary>
        </member>
        <member name="F:Common.EndianConverter.EndianBitConverter.Int32SingleUnion.i">
            <summary>
            Int32 version of the value.
            </summary>
        </member>
        <member name="F:Common.EndianConverter.EndianBitConverter.Int32SingleUnion.f">
            <summary>
            Single version of the value.
            </summary>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.Int32SingleUnion.#ctor(System.Int32)">
            <summary>
            Creates an instance representing the given integer.
            </summary>
            <param name="i">The integer value of the new instance.</param>
        </member>
        <member name="M:Common.EndianConverter.EndianBitConverter.Int32SingleUnion.#ctor(System.Single)">
            <summary>
            Creates an instance representing the given floating point number.
            </summary>
            <param name="f">The floating point value of the new instance.</param>
        </member>
        <member name="P:Common.EndianConverter.EndianBitConverter.Int32SingleUnion.AsInt32">
            <summary>
            Returns the value of the instance as an integer.
            </summary>
        </member>
        <member name="P:Common.EndianConverter.EndianBitConverter.Int32SingleUnion.AsSingle">
            <summary>
            Returns the value of the instance as a floating point number.
            </summary>
        </member>
        <member name="T:Common.EndianConverter.BigEndianBitConverter">
            <summary>
            Implementation of EndianBitConverter which converts to/from big-endian
            byte arrays.
            </summary>
        </member>
        <member name="M:Common.EndianConverter.BigEndianBitConverter.IsLittleEndian">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
            <remarks>
            Different computer architectures store data using different byte orders. "Big-endian"
            means the most significant byte is on the left end of a word. "Little-endian" means the 
            most significant byte is on the right end of a word.
            </remarks>
            <returns>true if this converter is little-endian, false otherwise.</returns>
        </member>
        <member name="P:Common.EndianConverter.BigEndianBitConverter.Endianness">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
        </member>
        <member name="M:Common.EndianConverter.BigEndianBitConverter.CopyBytesImpl(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified number of bytes from value to buffer, starting at index.
            </summary>
            <param name="value">The value to copy</param>
            <param name="bytes">The number of bytes to copy</param>
            <param name="buffer">The buffer to copy the bytes into</param>
            <param name="index">The index to start at</param>
        </member>
        <member name="M:Common.EndianConverter.BigEndianBitConverter.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a value built from the specified number of bytes from the given buffer,
            starting at index.
            </summary>
            <param name="buffer">The data in byte array format</param>
            <param name="startIndex">The first index to use</param>
            <param name="bytesToConvert">The number of bytes to use</param>
            <returns>The value built from the given bytes</returns>
        </member>
        <member name="T:Common.EndianConverter.LittleEndianBitConverter">
            <summary>
            Implementation of EndianBitConverter which converts to/from little-endian
            byte arrays.
            </summary>
        </member>
        <member name="M:Common.EndianConverter.LittleEndianBitConverter.IsLittleEndian">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
            <remarks>
            Different computer architectures store data using different byte orders. "Big-endian"
            means the most significant byte is on the left end of a word. "Little-endian" means the 
            most significant byte is on the right end of a word.
            </remarks>
            <returns>true if this converter is little-endian, false otherwise.</returns>
        </member>
        <member name="P:Common.EndianConverter.LittleEndianBitConverter.Endianness">
            <summary>
            Indicates the byte order ("endianess") in which data is converted using this class.
            </summary>
        </member>
        <member name="M:Common.EndianConverter.LittleEndianBitConverter.CopyBytesImpl(System.Int64,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copies the specified number of bytes from value to buffer, starting at index.
            </summary>
            <param name="value">The value to copy</param>
            <param name="bytes">The number of bytes to copy</param>
            <param name="buffer">The buffer to copy the bytes into</param>
            <param name="index">The index to start at</param>
        </member>
        <member name="M:Common.EndianConverter.LittleEndianBitConverter.FromBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Returns a value built from the specified number of bytes from the given buffer,
            starting at index.
            </summary>
            <param name="buffer">The data in byte array format</param>
            <param name="startIndex">The first index to use</param>
            <param name="bytesToConvert">The number of bytes to use</param>
            <returns>The value built from the given bytes</returns>
        </member>
        <member name="M:Common.EventViewer.CreateSource(System.String,System.String,System.Int32,System.String)">
            <summary>
            Creates a Source in the given log plus registries the message file dll associated to this source.
            </summary>
            <param name="sourceName">The name of the Source</param>
            <param name="msgFilePath">The path to the message resource dll.</param>
            <param name="categoryCount">The number of categories in the message resource dll</param>
            <param name="logName">The Name of the Log</param>
            <exception cref="T:System.ArgumentException">
            This is thrown when the logName does not match an already existing sourceName associated with a different Log.
            Note that the "ParamName" property will contain the name of the existing Log that this source is associated with.
            </exception>
        </member>
        <member name="F:Common.FileUlts.MAX_PATH">
            <summary>Maximum path length</summary>
        </member>
        <member name="F:Common.FileUlts.NO_ERROR">
            <summary>No error</summary>
        </member>
        <member name="F:Common.FileUlts.ERROR_ACCESS_DENIED">
            <summary>Access denied</summary>
        </member>
        <member name="F:Common.FileUlts.ERROR_WRONG_LEVEL">
            <summary>Access denied</summary>
        </member>
        <member name="F:Common.FileUlts.ERROR_MORE_DATA">
            <summary>More data available</summary>
        </member>
        <member name="F:Common.FileUlts.ERROR_NOT_CONNECTED">
            <summary>Not connected</summary>
        </member>
        <member name="F:Common.FileUlts.UNIVERSAL_NAME_INFO_LEVEL">
            <summary>Level 1</summary>
        </member>
        <member name="F:Common.FileUlts.MAX_SI50_ENTRIES">
            <summary>Max extries (9x)</summary>
        </member>
        <member name="T:Common.FileUlts.UNIVERSAL_NAME_INFO">
            <summary>Unc name</summary>
        </member>
        <member name="M:Common.FileUlts.WNetGetUniversalName(System.String,System.Int32,Common.FileUlts.UNIVERSAL_NAME_INFO@,System.Int32@)">
            <summary>Get a UNC name</summary>
        </member>
        <member name="M:Common.FileUlts.WNetGetUniversalName(System.String,System.Int32,System.IntPtr,System.Int32@)">
            <summary>Get a UNC name</summary>
        </member>
        <member name="M:Common.FileUlts.IsValidFilePath(System.String)">
            <summary>
            Returns true if fileName is a valid local file-name of the form:
            X:\, where X is a drive letter from A-Z
            </summary>
            <param name="fileName">The filename to check</param>
            <returns></returns>
        </member>
        <member name="M:Common.FileUlts.PathToUnc(System.String)">
            <summary>
            Returns the UNC path for a mapped drive or local share.
            </summary>
            <param name="fileName">The path to map</param>
            <returns>The UNC path (if available)</returns>
        </member>
        <member name="P:Common.Functions.DomainFQ">
            <summary>
            Returns the fully qualified Domain Name
            </summary>
        </member>
        <member name="P:Common.Functions.DomainName">
            <summary>
            Returns the Domain Name
            </summary>
        </member>
        <member name="P:Common.Functions.HostFQDN">
            <summary>
            Returns the fully qualified Host name or just the host name in case there is no domain.
            </summary>
        </member>
        <member name="P:Common.Functions.HostFullName">
            <summary>
            Returns either the FQDN with Host or the Domain\Host format or just the host name
            </summary>
        </member>
        <member name="P:Common.Patterns.ExceptionEventArgs.NotificationOnly">
            <summary>
            If NotificationOnly is true, the exception is not re-thrown regardless of the value of ThrowException!
            </summary>
        </member>
        <member name="P:Common.IReflectionInfo.IsIndexingProperty">
            <summary>
            Returns true to indicate that this item is a Indexing Property (Item).
            
            Note that IsProperty will return false and IsMethod will return true when this property is true.
            </summary>
        </member>
        <member name="P:Common.IReflectionInfo.ObjectValueType">
            <summary>
            Same as Return Type for a Property or Method
            </summary>
        </member>
        <member name="P:Common.IReflectionInfo.BaseType">
            <summary>
            Same as DeclaringType for a PropertyInfo/MethodInfo
            </summary>
        </member>
        <member name="M:Common.LinqExtensions.IsMultiple``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns true if there are more then one occurrence of the item in the source
            </summary>
            <typeparam name="T">Source collection&apos;s type</typeparam>
            <param name="source">Source colleciton that will be selected</param>
            <returns>
            Returns true when more than one occurrence exists in the source collection or false otherwise 
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.HasAtLeastOneElement``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns true if there are at least one element in the source.
            </summary>
            <typeparam name="T">Source collection&apos;s type</typeparam>
            <param name="source">Source colleciton that will be selected</param>
            <returns>Returns true if at least one element is persent in the colleciton, False otherwise</returns>
        </member>
        <member name="M:Common.LinqExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns true if collection has no elements.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <returns>True to indicate that the collection has no elements</returns>
        </member>
        <member name="M:Common.LinqExtensions.SelectWithPrevious``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``1})">
            <summary>
            Selects the current and prior elements in the collection.
            </summary>
            <typeparam name="TSource">Source collection&apos;s type</typeparam>
            <typeparam name="TResult">Return type</typeparam>
            <param name="source">Source colleciton that will be selected</param>
            <param name="projection">
            The function to apply to each source elements. 
            
                The first parameter of the function represents the first element upon initial entry and the prior element on additional iterations. 
                The second parameter of the function represents the second element upon initial entry and the currently selected element on additional iterations.
                The third parameter is the returned result of type TResult.
            </param>
            <returns>A collection of transfored elements based on the projection function</returns>
            <example>
            <code>
                var list = new List&lt;DateTime&gt;() { new DateTime(2012, 01, 01), new DateTime(2012, 02, 01), new DateTime(2013, 01, 01), new DateTime(2013, 02, 01)};
                var query = list.SelectWithPrevious((prior, current) => new { Kind = current.Kind, Prior = prior, Current = current, DateDiff = (current - prior).Days });
                
                /*
                    This code produces the following output:
                    
                    IEnumerable&lt;&gt; (3 items) 
                    Kind        Prior                   Current                 DateDiff
                    Unspecified 1/1/2012 12:00:00 AM    2/1/2012 12:00:00 AM    31 
                    Unspecified 2/1/2012 12:00:00 AM    1/1/2013 12:00:00 AM    335 
                    Unspecified 1/1/2013 12:00:00 AM    2/1/2013 12:00:00 AM    31  
               */
            </code>
                
            </example>
        </member>
        <member name="M:Common.LinqExtensions.SelectWithIndex``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
            <summary>
            Selects the current element with it&apos;s assocated index within the collection.
            </summary>
            <typeparam name="TSource">Source collection&apos;s type</typeparam>
            <typeparam name="TResult">Return type</typeparam>
            <param name="source">Source colleciton that will be selected</param>
            <param name="projection">
            The function to apply to each source elements. 
            
                The first parameter of the function represents the selected element. 
                The second parameter of the function represents the selected element&apos;s index within the collection.
                The third parameter is the returned result of type TResult.
            </param>
            <returns>A collection of transfored elements based on the projection function</returns>
            <example>
            <code>
                var list = new List&lt;DateTime&gt;() { new DateTime(2012, 01, 01), new DateTime(2012, 02, 01), new DateTime(2013, 01, 01), new DateTime(2013, 02, 01)};
                var query = list.SelectWithIndex((current, index) => new { Current = current, Index = index });
                
                /*
                    This code produces the following output:
                    
                    IEnumerable&lt;&gt; (4 items) 
                    Current                 Index   
                    1/1/2012 12:00:00 AM    0
                    2/1/2012 12:00:00 AM    1
                    1/1/2013 12:00:00 AM    2
                    2/1/2013 12:00:00 AM    3
               */
            </code>
                
            </example>
            <remarks>
                In .Net 4.5 framework Linq Select method now has a version that contains the index. 
            </remarks>
        </member>
        <member name="M:Common.LinqExtensions.GetRange``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Func{``0,System.Int32,``1})">
            <summary>
            Returns a sub-range within the collection based on startIndex and nbrElements. 
            Each element with the startIndex and nbrElments can be transformed with the projection expression.
            </summary>
            <typeparam name="TSource">Element Type within the Collection</typeparam>
            <typeparam name="TResult">New Element Type transformed within the result collection</typeparam>
            <param name="source">source collection</param>
            <param name="startIndex">
            Starting index within the source collection. If index is out of range, an empty collection is returned.        
            </param>
            <param name="nbrElements">
            Number of elements to included in the result collection.
            
            The number of elements can be greater then the resulting collection. 
            </param>
            <param name="projection">
            Expression used to transform TSource element.
            </param>
            <returns>
            Result collection or an empty collection
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.GetRange``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Int32,``1})">
            <summary>
            Returns a sub-range within the collection based on startIndex. 
            Each element with the startIndex and nbrElments can be transformed with the projection expression.
            </summary>
            <typeparam name="TSource">Element Type within the Collection</typeparam>
            <typeparam name="TResult">New Element Type transformed within the result collection</typeparam>
            <param name="source">source collection</param>
            <param name="startIndex">
            Starting index within the source collection. If index is out of range, an empty collection is returned.        
            </param>        
            <param name="projection">
            Expression used to transform TSource element.
            </param>
            <returns>
            Result collection or an empty collection
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.GetRange``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Int32,System.Boolean},System.Func{``0,System.Int32,``1})">
            <summary>
            Returns a sub-range within the collection based on startIndex. 
            Each element with the startIndex and nbrElments can be transformed with the projection expression.
            </summary>
            <typeparam name="TSource">Element Type within the Collection</typeparam>
            <typeparam name="TResult">New Element Type transformed within the result collection</typeparam>
            <param name="source">source collection</param>
            <param name="startIndex">
            Starting index within the source collection. If index is out of range, an empty collection is returned.        
            </param>
            <param name="until">
            Predicate used to determine end of iteration (returns true). First argument is the element and the second is the index.
            </param>
            <param name="projection">
            Expression used to transform TSource element.
            </param>
            <returns>
            Result collection or an empty collection
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.GetRange``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Returns a sub-range within the collection based on startIndex and nbrElements. 
            </summary>
            <typeparam name="TSource">Element Type within the Collection</typeparam>        
            <param name="source">source collection</param>
            <param name="startIndex">
            Starting index within the source collection. If index is out of range, an empty collection is returned.       
            </param>
            <param name="nbrElements">
            Number of elements to included in the result collection.
            
            The number of elements can be greater then the resulting collection. 
            </param>
            <returns>
            Result collection or an empty collection
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.GetRange``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns a sub-range within the collection based on startIndex for all remaining items.
            </summary>
            <typeparam name="TSource">Element Type within the Collection</typeparam>        
            <param name="source">source collection</param>
            <param name="startIndex">
            Starting index within the source collection. If index is out of range, an empty collection is returned.      
            </param>        
            <returns>
            Result collection or an empty collection
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.GetRange``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Returns a sub-range within the collection based on startIndex. 
            Each element with the startIndex and nbrElments can be transformed with the projection expression.
            </summary>
            <typeparam name="TSource">Element Type within the Collection</typeparam>       
            <param name="source">source collection</param>
            <param name="startIndex">
            Starting index within the source collection. If index is out of range, an empty collection is returned.        
            </param>
            <param name="until">
            Predicate used to determine end of iteration (returns true). First argument is the element and the second is the index.
            </param>       
            <returns>
            Result collection or an empty collection
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.CopyTo``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,``0[]@,System.Int32)">
            <summary>
            This will copy the source range into the target array and if needed the target array will grow only if the source elements cannot otherwise be added.
            </summary>
            <typeparam name="T">The elemnet type of the array and range</typeparam>
            <param name="target">The array that will be updated/appended to</param>
            <param name="targetStartingIndex">The starting index into the array where the elements from source will be added from</param>
            <param name="source">The source range where the elements will be taken copied from</param>
            <param name="sourceStartingIndex">The starting index into the source range</param>
            <param name="sourceCount">The number of elements that will be copied from the source</param>
            <example>
            <code>
            	var targetArray = new int[] { 1, 2, 3, 4, 5 };
            	var sourceList = new List&lt;int&gt;() { 5, 6, 7, 8, 9 };
            	
            	sourceList.CopyTo(1, 3, ref targetArray, 5);
            	
            	Dump(targetArray); // { 1, 2, 3, 4, 5, 6, 7, 8 }
            	
            	targetArray = new int[] { 1, 2, 3, 4, 5 };
            	sourceList = new List&lt;int&gt; { 3, 4, 5, 6, 7, 8, 9 };
            	
            	sourceList.CopyTo(0, 6, ref targetArray);
            	
            	Dump(targetArray); // { 1, 2, 3, 4, 5, 6, 7, 8 }
            
            </code>
            </example>
            <seealso cref="M:Common.ArrayExtensions.AddRange``1(``0[],System.Int32,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)"/>
        </member>
        <member name="M:Common.LinqExtensions.CopyTo``1(System.Collections.Generic.IEnumerable{``0},``0[]@,System.Int32)">
            <summary>
            This will copy the source range into the target array and if needed the target array will grow only if the source elements cannot otherwise be added.
            </summary>
            <typeparam name="T">The elemnet type of the array and range</typeparam>
            <param name="target">The array that will be updated/appended to</param>
            <param name="targetStartingIndex">The starting index into the array where the elements from source will be added from</param>
            <param name="source">The source range where the elements will be taken copied from</param>		
            <example>
            <code>
            	var targetArray = new int[] { 1, 2, 3, 4, 5 };
            	var sourceList = new List&lt;int&gt;() { 6, 7, 8, 9 };
            	
            	sourceList.CopyTo(ref targetArray, 0);
            	
            	Dump(targetArray); // { 6, 7, 8, 9, 5 }
            			
            </code>
            </example>
            <seealso cref="M:Common.ArrayExtensions.AddRange``1(``0[]@,System.Int32,System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)"/>
        </member>
        <member name="M:Common.LinqExtensions.CopyTo``1(System.Collections.Generic.IEnumerable{``0},``0[]@)">
            <summary>
            This will copy the source range into the target array and if needed the target array will grow only if the source elements cannot otherwise be added.
            </summary>
            <typeparam name="T">The elemnet type of the array and range</typeparam>
            <param name="target">The array that will be updated/appended to</param>
            <param name="source">The source range where the elements will be taken copied from</param>		
            <example>
            <code>
            	var targetArray = new int[] { 1, 2, 3, 4, 5 };
            	var sourceList = new List&lt;int&gt;() { 6, 7, 8, 9 };
            	
            	sourceList.CopyTo(ref targetArray);
            	
            	Dump(targetArray); // { 6, 7, 8, 9, 5 }
            			
            </code>
            </example>
        </member>
        <member name="M:Common.LinqExtensions.Concat``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Concatenates (Adds) item to the end of the collection. 
            </summary>
            <typeparam name="TSource">a collection of TSource type items</typeparam>
            <param name="source">The collection used to add/concatenate the item into</param>
            <param name="concatItemToEndOfSource">Item to be added to end of the collection</param>
            <returns>A new collection where item was added. The source (original) collection was NOT modified!</returns>
        </member>
        <member name="M:Common.LinqExtensions.Append``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Appends (Adds) an set of items to the end of the collection.
            </summary>
            <typeparam name="TSource">a collection of TSource type items</typeparam>
            <param name="source">The collection used to add/addend items into</param>
            <param name="itemsToAppend">A set of items that will be appended</param>
            <returns>A new collection where the items have been appended to the end. The source (original) collection was NOT modified!</returns>
        </member>
        <member name="M:Common.LinqExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Prepends (Adds) an set of items to the beginning of the collection.
            </summary>
            <typeparam name="TSource">a collection of TSource type items</typeparam>
            <param name="source">The collection used to prepend items into</param>
            <param name="itemsToPrepend">A set of items that will be prepended</param>
            <returns>A new collection where the items have been prepended to the beginning. The source (original) collection was NOT modified!</returns>
        </member>
        <member name="M:Common.LinqExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the Index within the collection of when the conditionalExpression function returns true or -1 to indicate that no items within the collection satisfied the conditionalExpression.
            </summary>
            <typeparam name="TSource">The collection type</typeparam>
            <param name="source">The collection used to determine the index based on the conditionalExpression</param>
            <param name="conditionalExpression">The expression used to return the index</param>
            <returns>
            The index or -1 to indicate nothing within the collection that stratified the conditionalExpression.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.WithContext``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Selects the prior, current, and next elements in the collection returning a collection of ElementWithContext structures.
            </summary>
            <typeparam name="T">Source element&apos;s data type</typeparam>
            <param name="source">A collection of elements</param>
            <returns>a collection of ElementWithContext structures</returns>
            <remarks>
                Upon initial iteration the Previous property of the ElementWithContext structure will contain the default value of the element&apos;s data type.
                Upon the last iteration the Next property of the ElementWithContext structure will contain the default value of the element&apos;s data type.
                
                To determine if a value type is valid upon initial and/or last iteration a nullable type can be used.
            </remarks>
            <example>
            <code>
            var list = new List&lt;DateTime?&gt;() { new DateTime(2012, 01, 01), new DateTime(2012, 02, 01), new DateTime(2013, 01, 01)};
            var query = list.WithContext();
            
                /*
                    This code produces the following output:
                    
                    IEnumerable&lt;ElementWithContext&lt;DateTime?&gt;&gt; (3 items)  
                    Previous                Current                 Next                     
                    null                    1/1/2012 12:00:00 AM    2/1/2012 12:00:00 AM    
                    1/1/2012 12:00:00 AM    2/1/2012 12:00:00 AM    1/1/2013 12:00:00 AM    
                    2/1/2012 12:00:00 AM    1/1/2013 12:00:00 AM    null                    
               */
                       
            </code>
            </example>
        </member>
        <member name="M:Common.LinqExtensions.Scalar``2(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,``1[],System.Boolean},System.Func{``1,``1,``1},``1)">
            <summary>
            Returns the Scalar Value of a collection of objects across multiple fields.
            </summary>
            <typeparam name="TSource">The type of object within the collection</typeparam>
            <typeparam name="TElement">Element type of the field within the object</typeparam>
            <param name="source">Collection of objects</param>
            <param name="nbrFields">The number of fields used to determine the Scalar value</param>
            <param name="getValueAccessor">
            The function that is used to access the fields with the object. 
            
            This function will take two arguments. They are:
                The source Object from the collection
                An array of element of TSource types where each index represents one of the fields used to determine the Scalar Value.
                Note that the previous values stored within the array will be presented on the next iteration of the collection.
                
            This function should return true to indicate that it should be used in the call to the Scalar function.
            </param>
            <param name="scalarFuncation">
            The Scalar function used to determine the returned value.
            
            The Scalar function takes two arguments. They are:
                The first argument is the previous Scalar value from the last call the the Scalar function.
                The second argument is the element from within the accessors array populated by the getValueAccessor function. 
                
            This function returns a value based on the arguments.
            </param>
            <param name="defaultInitialValue">
            The initial default value used in the initial call of the Scalar Function (first argument).
            
            Note that the accessor array will contain the data type&apos;s default value on initial call to the getValueAccessor function (second argument).
            </param>
            <returns>
            The Scalar value based on a set of fields within a collection.
            </returns>
            <example>
                <code>
                    var source = new Tuple&lt;int, int&gt;[] { new Tuple&lt;int, int&gt;(){ 1 , 2 },
                                                            new Tuple&lt;int, int&gt;(){ 3 , 4 },
                                                            new Tuple&lt;int, int&gt;(){ 5 , 6 },
                                                            new Tuple&lt;int, int&gt;(){ 7 , 8 },
                                                            new Tuple&lt;int, int&gt;(){ 9 , 10 } };
                    var minValue = source.Scalar(2, //Two fields (Item1 and Item2 within Tuple)
                                                    (tupleItem, accessorArray) =&gt; { accessorArray[0] = tupleItem.Item1; accessorArray[1] = tupleItem.Item2; return true },
                                                    (minValue, tupleValue) =&gt; Math.Min(minValue, tupleValue) );
                                                    
                    var maxValue = source.Scalar(2, //Two fields (Item1 and Item2 within Tuple)
                                                    (tupleItem, accessorArray) =&gt; { accessorArray[0] = tupleItem.Item1; accessorArray[1] = tupleItem.Item2; return true },
                                                    (minValue, tupleValue) =&gt; Math.Max(minValue, tupleValue) );
                </code>
            </example>
        </member>
        <member name="M:Common.LinqExtensions.Scalar2``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1[],System.Boolean},System.Func{``1,``1,``1},System.Func{``1,``1,``1},``1,``1)">
             <summary>
             Returns a Tuple value where the first item is based on Scalar Function 1 and the second item is based on Scalar Function 2.
             </summary>
             <typeparam name="TSource">The type of object within the collection</typeparam>
             <typeparam name="TElement">Element type of the field within the object</typeparam>
             <param name="source">The collection that will be used to determine the Scalar values</param>
             <param name="getValueAccessor">
             The access function used to retrieve the values used by the Scalar functions.
             
             This function take two arguments. They are:
                 The first argument is the collection element item.
                 The second argument is a two-dimensional array:
                     the first element would be the value used with the Scalar function one
                     the second element would be the value used with the Scalar function two
                    Note that previous values from the last iteration will be presented on the current iteration.
                     
                 This function should return true to indicate that these values should be used with the Scalar functions.
             </param>
             <param name="scalarFunction1">
            The Scalar function used to determine the first item with the returned Tuple value.
             
             The Scalar function takes two arguments. They are:
                 The first argument is the previous Scalar one value from the last call the the Scalar function.
                 The second argument is the element from within the accessors array populated by the getValueAccessor function. 
                 
             This function returns a value based on the arguments.
             </param>
             <param name="scalarFunction2">
            The Scalar function used to determine the second item with the returned Tuple value.
             
             The Scalar function takes two arguments. They are:
                 The first argument is the previous Scalar two value from the last call the the Scalar function.
                 The second argument is the element from within the accessors array populated by the getValueAccessor function. 
                 
             This function returns a value based on the arguments.
             </param>
             <param name="defaultInitalValue1">
             The initial default value used in the initial call of the first Scalar Function (first argument). 
             </param>
             <param name="defaultInitialValue2">
             The initial default value used in the initial call of the second Scalar Function (first argument). 
             </param>
             <returns>
             Returns a Tuple where Item1 is the Scalar one Function&apos;s value and Item2 is the Scalar two Function&apos;s value.
             If the collection is empty, a Tuple is returned where Item1 and Item2 are their default initial values (as defined by the passed arguments).
             </returns>
             <example>
                 <code>
                     var source = new Tuple&lt;int, int&gt;[] { new Tuple&lt;int, int&gt;(){ 1 , 2 },
                                                             new Tuple&lt;int, int&gt;(){ 3 , 4 },
                                                             new Tuple&lt;int, int&gt;(){ 5 , 6 },
                                                             new Tuple&lt;int, int&gt;(){ 7 , 8 },
                                                             new Tuple&lt;int, int&gt;(){ 9 , 10 } };
                     var maxminValue = source.Scalar((tupleItem, accessorArray) =&gt; { accessorArray[0] = tupleItem.Item1; accessorArray[1] = tupleItem.Item2; return true },
                                                     (maxValue, valueOne) =&gt; Math.Max(maxValue, valueOne) 
                                                     (minValue, valueTwo) =&gt; Math.Min(minValue, valueTwo) );
                                                     
                 </code>
             </example>
        </member>
        <member name="M:Common.LinqExtensions.Max(System.Collections.Generic.IEnumerable{Common.DateTimeRange},System.Func{Common.DateTimeRange,System.Boolean})">
            <summary>
            Returns the Maximum value for the items in the collection that are selected by the selector function.
            </summary>
            <param name="source">a collection of itmes where the maximum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be considered for selection.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>       
            <returns>
            The Maximum value of the items selected.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,Common.DateTimeRange})">
            <summary>
            Returns the Maximum value for the items in the collection that are selected by the selector function and transformed by the transformer.
            </summary>
            <typeparam name="TSource">data type of the items within the collection</typeparam>
            <param name="source">a collection of itmes where the maximum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be considered for selection to determine if it should be transformed.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>
            <param name="transformer">
            A function that will transform the item into the result type. Note that only items that have been selected will be presented to the transformer function.
            </param>        
            <returns>
            The Maximum value of the items selected and transformed.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Min(System.Collections.Generic.IEnumerable{Common.DateTimeRange},System.Func{Common.DateTimeRange,System.Boolean})">
            <summary>
            Returns the Minimum value for the items in the collection that are selected by the selector function.
            </summary>
            <param name="source">a collection of itmes where the minimum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be selected.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>       
            <returns>
            The Minimum value of the items selected.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,Common.DateTimeRange})">
            <summary>
            Returns the Minimum value for the items in the collection that are selected by the selector function and transformed by the transformer.
            </summary>
            <typeparam name="TSource">data type of the items within the collection</typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="source">a collection of itmes where the minimum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be considered for selection to determine if it should be transformed.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>
            <param name="transformer">
            A function that will transform the item into the result type. Note that only items that have been selected will be presented to the transformer function.
            </param>        
            <returns>
            The Minimum value of the items selected and transformed.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.MaxMin(System.Collections.Generic.IEnumerable{Common.DateTimeRange})">
            <summary>
            Returns the Max and Min DateTime of the values within the collection.
            </summary>
            <param name="source">Collection of DateTimeRange values</param>
            <returns>
            A tuple where the Item1 is the Max DateTime and Item2 is the Min DateTime.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.MaxRange(System.Collections.Generic.IEnumerable{Common.DateTimeRange})">
            <summary>
            Returns the Max Range using the DateTimeRange.Maximum function.
            </summary>
            <param name="source">Collection of DateTimeRanges</param>
            <returns>
            The maximum DateTimrRange or Empty DateTimeRange if the Collection is empty.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.MinRange(System.Collections.Generic.IEnumerable{Common.DateTimeRange})">
            <summary>
            Returns the Min Range using the DateTimeRange.Minimal function.
            </summary>
            <param name="source">Collection of DateTimeRanges</param>
            <returns>
            The minimal DateTimrRange or Empty DateTimeRange if the Collection is empty.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.MaxMinRange(System.Collections.Generic.IEnumerable{Common.DateTimeRange})">
            <summary>
            Returns the Max and Min DateTime of the values within the collection.
            </summary>
            <param name="source">Collection of DateTimeRange values</param>
            <returns>
            A tuple where the Item1 is the Max DateTime and Item2 is the Min DateTime.
            
            If the collection is empty, Two DateTimeRange Empty items will be returned.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.FirstWithPrevious``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Boolean},System.Func{``0,``0,``1})">
            <summary>
            Returns the first and previous items that satifice the source function. If no items are found, the default value of the projection item (TResult) is returned.
            </summary>
            <typeparam name="TSource">The data type of the items within the collection</typeparam>
            <typeparam name="TResult">The resulting data type from the projection function</typeparam>
            <param name="source">A collection of items where an item might be selected</param>
            <param name="selector">
            The function used to select the first item. Return true to indicate that the item should be selected.
            
            Note that the first argument is the prior item, and the second is the current item.
            </param>
            <param name="projection">
            The function used to create the resulting item. Note that this is only called when the selector returns true.
            
            Note that the first argument is the prior item and the second item is the current item.
            </param>
            <returns>
            The transformed selected item or the resulting item data type&apos;s default value if nothing was selected.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.FirstWithIndex``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean},System.Func{``0,System.Int32,``1})">
            <summary>
            Returns the first item selected by the selector function. If no items are found, the default value of the projection item (TResult) is returned.
            </summary>
            <typeparam name="TSource">The data type of the items within the collection</typeparam>
            <typeparam name="TResult">The resulting data type from the projection function</typeparam>
            <param name="source">A collection of items where an item might be selected</param>
            <param name="selector">
            The function used to select the first item. Return true to indicate that the item should be selected.
            
            Note that the first argument is the current item and the second argument is the current index of this item within the collection.
            </param>
            <param name="projection">
            The function used to create the resulting item. Note that this is only called when the selector returns true.
            
            Note that the first argument is the current item and the second argument is the current index of this item within the collection.
            </param>
            <returns>
            The transformed selected item or the resulting item data type&apos;s default value if nothing was selected.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.LastWithIndex``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean},System.Func{``0,System.Int32,``1})">
            <summary>
            Returns the last item selected by the selector function. If no items are found, the default value of the projection item (TResult) is returned.
            </summary>
            <typeparam name="TSource">The data type of the item within the collection</typeparam>
            <typeparam name="TResult">The resulting data type</typeparam>
            <param name="source">The collection of items used to determine the last item</param>
            <param name="selector">
            The function used to select the item from within the collection.
            
            This function takes two arguments:
                The first argument is the current item within the collection.
                The second argument is the current index within the collection.
                
            This function returns true to indicate that this item should be selected. Once selected the projection function is called.   
            
            Note that the collection items are called in reverse order.
            </param>
            <param name="projection">
            The function that is used to transform the selected item into the resulting item.
            
            This function takes two arguments:
                The first argument is the selected item within the collection.
                The second argument is the selected index within the collection.
                
            This function returns the new resulting item.
            </param>
            <returns>
            The resulting item based on the last item selected or the resulting item data type&apos;s default value if nothing was selected.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Executes action for each iteration of item within collection.
            </summary>
            <typeparam name="T">type of Element within the collection</typeparam>
            <param name="collection">collection that will be iterated over</param>
            <param name="action">action that will be execute on each element within the collection</param>
        </member>
        <member name="M:Common.LinqExtensions.For``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Action{System.Int32,``0})">
            <summary>
            Executes action for each iteration of item within collection.
            </summary>
            <typeparam name="T">type of Element within the collection</typeparam>
            <param name="collection">collection that will be iterated over</param>
            <param name="startIndex">Starting Index</param>
            <param name="action">action that will be execute on each element within the collection. The first argument is the index and the second is the element.</param>
        </member>
        <member name="M:Common.LinqExtensions.For``1(System.Collections.Generic.IEnumerable{``0},System.Int32@,System.Action{System.Int32,``0})">
            <summary>
            Executes action for each iteration of item within collection.
            </summary>
            <typeparam name="T">type of Element within the collection</typeparam>
            <param name="collection">collection that will be iterated over</param>
            <param name="nIndex">Index used to refrence collection</param>
            <param name="action">action that will be execute on each element within the collection. The first argument is the index and the second is the element.</param>
        </member>
        <member name="M:Common.LinqExtensions.For``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{System.Int32,``0,System.Boolean},System.Action{System.Int32,``0})">
            <summary>
            Executes action for each iteration of item within collection.
            </summary>
            <typeparam name="T">type of Element within the collection</typeparam>
            <param name="collection">collection that will be iterated over</param>
            <param name="startIndex">Starting Index</param>
            <param name="until">A predict that determines when itreation ends (returns true). If index is outside the range of the collection the default value is given. The first argument is the index and the second is the element.</param>
            <param name="action">action that will be execute on each element within the collection. The first argument is the index and the second is the element (if index is outside the range of the collection, the element&apos;s default value is used).</param>
        </member>
        <member name="M:Common.LinqExtensions.For``1(System.Collections.Generic.IEnumerable{``0},System.Int32@,System.Func{System.Int32,``0,System.Boolean},System.Action{System.Int32,``0})">
            <summary>
            Executes action for each iteration of item within collection.
            </summary>
            <typeparam name="T">type of Element within the collection</typeparam>
            <param name="collection">collection that will be iterated over</param>
            <param name="nIndex">Starting Index that is passed as a reference</param>
            <param name="until">A predict that determines when itreation ends (returns true). If index is outside the range of the collection the default value is given. The first argument is the index and the second is the element.</param>
            <param name="action">action that will be execute on each element within the collection. The first argument is the index and the second is the element (if index is outside the range of the collection, the element&apos;s default value is used).</param>
        </member>
        <member name="M:Common.LinqExtensions.ConvertAll``2(System.Collections.Generic.IEnumerable{``0},System.Converter{``0,``1})">
            <summary>
            Covert all items of type T into an element of type U using the converter delegate.
            </summary>
            <typeparam name="T">the type of element within the collectino</typeparam>
            <typeparam name="U">the type that the element will be converted too</typeparam>
            <param name="collection">an collection of elements of type T</param>
            <param name="converter">A delegate used to convert an element from type T to type U</param>
            <returns>Returns a new collection of type U</returns>
        </member>
        <member name="M:Common.LinqExtensions.Complement``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of elements from colection1 that are NOT contained within collection2.
            </summary>
            <typeparam name="T">type of element within each collection</typeparam>
            <param name="collection1">the collection of elements that are used to determine if they exists in collection2</param>
            <param name="collection2">the collection of elements that are used as the source to check element from collectino1</param>
            <returns>Returns a collection of elements that are NOT found within collection2</returns>
            <example>
            <code>
            	Complement(new int[] {1, 2, 3, 4, 5}, new int[] { 2, 4, 5, 6, 7 }) ==&gt; {1, 3}
            	
            </code>
            </example>
        </member>
        <member name="M:Common.LinqExtensions.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns a collection of elements that are not found within each collections
            </summary>
            <typeparam name="T">type of element within the collections</typeparam>
            <param name="collection1">collection used to determine common elements</param>
            <param name="collection2">collection used to determine common elements</param>
            <returns>A collection of elements that are not found with each collection</returns>
            <example>
            <code>
            	Except(new int[] {1, 2, 3, 4, 5}, new int[] { 2, 4, 5, 6, 7 }) ==&gt; {1, 3, 6, 7}
            </code>
            </example>
        </member>
        <member name="M:Common.LinqExtensions.Sort``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Sorts the collections using the default comparer.
            </summary>
            <typeparam name="T">the type of Eleement within the collection</typeparam>
            <param name="collection">the collection that will be sorted</param>
            <returns>Sorted collection</returns>
        </member>
        <member name="M:Common.LinqExtensions.TakeAllButLast``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Takes all elements except the last element
            </summary>
            <typeparam name="T">the type of Eleement within the collection</typeparam>
            <param name="collection">items with in the collection that are taken excpet the last element</param>
            <returns>A new collection where the last element is NOT taken</returns>
            <remarks>
            To take the last N elements, see SkipLastN.
            </remarks>
        </member>
        <member name="M:Common.LinqExtensions.SkipLastN``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Takes all elements except the last N elements. 
            </summary>
            <typeparam name="T">the type of Eleement within the collection</typeparam>
            <param name="collection">items with in the collection that are taken excpet the last N elements</param>
            <param name="skipLastNElements">Number of elements to skip from the end</param>
            <returns>A new collection where the last N elements have been skipped</returns>
            <remarks>
            This will internally use a Queue object to aid in the skipping process by queuing the the last read N elements. 
            
            To skip only the last element it is recommended to use TakeAllButLast since it does not use a Queue object...
            </remarks>
        </member>
        <member name="M:Common.LinqExtensions.Join``2(System.Collections.Generic.IEnumerable{``0},System.Char,System.Func{``0,``1})">
             <summary>
             Concatenates the members of a constructed System.Collections.Generic.IEnumerable&lt;T&gt;
                 collection of type System.String, using the specified separator between each
                 member.
             </summary>
             <typeparam name="T">data type of the element within the collection</typeparam>
             <typeparam name="U">the new converted value&apos;s data type. Canbe the same as T</typeparam>
             <param name="collection">A collection that contains the objects to concatenate as a string</param>
             <param name="separator">The character to use as a separator.</param>
             <param name="convertFunction"></param>
             <returns>
             A string that consists of the members of values delimited by the separator. If values has no members, the method returns System.String.Empty.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Join``2(System.Collections.Generic.IEnumerable{``0},System.String,System.Func{``0,``1})">
             <summary>
             Concatenates the members of a constructed System.Collections.Generic.IEnumerable&lt;T&gt;
                 collection of type System.String, using the specified separator between each
                 member.
             </summary>
             <typeparam name="T">data type of the element within the collection</typeparam>
             <typeparam name="U">the new converted value&apos;s data type. Canbe the same as T</typeparam>
             <param name="collection">A collection that contains the objects to concatenate as a string</param>
             <param name="separator">The string to use as a separator.</param>
             <param name="convertFunction"></param>
             <returns>
             A string that consists of the members of values delimited by the separator. If values has no members, the method returns System.String.Empty.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{``1,``2},System.Func{``0,``1},System.Func{``1,``0,``2,``3})">
            <summary>
            Performs an inner join on outer against the inner of type IDictionary using the outerKeySelector&apos;s value against the keyed value of the IDictonary.
            </summary>
            <typeparam name="OValue">outer element type</typeparam>
            <typeparam name="TKey">IDictonary&apos;s keyed value type</typeparam>
            <typeparam name="IValue">IDictonary&apos;s value type</typeparam>
            <typeparam name="TResult">resulting type of the join</typeparam>
            <param name="outer">outer source collection</param>
            <param name="inner">inner dictonary collection</param>
            <param name="outerKeySelector">selector used to return the key that will be used to search the dictionary</param>
            <param name="resultSelector">
            Selector used to return the new element in the new collection.
            First argument is the key that matched the inner dictionary
            Second argument is the associated outer value
            Third argument is the value of the Key-Value pair from the inner dictionary
            Returned value is the new element representing the joined values.
            </param>
            <returns>
            New collection where each element is of type TResult.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.JoinLeftOuter``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{``1,``2},System.Func{``0,``1},System.Func{``1,``0,System.Boolean,``2,``3})">
            <summary>
            Performs an Left Outer join on outer against the inner of type IDictionary using the outerKeySelector&apos;s value against the keyed value of the IDictonary.
            </summary>
            <typeparam name="OValue">outer element type</typeparam>
            <typeparam name="TKey">IDictonary&apos;s keyed value type</typeparam>
            <typeparam name="IValue">IDictonary&apos;s value type</typeparam>
            <typeparam name="TResult">resulting type of the join</typeparam>
            <param name="outer">outer source collection</param>
            <param name="inner">inner dictonary collection</param>
            <param name="outerKeySelector">selector used to return the key that will be used to search the dictionary</param>
            <param name="resultSelector">
            Selector used to return the new element in the new collection.
            First argument is the key that matched the inner dictionary
            Second argument is the associated outer value
            Third argument is a boolean indicating if the key was found in the dictionary
            Fourth argument is the value of the Key-Value pair from the inner dictionary or the default value of OValue in the case the key was not found.
            Returned value is the new element representing the joined values.
            </param>
            <returns>
            New collection where each element is of type TResult.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.JoinLeftOuter``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Boolean,``1,``3})">
            <summary>
            Performs an Left Outer join on outer against the inner using the outerKeySelector&apos;s and innerKeySelector&apos;s values using the Equal compairor.
            </summary>
            <typeparam name="OValue">outer element type</typeparam>
            <typeparam name="TKey">Key type that will be used for the compairison</typeparam>
            <typeparam name="IValue">inner element type</typeparam>
            <typeparam name="TResult">resulting type of the join</typeparam>
            <param name="outer">outer collection</param>
            <param name="inner">inner collection</param>
            <param name="outerKeySelector">selector used to return the key from the outer</param>
            <param name="innerKeySelector">selector used to return the key from the inner</param>
            <param name="resultSelector">
            Selector used to return the new element in the new collection.
            First argument is the associated outer value
            Second argument is a boolean indicating if the key was found in the inner collection
            Third argument is the value associated inner value
            Returned value is the new element representing the joined values.
            </param>
            <returns>
            New collection where each element is of type TResult.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.DuplicatesWithRecord``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns any found duplicates with the associated fields of the source items (record). 
            </summary>
            <typeparam name="T">Element type of the source collection</typeparam>
            <typeparam name="U">Element type of the item being grouped</typeparam>
            <param name="collection">Source Collection used to determine if there are any duplicates within this collection</param>
            <param name="groupSelector">The function that is used to determine which fields will be grouped</param>
            <returns>A KeyValuePair collection where the Key is the duplicated item based on the groupSelector and the Value are a list of the associated records</returns>
            <example>
                <code>
                    class MyRecord { public string A; public string B; public int C; public int D;};
                    
                    var dupCollection = new List&lt;MyRecord&gt;() { new MyRecord() { A="A", B="B", C = 1, D = 2 },
                                                                        new MyRecord() { A="A", B="B", C = 3, D = 4 },
                                                                        new MyRecord() { A="C", B="D", C = 5, D = 6 },
                                                                        new MyRecord() { A="E", B="F", C = 7, D = 8 },
                                                                        new MyRecord() { A="E", B="F", C = 9, D = 10 }};
                                                                    
                    var findDups = dupCollection.DuplicatesWithRecord(record => new { record.A, record.B } );
                    
                        findDups.Dump(); 
                        // { Key={"A", "B" }, Value={ { A="A", B="B", C = 1, D = 2 },
                        //                              { A="A", B="B", C = 3, D = 4 } } },
                        // { Key={"E", "F" }, Value={ { A="E", B="F", C = 7, D = 8 },
                        //                              { A="E", B="F", C = 9, D = 10 } } },
                </code>
            </example>
        </member>
        <member name="M:Common.LinqExtensions.DuplicatesWithCount``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns any found duplicates with the number of occurrences.
            </summary>
            <typeparam name="T">Element type of the source collection</typeparam>
            <typeparam name="U">Element type of the item being grouped</typeparam>
            <param name="collection">Source Collection used to determine if there are any duplicates within this collection</param>
            <param name="groupSelector">The function that is used to determine which fields will be grouped</param>       
            <returns>A KeyValuePair collection where the Key is the duplicated item based on the groupSelector and the Value the number of occurrences of the duplicated item</returns>        
            <example>
                <code>
                    class MyRecord { public string A; public string B; public int C; public int D;};
                    
                    var dupCollection = new List&lt;MyRecord&gt;() { new MyRecord() { A="A", B="B", C = 1, D = 2 },
                                                                        new MyRecord() { A="A", B="B", C = 3, D = 4 },
                                                                        new MyRecord() { A="C", B="D", C = 5, D = 6 },
                                                                        new MyRecord() { A="E", B="F", C = 7, D = 8 },
                                                                        new MyRecord() { A="E", B="F", C = 9, D = 10 },
                                                                        new MyRecord() { A="E", B="F", C = 11, D = 12 }};
                                                                    
                    var findDups = dupCollection.DuplicatesWithCount(record => new { record.A, record.B } );
                    
                        findDups.Dump(); 
                        // { Key={"A", "B" }, Value=2 },
                        // { Key={"E", "F" }, Value=3 },
                </code>
            </example>
        </member>
        <member name="M:Common.LinqExtensions.DuplicatesRemoved``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Returns a new enumerable where the duplicates has been removed. Note that the first occurrence of the duplicate is always returned. 
            </summary>
            <typeparam name="T">Element type of the source collection</typeparam>
            <typeparam name="U">Element type of the item being grouped</typeparam>
            <param name="collection">Source Collection used to determine if there are any duplicates within this collection</param>
            <param name="groupSelector">The function that is used to determine which fields will be grouped</param>       
            <returns>A distinct collection of items where the first occurrence of the duplicate is part of the colleciton (remainder of the duplicates are discoarded)</returns>        
            <example>
                <code>
                    class MyRecord { public string A; public string B; public int C; public int D;};
                    
                    var dupCollection = new List&lt;MyRecord&gt;() { new MyRecord() { A="A", B="B", C = 1, D = 2 },
                                                                        new MyRecord() { A="A", B="B", C = 3, D = 4 },
                                                                        new MyRecord() { A="C", B="D", C = 5, D = 6 },
                                                                        new MyRecord() { A="E", B="F", C = 7, D = 8 },
                                                                        new MyRecord() { A="E", B="F", C = 9, D = 10 },
                                                                        new MyRecord() { A="E", B="F", C = 11, D = 12 }};
                                                                    
                    var findDups = dupCollection.DuplicatesRemoved(record => new { record.A, record.B } );
                    
                        findDups.Dump(); 
                        // { A="A", B="B", C = 1, D = 2 },
                        // { A="C", B="D", C = 5, D = 6 },
                        // { A="E", B="F", C = 7, D = 8 }
                </code>
            </example>
        </member>
        <member name="T:Common.LinqExtensions.SelectorEqualityComparer`2">
            <summary>
            Defines a generic IEqualityComparer that can be used as a selector and define a Equality function.
            </summary>
            <typeparam name="T">Base object used to obtain the value of Type U based on the selector function</typeparam>
            <typeparam name="U">Object(s) that will be used as the comparer value</typeparam>
            <example>
                Below example uses the member variable "A" as the equality comparer.
            <code>
                public class MyClass
                {
            	    public string A;
                }
                
                void Main()
                {
            	    var x = new MyClass() { A = "One" };
            	    var y = new MyClass() { A = "Two" };
            	
            	    var listA = new List&lt;MyClass&gt;() { x, y};
            	
            	    listA.Contains(y, new SelectorEqualityComparer&lt;MyClass,string&gt;((x1) => x1.A, (x2,y2) => x2 == y2)).Dump();	
                }
            </code>
            
                Returns true.
            </example>
        </member>
        <member name="M:Common.LinqExtensions.SelectorEqualityComparer`2.#ctor(System.Func{`0,`1},System.Func{`1,`1,System.Boolean})">
            <summary>
            Constructor used to create the generic equality comparer
            </summary>
            <param name="selector">Fuction used to select the value that will be compared</param>
            <param name="equalsFunction">Function used to make the actual equality comparision</param>
        </member>
        <member name="M:Common.LinqExtensions.SelectorEqualityComparer`2.#ctor(System.Func{`0,`1})">
            <summary>
            Constructor used to create the generic equality comparer
            </summary>
            <param name="selector">Fuction used to select the value that will be compared</param>
            <remarks>
            This form will use the default object.Equals function for the actual equality comparison.
            </remarks>
        </member>
        <member name="T:Common.LinqExtensions.SelectorStringEqualityComparer`1">
            <summary>
            Defines a generic IEqualityComparer that can be used as a selector that must return a string for equality comparison.
            </summary>
            <typeparam name="T">Base object used to obtain the string value from the selector function</typeparam>        
            <example>
                Below example uses the member variable "A" as the equality comparer.
            <code>
                public class MyClass
                {
            	    public string A;
                }
                
                void Main()
                {
            	    var x = new MyClass() { A = "One" };
            	    var y = new MyClass() { A = "Two" };
            	
            	    var listA = new List&lt;MyClass&gt;() { x, y};
            	
            	    listA.Contains(y, new SelectorStringEqualityComparer&lt;MyClass&gt;((x1) => x1.A).Dump();	
                }
            </code>
            
                Returns true.
            </example>
        </member>
        <member name="M:Common.LinqExtensions.SelectorStringEqualityComparer`1.#ctor(System.Func{`0,System.String})">
            <summary>
            Constructor used to create the generic equality comparer
            </summary>
            <param name="selector">Fuction used to select the string that will be compared</param>           
        </member>
        <member name="T:Common.LinqExtensions.SelectorComparer`2">
            <summary>
            Defines a generic IComparer that can be used as a selector and define a comparer function.
            </summary>
            <typeparam name="T">Base object used to obtain the value of Type U based on the selector function</typeparam>
            <typeparam name="U">Object(s) that will be used to as the comparing value(s)</typeparam>
            <example>
                Below example uses the member variable "A" as the equality comparer.
            <code>
                public class MyClass
                {
            	    public string A;
                }
                
                void Main()
                {
            	    var x = new MyClass() { A = "One" };
            	    var y = new MyClass() { A = "Two" };
            	
            	    var listA = new List&lt;MyClass&gt;() { y, x }; //Reverse X and Y so that we can actually perform a sort!
            	
            	    listA.Sort(new SelectorComparer&lt;MyClass,string&gt;((x1) => x1.A, (x2,y2) => x2.CompareTo(y2))).Dump();	
                }
            </code>
            
                Returns {{A="One"}, {A="Two"}}.
            </example>
        </member>
        <member name="M:Common.LinqExtensions.SelectorComparer`2.#ctor(System.Func{`0,`1},System.Func{`1,`1,System.Int32})">
            <summary>
            Constructor used to create the generic comparer
            </summary>
            <param name="selector">Fuction used to select the value that will be compared</param>
            <param name="comparerFunction">
            Function that will return -1 (first argument less than second argument),
                                        0 (both arguments are equal),
                                        1 (first argument is greater than the second argument)
            </param>
        </member>
        <member name="T:Common.LinqExtensions.SelectorStringComparer`1">
            <summary>
            Defines a generic IComparer that can be used as a selector to return a string value.
            </summary>
            <typeparam name="T">Base object used to obtain the string value</typeparam>
            <example>
                Below example uses the member variable "A" as the equality comparer.
            <code>
                public class MyClass
                {
            	    public string A;
                }
                
                void Main()
                {
            	    var x = new MyClass() { A = "One" };
            	    var y = new MyClass() { A = "Two" };
            	
            	    var listA = new List&lt;MyClass&gt;() { y, x }; //Reverse X and Y so that we can actually perform a sort!
            	
            	    listA.Sort(new SelectorStringComparer&lt;MyClass,string&gt;((x1) => x1.A).Dump();	
                }
            </code>
            
                Returns {{A="One"}, {A="Two"}}.
            </example>
        </member>
        <member name="M:Common.LinqExtensions.SelectorStringComparer`1.#ctor(System.Func{`0,System.String})">
            <summary>
            Constructor used to create the generic comparer
            </summary>
            <param name="selector">Fuction used to select the string value that will be compared</param>           
        </member>
        <member name="M:Common.LinqExtensions.GetEnumerator(System.Collections.Specialized.StringCollection)">
            <summary>
            Returns an IEnumerator for a System.Collections.Specialized.StringCollection which is returned from an application configuration string collection field.
            </summary>
            <param name="underlyingCollection"></param>
            <returns></returns>
        </member>
        <member name="M:Common.LinqExtensions.ToEnumerable(System.Collections.Specialized.StringCollection)">
            <summary>
            Returns an IEnumerable for a System.Collections.Specialized.StringCollection which is returned from an application configuration string collection field.
            </summary>
            <param name="stringCollection"></param>
            <returns></returns>
        </member>
        <member name="M:Common.LinqExtensions.ToArray(System.Collections.Specialized.StringCollection,System.Boolean)">
            <summary>
            Returns a string array for a System.Collections.Specialized.StringCollection which is returned from an application configuration string collection field.
            </summary>
            <param name="stringCollection"></param>
            <param name="returnNull">
            if true (default) and stringCollection is null, null is returned.
            If false, and stringCollection is null, an empty string array is returned
            </param>
            <returns></returns>
        </member>
        <member name="M:Common.LinqExtensions.ToList(System.Collections.Specialized.StringCollection,System.Boolean,System.Boolean)">
            <summary>
            Returns a list of strings for a System.Collections.Specialized.StringCollection which is returned from an application configuration string collection field.
            </summary>
            <param name="stringCollection"></param>
            <param name="returnNull">
            if true (default) and stringCollection is null, null is returned.
            If false, and stringCollection is null, an empty string list is returned.
            </param>
            <param name="toLowerCase">
            if false (default), the string collection&apos;s case is not alterered
            if true, the string collection&apos;s case is changed to all lower case.
            </param>
            <returns></returns>
        </member>
        <member name="M:Common.LinqExtensions.Max(System.Collections.Generic.IEnumerable{System.Int16},System.Func{System.Int16,System.Boolean})">
            <summary>
            Returns the Maximum value for the items in the collection that are selected by the selector function.
            </summary>
            <param name="source">a collection of itmes where the maximum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be considered for selection.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>       
            <returns>
            The Maximum value of the items selected.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Min(System.Collections.Generic.IEnumerable{System.Int16},System.Func{System.Int16,System.Boolean})">
            <summary>
            Returns the Minimum value for the items in the collection that are selected by the selector function.
            </summary>
            <param name="source">a collection of itmes where the minimum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be selected.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>        
            <returns>
            The Minimum value of the items selected.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Int16})">
            <summary>
            Returns the Maximum value for the items in the collection that are selected by the selector function and transformed by the transformer.
            </summary>
            <typeparam name="TSource">data type of the items within the collection</typeparam>
            <param name="source">a collection of itmes where the maximum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be considered for selection to determine if it should be transformed.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>
            <param name="transformer">
            A function that will transform the item into the result type. Note that only items that have been selected will be presented to the transformer function.
            </param>       
            <returns>
            The Maximum value of the items selected and transformed.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Int16})">
            <summary>
            Returns the Minimum value for the items in the collection that are selected by the selector function and transformed by the transformer.
            </summary>
            <typeparam name="TSource">data type of the items within the collection</typeparam>
            <param name="source">a collection of itmes where the minimum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be considered for selection to determine if it should be transformed.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>
            <param name="transformer">
            A function that will transform the item into the result type. Note that only items that have been selected will be presented to the transformer function.
            </param>        
            <returns>
            The Minimum value of the items selected and transformed.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.MaxMin``1(System.Collections.Generic.IEnumerable{``0},Common.LinqExtensions.MaxMinDelegate{``0,System.Int16})">
            <summary>
            Determines the Max and Min values of the same field type within a collection.
            </summary>
            <typeparam name="TSouce">The type of object within a collection</typeparam>
            <param name="source">source collection</param>
            <param name="getValueAccessor">
            A function used to obtain the values for the Max and Min function. 
            
            This function takes three arguments:
                The first argument is the object within a collection
                The second argument is a ref argument which should be set to a value used for the Max function.
                The third argument is a ref argument which should be set to a value used for the Min function.
                    
            Returns true to indicate that the Max and Min function should be called, else false to not call the Max/Min functions.
            </param>
            <returns>
            Returns a Tuple instance where Item1 is the Max value and Item2 is the Min Value.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Coalesce(System.Collections.Generic.IEnumerable{System.Nullable{System.Int16}})">
            <summary>
            Returns a collection of only valid (non-null) values.
            </summary>
            <param name="source"></param> 		        
            <returns>
            a collection of only valid (non-null) values.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Max(System.Collections.Generic.IEnumerable{System.Int32},System.Func{System.Int32,System.Boolean})">
            <summary>
            Returns the Maximum value for the items in the collection that are selected by the selector function.
            </summary>
            <param name="source">a collection of itmes where the maximum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be considered for selection.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>       
            <returns>
            The Maximum value of the items selected.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Min(System.Collections.Generic.IEnumerable{System.Int32},System.Func{System.Int32,System.Boolean})">
            <summary>
            Returns the Minimum value for the items in the collection that are selected by the selector function.
            </summary>
            <param name="source">a collection of itmes where the minimum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be selected.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>        
            <returns>
            The Minimum value of the items selected.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Int32})">
            <summary>
            Returns the Maximum value for the items in the collection that are selected by the selector function and transformed by the transformer.
            </summary>
            <typeparam name="TSource">data type of the items within the collection</typeparam>
            <param name="source">a collection of itmes where the maximum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be considered for selection to determine if it should be transformed.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>
            <param name="transformer">
            A function that will transform the item into the result type. Note that only items that have been selected will be presented to the transformer function.
            </param>       
            <returns>
            The Maximum value of the items selected and transformed.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Int32})">
            <summary>
            Returns the Minimum value for the items in the collection that are selected by the selector function and transformed by the transformer.
            </summary>
            <typeparam name="TSource">data type of the items within the collection</typeparam>
            <param name="source">a collection of itmes where the minimum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be considered for selection to determine if it should be transformed.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>
            <param name="transformer">
            A function that will transform the item into the result type. Note that only items that have been selected will be presented to the transformer function.
            </param>        
            <returns>
            The Minimum value of the items selected and transformed.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.MaxMin``1(System.Collections.Generic.IEnumerable{``0},Common.LinqExtensions.MaxMinDelegate{``0,System.Int32})">
            <summary>
            Determines the Max and Min values of the same field type within a collection.
            </summary>
            <typeparam name="TSouce">The type of object within a collection</typeparam>
            <param name="source">source collection</param>
            <param name="getValueAccessor">
            A function used to obtain the values for the Max and Min function. 
            
            This function takes three arguments:
                The first argument is the object within a collection
                The second argument is a ref argument which should be set to a value used for the Max function.
                The third argument is a ref argument which should be set to a value used for the Min function.
                    
            Returns true to indicate that the Max and Min function should be called, else false to not call the Max/Min functions.
            </param>
            <returns>
            Returns a Tuple instance where Item1 is the Max value and Item2 is the Min Value.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Coalesce(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Returns a collection of only valid (non-null) values.
            </summary>
            <param name="source"></param> 		        
            <returns>
            a collection of only valid (non-null) values.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Max(System.Collections.Generic.IEnumerable{System.Int64},System.Func{System.Int64,System.Boolean})">
            <summary>
            Returns the Maximum value for the items in the collection that are selected by the selector function.
            </summary>
            <param name="source">a collection of itmes where the maximum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be considered for selection.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>       
            <returns>
            The Maximum value of the items selected.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Min(System.Collections.Generic.IEnumerable{System.Int64},System.Func{System.Int64,System.Boolean})">
            <summary>
            Returns the Minimum value for the items in the collection that are selected by the selector function.
            </summary>
            <param name="source">a collection of itmes where the minimum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be selected.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>        
            <returns>
            The Minimum value of the items selected.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Int64})">
            <summary>
            Returns the Maximum value for the items in the collection that are selected by the selector function and transformed by the transformer.
            </summary>
            <typeparam name="TSource">data type of the items within the collection</typeparam>
            <param name="source">a collection of itmes where the maximum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be considered for selection to determine if it should be transformed.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>
            <param name="transformer">
            A function that will transform the item into the result type. Note that only items that have been selected will be presented to the transformer function.
            </param>       
            <returns>
            The Maximum value of the items selected and transformed.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Int64})">
            <summary>
            Returns the Minimum value for the items in the collection that are selected by the selector function and transformed by the transformer.
            </summary>
            <typeparam name="TSource">data type of the items within the collection</typeparam>
            <param name="source">a collection of itmes where the minimum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be considered for selection to determine if it should be transformed.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>
            <param name="transformer">
            A function that will transform the item into the result type. Note that only items that have been selected will be presented to the transformer function.
            </param>        
            <returns>
            The Minimum value of the items selected and transformed.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.MaxMin``1(System.Collections.Generic.IEnumerable{``0},Common.LinqExtensions.MaxMinDelegate{``0,System.Int64})">
            <summary>
            Determines the Max and Min values of the same field type within a collection.
            </summary>
            <typeparam name="TSouce">The type of object within a collection</typeparam>
            <param name="source">source collection</param>
            <param name="getValueAccessor">
            A function used to obtain the values for the Max and Min function. 
            
            This function takes three arguments:
                The first argument is the object within a collection
                The second argument is a ref argument which should be set to a value used for the Max function.
                The third argument is a ref argument which should be set to a value used for the Min function.
                    
            Returns true to indicate that the Max and Min function should be called, else false to not call the Max/Min functions.
            </param>
            <returns>
            Returns a Tuple instance where Item1 is the Max value and Item2 is the Min Value.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Coalesce(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
            <summary>
            Returns a collection of only valid (non-null) values.
            </summary>
            <param name="source"></param> 		        
            <returns>
            a collection of only valid (non-null) values.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Max(System.Collections.Generic.IEnumerable{System.UInt16},System.Func{System.UInt16,System.Boolean})">
            <summary>
            Returns the Maximum value for the items in the collection that are selected by the selector function.
            </summary>
            <param name="source">a collection of itmes where the maximum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be considered for selection.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>       
            <returns>
            The Maximum value of the items selected.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Min(System.Collections.Generic.IEnumerable{System.UInt16},System.Func{System.UInt16,System.Boolean})">
            <summary>
            Returns the Minimum value for the items in the collection that are selected by the selector function.
            </summary>
            <param name="source">a collection of itmes where the minimum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be selected.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>        
            <returns>
            The Minimum value of the items selected.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.UInt16})">
            <summary>
            Returns the Maximum value for the items in the collection that are selected by the selector function and transformed by the transformer.
            </summary>
            <typeparam name="TSource">data type of the items within the collection</typeparam>
            <param name="source">a collection of itmes where the maximum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be considered for selection to determine if it should be transformed.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>
            <param name="transformer">
            A function that will transform the item into the result type. Note that only items that have been selected will be presented to the transformer function.
            </param>       
            <returns>
            The Maximum value of the items selected and transformed.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.UInt16})">
            <summary>
            Returns the Minimum value for the items in the collection that are selected by the selector function and transformed by the transformer.
            </summary>
            <typeparam name="TSource">data type of the items within the collection</typeparam>
            <param name="source">a collection of itmes where the minimum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be considered for selection to determine if it should be transformed.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>
            <param name="transformer">
            A function that will transform the item into the result type. Note that only items that have been selected will be presented to the transformer function.
            </param>        
            <returns>
            The Minimum value of the items selected and transformed.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.MaxMin``1(System.Collections.Generic.IEnumerable{``0},Common.LinqExtensions.MaxMinDelegate{``0,System.UInt16})">
            <summary>
            Determines the Max and Min values of the same field type within a collection.
            </summary>
            <typeparam name="TSouce">The type of object within a collection</typeparam>
            <param name="source">source collection</param>
            <param name="getValueAccessor">
            A function used to obtain the values for the Max and Min function. 
            
            This function takes three arguments:
                The first argument is the object within a collection
                The second argument is a ref argument which should be set to a value used for the Max function.
                The third argument is a ref argument which should be set to a value used for the Min function.
                    
            Returns true to indicate that the Max and Min function should be called, else false to not call the Max/Min functions.
            </param>
            <returns>
            Returns a Tuple instance where Item1 is the Max value and Item2 is the Min Value.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Coalesce(System.Collections.Generic.IEnumerable{System.Nullable{System.UInt16}})">
            <summary>
            Returns a collection of only valid (non-null) values.
            </summary>
            <param name="source"></param> 		        
            <returns>
            a collection of only valid (non-null) values.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Max(System.Collections.Generic.IEnumerable{System.UInt32},System.Func{System.UInt32,System.Boolean})">
            <summary>
            Returns the Maximum value for the items in the collection that are selected by the selector function.
            </summary>
            <param name="source">a collection of itmes where the maximum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be considered for selection.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>       
            <returns>
            The Maximum value of the items selected.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Min(System.Collections.Generic.IEnumerable{System.UInt32},System.Func{System.UInt32,System.Boolean})">
            <summary>
            Returns the Minimum value for the items in the collection that are selected by the selector function.
            </summary>
            <param name="source">a collection of itmes where the minimum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be selected.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>        
            <returns>
            The Minimum value of the items selected.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.UInt32})">
            <summary>
            Returns the Maximum value for the items in the collection that are selected by the selector function and transformed by the transformer.
            </summary>
            <typeparam name="TSource">data type of the items within the collection</typeparam>
            <param name="source">a collection of itmes where the maximum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be considered for selection to determine if it should be transformed.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>
            <param name="transformer">
            A function that will transform the item into the result type. Note that only items that have been selected will be presented to the transformer function.
            </param>       
            <returns>
            The Maximum value of the items selected and transformed.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.UInt32})">
            <summary>
            Returns the Minimum value for the items in the collection that are selected by the selector function and transformed by the transformer.
            </summary>
            <typeparam name="TSource">data type of the items within the collection</typeparam>
            <param name="source">a collection of itmes where the minimum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be considered for selection to determine if it should be transformed.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>
            <param name="transformer">
            A function that will transform the item into the result type. Note that only items that have been selected will be presented to the transformer function.
            </param>        
            <returns>
            The Minimum value of the items selected and transformed.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.MaxMin``1(System.Collections.Generic.IEnumerable{``0},Common.LinqExtensions.MaxMinDelegate{``0,System.UInt32})">
            <summary>
            Determines the Max and Min values of the same field type within a collection.
            </summary>
            <typeparam name="TSouce">The type of object within a collection</typeparam>
            <param name="source">source collection</param>
            <param name="getValueAccessor">
            A function used to obtain the values for the Max and Min function. 
            
            This function takes three arguments:
                The first argument is the object within a collection
                The second argument is a ref argument which should be set to a value used for the Max function.
                The third argument is a ref argument which should be set to a value used for the Min function.
                    
            Returns true to indicate that the Max and Min function should be called, else false to not call the Max/Min functions.
            </param>
            <returns>
            Returns a Tuple instance where Item1 is the Max value and Item2 is the Min Value.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Coalesce(System.Collections.Generic.IEnumerable{System.Nullable{System.UInt32}})">
            <summary>
            Returns a collection of only valid (non-null) values.
            </summary>
            <param name="source"></param> 		        
            <returns>
            a collection of only valid (non-null) values.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Max(System.Collections.Generic.IEnumerable{System.UInt64},System.Func{System.UInt64,System.Boolean})">
            <summary>
            Returns the Maximum value for the items in the collection that are selected by the selector function.
            </summary>
            <param name="source">a collection of itmes where the maximum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be considered for selection.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>       
            <returns>
            The Maximum value of the items selected.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Min(System.Collections.Generic.IEnumerable{System.UInt64},System.Func{System.UInt64,System.Boolean})">
            <summary>
            Returns the Minimum value for the items in the collection that are selected by the selector function.
            </summary>
            <param name="source">a collection of itmes where the minimum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be selected.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>        
            <returns>
            The Minimum value of the items selected.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.UInt64})">
            <summary>
            Returns the Maximum value for the items in the collection that are selected by the selector function and transformed by the transformer.
            </summary>
            <typeparam name="TSource">data type of the items within the collection</typeparam>
            <param name="source">a collection of itmes where the maximum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be considered for selection to determine if it should be transformed.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>
            <param name="transformer">
            A function that will transform the item into the result type. Note that only items that have been selected will be presented to the transformer function.
            </param>       
            <returns>
            The Maximum value of the items selected and transformed.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.UInt64})">
            <summary>
            Returns the Minimum value for the items in the collection that are selected by the selector function and transformed by the transformer.
            </summary>
            <typeparam name="TSource">data type of the items within the collection</typeparam>
            <param name="source">a collection of itmes where the minimum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be considered for selection to determine if it should be transformed.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>
            <param name="transformer">
            A function that will transform the item into the result type. Note that only items that have been selected will be presented to the transformer function.
            </param>        
            <returns>
            The Minimum value of the items selected and transformed.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.MaxMin``1(System.Collections.Generic.IEnumerable{``0},Common.LinqExtensions.MaxMinDelegate{``0,System.UInt64})">
            <summary>
            Determines the Max and Min values of the same field type within a collection.
            </summary>
            <typeparam name="TSouce">The type of object within a collection</typeparam>
            <param name="source">source collection</param>
            <param name="getValueAccessor">
            A function used to obtain the values for the Max and Min function. 
            
            This function takes three arguments:
                The first argument is the object within a collection
                The second argument is a ref argument which should be set to a value used for the Max function.
                The third argument is a ref argument which should be set to a value used for the Min function.
                    
            Returns true to indicate that the Max and Min function should be called, else false to not call the Max/Min functions.
            </param>
            <returns>
            Returns a Tuple instance where Item1 is the Max value and Item2 is the Min Value.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Coalesce(System.Collections.Generic.IEnumerable{System.Nullable{System.UInt64}})">
            <summary>
            Returns a collection of only valid (non-null) values.
            </summary>
            <param name="source"></param> 		        
            <returns>
            a collection of only valid (non-null) values.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Max(System.Collections.Generic.IEnumerable{System.Decimal},System.Func{System.Decimal,System.Boolean})">
            <summary>
            Returns the Maximum value for the items in the collection that are selected by the selector function.
            </summary>
            <param name="source">a collection of itmes where the maximum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be considered for selection.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>       
            <returns>
            The Maximum value of the items selected.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Min(System.Collections.Generic.IEnumerable{System.Decimal},System.Func{System.Decimal,System.Boolean})">
            <summary>
            Returns the Minimum value for the items in the collection that are selected by the selector function.
            </summary>
            <param name="source">a collection of itmes where the minimum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be selected.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>        
            <returns>
            The Minimum value of the items selected.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Decimal})">
            <summary>
            Returns the Maximum value for the items in the collection that are selected by the selector function and transformed by the transformer.
            </summary>
            <typeparam name="TSource">data type of the items within the collection</typeparam>
            <param name="source">a collection of itmes where the maximum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be considered for selection to determine if it should be transformed.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>
            <param name="transformer">
            A function that will transform the item into the result type. Note that only items that have been selected will be presented to the transformer function.
            </param>       
            <returns>
            The Maximum value of the items selected and transformed.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Decimal})">
            <summary>
            Returns the Minimum value for the items in the collection that are selected by the selector function and transformed by the transformer.
            </summary>
            <typeparam name="TSource">data type of the items within the collection</typeparam>
            <param name="source">a collection of itmes where the minimum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be considered for selection to determine if it should be transformed.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>
            <param name="transformer">
            A function that will transform the item into the result type. Note that only items that have been selected will be presented to the transformer function.
            </param>        
            <returns>
            The Minimum value of the items selected and transformed.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.MaxMin``1(System.Collections.Generic.IEnumerable{``0},Common.LinqExtensions.MaxMinDelegate{``0,System.Decimal})">
            <summary>
            Determines the Max and Min values of the same field type within a collection.
            </summary>
            <typeparam name="TSouce">The type of object within a collection</typeparam>
            <param name="source">source collection</param>
            <param name="getValueAccessor">
            A function used to obtain the values for the Max and Min function. 
            
            This function takes three arguments:
                The first argument is the object within a collection
                The second argument is a ref argument which should be set to a value used for the Max function.
                The third argument is a ref argument which should be set to a value used for the Min function.
                    
            Returns true to indicate that the Max and Min function should be called, else false to not call the Max/Min functions.
            </param>
            <returns>
            Returns a Tuple instance where Item1 is the Max value and Item2 is the Min Value.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Coalesce(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Returns a collection of only valid (non-null) values.
            </summary>
            <param name="source"></param> 		        
            <returns>
            a collection of only valid (non-null) values.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Max(System.Collections.Generic.IEnumerable{System.Single},System.Func{System.Single,System.Boolean})">
            <summary>
            Returns the Maximum value for the items in the collection that are selected by the selector function.
            </summary>
            <param name="source">a collection of itmes where the maximum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be considered for selection.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>       
            <returns>
            The Maximum value of the items selected.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Min(System.Collections.Generic.IEnumerable{System.Single},System.Func{System.Single,System.Boolean})">
            <summary>
            Returns the Minimum value for the items in the collection that are selected by the selector function.
            </summary>
            <param name="source">a collection of itmes where the minimum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be selected.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>        
            <returns>
            The Minimum value of the items selected.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Single})">
            <summary>
            Returns the Maximum value for the items in the collection that are selected by the selector function and transformed by the transformer.
            </summary>
            <typeparam name="TSource">data type of the items within the collection</typeparam>
            <param name="source">a collection of itmes where the maximum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be considered for selection to determine if it should be transformed.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>
            <param name="transformer">
            A function that will transform the item into the result type. Note that only items that have been selected will be presented to the transformer function.
            </param>       
            <returns>
            The Maximum value of the items selected and transformed.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Single})">
            <summary>
            Returns the Minimum value for the items in the collection that are selected by the selector function and transformed by the transformer.
            </summary>
            <typeparam name="TSource">data type of the items within the collection</typeparam>
            <param name="source">a collection of itmes where the minimum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be considered for selection to determine if it should be transformed.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>
            <param name="transformer">
            A function that will transform the item into the result type. Note that only items that have been selected will be presented to the transformer function.
            </param>        
            <returns>
            The Minimum value of the items selected and transformed.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.MaxMin``1(System.Collections.Generic.IEnumerable{``0},Common.LinqExtensions.MaxMinDelegate{``0,System.Single})">
            <summary>
            Determines the Max and Min values of the same field type within a collection.
            </summary>
            <typeparam name="TSouce">The type of object within a collection</typeparam>
            <param name="source">source collection</param>
            <param name="getValueAccessor">
            A function used to obtain the values for the Max and Min function. 
            
            This function takes three arguments:
                The first argument is the object within a collection
                The second argument is a ref argument which should be set to a value used for the Max function.
                The third argument is a ref argument which should be set to a value used for the Min function.
                    
            Returns true to indicate that the Max and Min function should be called, else false to not call the Max/Min functions.
            </param>
            <returns>
            Returns a Tuple instance where Item1 is the Max value and Item2 is the Min Value.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Coalesce(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
            <summary>
            Returns a collection of only valid (non-null) values.
            </summary>
            <param name="source"></param> 		        
            <returns>
            a collection of only valid (non-null) values.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Max(System.Collections.Generic.IEnumerable{System.Double},System.Func{System.Double,System.Boolean})">
            <summary>
            Returns the Maximum value for the items in the collection that are selected by the selector function.
            </summary>
            <param name="source">a collection of itmes where the maximum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be considered for selection.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>       
            <returns>
            The Maximum value of the items selected.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Min(System.Collections.Generic.IEnumerable{System.Double},System.Func{System.Double,System.Boolean})">
            <summary>
            Returns the Minimum value for the items in the collection that are selected by the selector function.
            </summary>
            <param name="source">a collection of itmes where the minimum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be selected.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>        
            <returns>
            The Minimum value of the items selected.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Double})">
            <summary>
            Returns the Maximum value for the items in the collection that are selected by the selector function and transformed by the transformer.
            </summary>
            <typeparam name="TSource">data type of the items within the collection</typeparam>
            <param name="source">a collection of itmes where the maximum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be considered for selection to determine if it should be transformed.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>
            <param name="transformer">
            A function that will transform the item into the result type. Note that only items that have been selected will be presented to the transformer function.
            </param>       
            <returns>
            The Maximum value of the items selected and transformed.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Double})">
            <summary>
            Returns the Minimum value for the items in the collection that are selected by the selector function and transformed by the transformer.
            </summary>
            <typeparam name="TSource">data type of the items within the collection</typeparam>
            <param name="source">a collection of itmes where the minimum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be considered for selection to determine if it should be transformed.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>
            <param name="transformer">
            A function that will transform the item into the result type. Note that only items that have been selected will be presented to the transformer function.
            </param>        
            <returns>
            The Minimum value of the items selected and transformed.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.MaxMin``1(System.Collections.Generic.IEnumerable{``0},Common.LinqExtensions.MaxMinDelegate{``0,System.Double})">
            <summary>
            Determines the Max and Min values of the same field type within a collection.
            </summary>
            <typeparam name="TSouce">The type of object within a collection</typeparam>
            <param name="source">source collection</param>
            <param name="getValueAccessor">
            A function used to obtain the values for the Max and Min function. 
            
            This function takes three arguments:
                The first argument is the object within a collection
                The second argument is a ref argument which should be set to a value used for the Max function.
                The third argument is a ref argument which should be set to a value used for the Min function.
                    
            Returns true to indicate that the Max and Min function should be called, else false to not call the Max/Min functions.
            </param>
            <returns>
            Returns a Tuple instance where Item1 is the Max value and Item2 is the Min Value.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Coalesce(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
            <summary>
            Returns a collection of only valid (non-null) values.
            </summary>
            <param name="source"></param> 		        
            <returns>
            a collection of only valid (non-null) values.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Max(System.Collections.Generic.IEnumerable{System.DateTime},System.Func{System.DateTime,System.Boolean})">
            <summary>
            Returns the Maximum value for the items in the collection that are selected by the selector function.
            </summary>
            <param name="source">a collection of itmes where the maximum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be considered for selection.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>       
            <returns>
            The Maximum value of the items selected.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Min(System.Collections.Generic.IEnumerable{System.DateTime},System.Func{System.DateTime,System.Boolean})">
            <summary>
            Returns the Minimum value for the items in the collection that are selected by the selector function.
            </summary>
            <param name="source">a collection of itmes where the minimum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be selected.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>        
            <returns>
            The Minimum value of the items selected.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.DateTime})">
            <summary>
            Returns the Maximum value for the items in the collection that are selected by the selector function and transformed by the transformer.
            </summary>
            <typeparam name="TSource">data type of the items within the collection</typeparam>
            <param name="source">a collection of itmes where the maximum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be considered for selection to determine if it should be transformed.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>
            <param name="transformer">
            A function that will transform the item into the result type. Note that only items that have been selected will be presented to the transformer function.
            </param>       
            <returns>
            The Maximum value of the items selected and transformed.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.DateTime})">
            <summary>
            Returns the Minimum value for the items in the collection that are selected by the selector function and transformed by the transformer.
            </summary>
            <typeparam name="TSource">data type of the items within the collection</typeparam>
            <param name="source">a collection of itmes where the minimum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be considered for selection to determine if it should be transformed.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>
            <param name="transformer">
            A function that will transform the item into the result type. Note that only items that have been selected will be presented to the transformer function.
            </param>        
            <returns>
            The Minimum value of the items selected and transformed.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.MaxMin``1(System.Collections.Generic.IEnumerable{``0},Common.LinqExtensions.MaxMinDelegate{``0,System.DateTime})">
            <summary>
            Determines the Max and Min values of the same field type within a collection.
            </summary>
            <typeparam name="TSouce">The type of object within a collection</typeparam>
            <param name="source">source collection</param>
            <param name="getValueAccessor">
            A function used to obtain the values for the Max and Min function. 
            
            This function takes three arguments:
                The first argument is the object within a collection
                The second argument is a ref argument which should be set to a value used for the Max function.
                The third argument is a ref argument which should be set to a value used for the Min function.
                    
            Returns true to indicate that the Max and Min function should be called, else false to not call the Max/Min functions.
            </param>
            <returns>
            Returns a Tuple instance where Item1 is the Max value and Item2 is the Min Value.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Coalesce(System.Collections.Generic.IEnumerable{System.Nullable{System.DateTime}})">
            <summary>
            Returns a collection of only valid (non-null) values.
            </summary>
            <param name="source"></param> 		        
            <returns>
            a collection of only valid (non-null) values.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Max(System.Collections.Generic.IEnumerable{System.DateTimeOffset},System.Func{System.DateTimeOffset,System.Boolean})">
            <summary>
            Returns the Maximum value for the items in the collection that are selected by the selector function.
            </summary>
            <param name="source">a collection of itmes where the maximum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be considered for selection.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>       
            <returns>
            The Maximum value of the items selected.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Min(System.Collections.Generic.IEnumerable{System.DateTimeOffset},System.Func{System.DateTimeOffset,System.Boolean})">
            <summary>
            Returns the Minimum value for the items in the collection that are selected by the selector function.
            </summary>
            <param name="source">a collection of itmes where the minimum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be selected.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>        
            <returns>
            The Minimum value of the items selected.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.DateTimeOffset})">
            <summary>
            Returns the Maximum value for the items in the collection that are selected by the selector function and transformed by the transformer.
            </summary>
            <typeparam name="TSource">data type of the items within the collection</typeparam>
            <param name="source">a collection of itmes where the maximum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be considered for selection to determine if it should be transformed.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>
            <param name="transformer">
            A function that will transform the item into the result type. Note that only items that have been selected will be presented to the transformer function.
            </param>       
            <returns>
            The Maximum value of the items selected and transformed.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.DateTimeOffset})">
            <summary>
            Returns the Minimum value for the items in the collection that are selected by the selector function and transformed by the transformer.
            </summary>
            <typeparam name="TSource">data type of the items within the collection</typeparam>
            <param name="source">a collection of itmes where the minimum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be considered for selection to determine if it should be transformed.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>
            <param name="transformer">
            A function that will transform the item into the result type. Note that only items that have been selected will be presented to the transformer function.
            </param>        
            <returns>
            The Minimum value of the items selected and transformed.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.MaxMin``1(System.Collections.Generic.IEnumerable{``0},Common.LinqExtensions.MaxMinDelegate{``0,System.DateTimeOffset})">
            <summary>
            Determines the Max and Min values of the same field type within a collection.
            </summary>
            <typeparam name="TSouce">The type of object within a collection</typeparam>
            <param name="source">source collection</param>
            <param name="getValueAccessor">
            A function used to obtain the values for the Max and Min function. 
            
            This function takes three arguments:
                The first argument is the object within a collection
                The second argument is a ref argument which should be set to a value used for the Max function.
                The third argument is a ref argument which should be set to a value used for the Min function.
                    
            Returns true to indicate that the Max and Min function should be called, else false to not call the Max/Min functions.
            </param>
            <returns>
            Returns a Tuple instance where Item1 is the Max value and Item2 is the Min Value.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Coalesce(System.Collections.Generic.IEnumerable{System.Nullable{System.DateTimeOffset}})">
            <summary>
            Returns a collection of only valid (non-null) values.
            </summary>
            <param name="source"></param> 		        
            <returns>
            a collection of only valid (non-null) values.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Max(System.Collections.Generic.IEnumerable{System.TimeSpan},System.Func{System.TimeSpan,System.Boolean})">
            <summary>
            Returns the Maximum value for the items in the collection that are selected by the selector function.
            </summary>
            <param name="source">a collection of itmes where the maximum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be considered for selection.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>       
            <returns>
            The Maximum value of the items selected.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Min(System.Collections.Generic.IEnumerable{System.TimeSpan},System.Func{System.TimeSpan,System.Boolean})">
            <summary>
            Returns the Minimum value for the items in the collection that are selected by the selector function.
            </summary>
            <param name="source">a collection of itmes where the minimum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be selected.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>        
            <returns>
            The Minimum value of the items selected.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.TimeSpan})">
            <summary>
            Returns the Maximum value for the items in the collection that are selected by the selector function and transformed by the transformer.
            </summary>
            <typeparam name="TSource">data type of the items within the collection</typeparam>
            <param name="source">a collection of itmes where the maximum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be considered for selection to determine if it should be transformed.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>
            <param name="transformer">
            A function that will transform the item into the result type. Note that only items that have been selected will be presented to the transformer function.
            </param>       
            <returns>
            The Maximum value of the items selected and transformed.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.TimeSpan})">
            <summary>
            Returns the Minimum value for the items in the collection that are selected by the selector function and transformed by the transformer.
            </summary>
            <typeparam name="TSource">data type of the items within the collection</typeparam>
            <param name="source">a collection of itmes where the minimum value is determined based on the selector function.</param>
            <param name="selector">
            A selection function that determines if the item should be considered for selection to determine if it should be transformed.
            
            If this function returns true, the item would be considered (selected). If false, the item would NOT be considered (selected)
            </param>
            <param name="transformer">
            A function that will transform the item into the result type. Note that only items that have been selected will be presented to the transformer function.
            </param>        
            <returns>
            The Minimum value of the items selected and transformed.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.MaxMin``1(System.Collections.Generic.IEnumerable{``0},Common.LinqExtensions.MaxMinDelegate{``0,System.TimeSpan})">
            <summary>
            Determines the Max and Min values of the same field type within a collection.
            </summary>
            <typeparam name="TSouce">The type of object within a collection</typeparam>
            <param name="source">source collection</param>
            <param name="getValueAccessor">
            A function used to obtain the values for the Max and Min function. 
            
            This function takes three arguments:
                The first argument is the object within a collection
                The second argument is a ref argument which should be set to a value used for the Max function.
                The third argument is a ref argument which should be set to a value used for the Min function.
                    
            Returns true to indicate that the Max and Min function should be called, else false to not call the Max/Min functions.
            </param>
            <returns>
            Returns a Tuple instance where Item1 is the Max value and Item2 is the Min Value.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Coalesce(System.Collections.Generic.IEnumerable{System.Nullable{System.TimeSpan}})">
            <summary>
            Returns a collection of only valid (non-null) values.
            </summary>
            <param name="source"></param> 		        
            <returns>
            a collection of only valid (non-null) values.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Variance(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Variance is the measure of the amount of variation of all the scores for a variable (not just the extremes which give the range).
            </summary>
            <param name="source">a collection of items where the Variance is the measured.</param>            
            <returns>
            The Variance value.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.VarianceP(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Computes the VarianceP of a sequence of values.
            </summary>
            <param name="source">a collection of items where the VarianceP is the measured.</param>            
            <returns>
            The VarianceP value.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            The Standard Deviation of a statistical population, a data set, or a probability distribution is the square root of its variance.
            </summary>
            <param name="source">a collection of items where the Standard Deviation is the calculated.</param>            
            <returns>
            The Standard Deviation value.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            The Standard DeviationP of a statistical population, a data set, or a probability distribution is the square root of its variance.
            </summary>
            <param name="source">a collection of items where the Standard DeviationP is the calculated.</param>            
            <returns>
            The Standard DeviationP value.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Median(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Median is the number separating the higher half of a sample, a population, or a probability distribution, from the lower half.
            </summary>
            <param name="source">a collection of items where the Median is the calculated.</param>            
            <returns>
            The Median value.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Mode(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Mode is the value that occurs the most frequently in a data set or a probability distribution.
            </summary>
            <param name="source">a collection of items where the Mode is the calculated.</param>            
            <returns>
            The Mode value.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Histogram(System.Collections.Generic.IEnumerable{System.Int32},System.Int32@,System.Int32@)">
            <summary>
            Calculate the optimal bins for the given data
            </summary>
            <param name="source">The data you have</param>
            <param name="xMin">The minimum element</param>
            <param name="optimalBinWidth">The width between each bin</param>
            <returns>The bins</returns>
        </member>
        <member name="M:Common.LinqExtensions.Covariance(System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Covariance is a measure of how much two variables change together.
            </summary>
            <param name="source"></param> 
            <param name="other"></param>            
            <returns>       
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Pearson(System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Pearson's chi square test is used to assess two types of comparisons: tests of goodness of fit, and tests of independence.
            In other words, it is a measure of how well a sample distribution matches a predicted distribution or the degree of correlation between two sample distributions. Pearson's is often used in scientific applications to test the validity of hypotheses.
            </summary>
            <param name="source"></param> 
            <param name="other"></param>            
            <returns>       
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Variance(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Variance is the measure of the amount of variation of all the scores for a variable (not just the extremes which give the range).
            </summary>
            <param name="source">a collection of items where the Variance is the measured.</param>            
            <returns>
            The Variance value.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.VarianceP(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Computes the VarianceP of a sequence of values.
            </summary>
            <param name="source">a collection of items where the VarianceP is the measured.</param>            
            <returns>
            The VarianceP value.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            The Standard Deviation of a statistical population, a data set, or a probability distribution is the square root of its variance.
            </summary>
            <param name="source">a collection of items where the Standard Deviation is the calculated.</param>            
            <returns>
            The Standard Deviation value.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            The Standard DeviationP of a statistical population, a data set, or a probability distribution is the square root of its variance.
            </summary>
            <param name="source">a collection of items where the Standard DeviationP is the calculated.</param>            
            <returns>
            The Standard DeviationP value.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Median(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Median is the number separating the higher half of a sample, a population, or a probability distribution, from the lower half.
            </summary>
            <param name="source">a collection of items where the Median is the calculated.</param>            
            <returns>
            The Median value.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Mode(System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Mode is the value that occurs the most frequently in a data set or a probability distribution.
            </summary>
            <param name="source">a collection of items where the Mode is the calculated.</param>            
            <returns>
            The Mode value.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Histogram(System.Collections.Generic.IEnumerable{System.Int64},System.Int64@,System.Int64@)">
            <summary>
            Calculate the optimal bins for the given data
            </summary>
            <param name="source">The data you have</param>
            <param name="xMin">The minimum element</param>
            <param name="optimalBinWidth">The width between each bin</param>
            <returns>The bins</returns>
        </member>
        <member name="M:Common.LinqExtensions.Covariance(System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Covariance is a measure of how much two variables change together.
            </summary>
            <param name="source"></param> 
            <param name="other"></param>            
            <returns>       
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Pearson(System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{System.Int64})">
            <summary>
            Pearson's chi square test is used to assess two types of comparisons: tests of goodness of fit, and tests of independence.
            In other words, it is a measure of how well a sample distribution matches a predicted distribution or the degree of correlation between two sample distributions. Pearson's is often used in scientific applications to test the validity of hypotheses.
            </summary>
            <param name="source"></param> 
            <param name="other"></param>            
            <returns>       
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Variance(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Variance is the measure of the amount of variation of all the scores for a variable (not just the extremes which give the range).
            </summary>
            <param name="source">a collection of items where the Variance is the measured.</param>            
            <returns>
            The Variance value.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.VarianceP(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Computes the VarianceP of a sequence of values.
            </summary>
            <param name="source">a collection of items where the VarianceP is the measured.</param>            
            <returns>
            The VarianceP value.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            The Standard Deviation of a statistical population, a data set, or a probability distribution is the square root of its variance.
            </summary>
            <param name="source">a collection of items where the Standard Deviation is the calculated.</param>            
            <returns>
            The Standard Deviation value.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            The Standard DeviationP of a statistical population, a data set, or a probability distribution is the square root of its variance.
            </summary>
            <param name="source">a collection of items where the Standard DeviationP is the calculated.</param>            
            <returns>
            The Standard DeviationP value.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Median(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Median is the number separating the higher half of a sample, a population, or a probability distribution, from the lower half.
            </summary>
            <param name="source">a collection of items where the Median is the calculated.</param>            
            <returns>
            The Median value.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Mode(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Mode is the value that occurs the most frequently in a data set or a probability distribution.
            </summary>
            <param name="source">a collection of items where the Mode is the calculated.</param>            
            <returns>
            The Mode value.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Histogram(System.Collections.Generic.IEnumerable{System.Decimal},System.Decimal@,System.Decimal@)">
            <summary>
            Calculate the optimal bins for the given data
            </summary>
            <param name="source">The data you have</param>
            <param name="xMin">The minimum element</param>
            <param name="optimalBinWidth">The width between each bin</param>
            <returns>The bins</returns>
        </member>
        <member name="M:Common.LinqExtensions.Covariance(System.Collections.Generic.IEnumerable{System.Decimal},System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Covariance is a measure of how much two variables change together.
            </summary>
            <param name="source"></param> 
            <param name="other"></param>            
            <returns>       
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Pearson(System.Collections.Generic.IEnumerable{System.Decimal},System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            Pearson's chi square test is used to assess two types of comparisons: tests of goodness of fit, and tests of independence.
            In other words, it is a measure of how well a sample distribution matches a predicted distribution or the degree of correlation between two sample distributions. Pearson's is often used in scientific applications to test the validity of hypotheses.
            </summary>
            <param name="source"></param> 
            <param name="other"></param>            
            <returns>       
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Variance(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Variance is the measure of the amount of variation of all the scores for a variable (not just the extremes which give the range).
            </summary>
            <param name="source">a collection of items where the Variance is the measured.</param>            
            <returns>
            The Variance value.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.VarianceP(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Computes the VarianceP of a sequence of values.
            </summary>
            <param name="source">a collection of items where the VarianceP is the measured.</param>            
            <returns>
            The VarianceP value.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            The Standard Deviation of a statistical population, a data set, or a probability distribution is the square root of its variance.
            </summary>
            <param name="source">a collection of items where the Standard Deviation is the calculated.</param>            
            <returns>
            The Standard Deviation value.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            The Standard DeviationP of a statistical population, a data set, or a probability distribution is the square root of its variance.
            </summary>
            <param name="source">a collection of items where the Standard DeviationP is the calculated.</param>            
            <returns>
            The Standard DeviationP value.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Median(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Median is the number separating the higher half of a sample, a population, or a probability distribution, from the lower half.
            </summary>
            <param name="source">a collection of items where the Median is the calculated.</param>            
            <returns>
            The Median value.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Mode(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Mode is the value that occurs the most frequently in a data set or a probability distribution.
            </summary>
            <param name="source">a collection of items where the Mode is the calculated.</param>            
            <returns>
            The Mode value.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Histogram(System.Collections.Generic.IEnumerable{System.Single},System.Single@,System.Single@)">
            <summary>
            Calculate the optimal bins for the given data
            </summary>
            <param name="source">The data you have</param>
            <param name="xMin">The minimum element</param>
            <param name="optimalBinWidth">The width between each bin</param>
            <returns>The bins</returns>
        </member>
        <member name="M:Common.LinqExtensions.Covariance(System.Collections.Generic.IEnumerable{System.Single},System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Covariance is a measure of how much two variables change together.
            </summary>
            <param name="source"></param> 
            <param name="other"></param>            
            <returns>       
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Pearson(System.Collections.Generic.IEnumerable{System.Single},System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Pearson's chi square test is used to assess two types of comparisons: tests of goodness of fit, and tests of independence.
            In other words, it is a measure of how well a sample distribution matches a predicted distribution or the degree of correlation between two sample distributions. Pearson's is often used in scientific applications to test the validity of hypotheses.
            </summary>
            <param name="source"></param> 
            <param name="other"></param>            
            <returns>       
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Variance(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Variance is the measure of the amount of variation of all the scores for a variable (not just the extremes which give the range).
            </summary>
            <param name="source">a collection of items where the Variance is the measured.</param>            
            <returns>
            The Variance value.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.VarianceP(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Computes the VarianceP of a sequence of values.
            </summary>
            <param name="source">a collection of items where the VarianceP is the measured.</param>            
            <returns>
            The VarianceP value.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            The Standard Deviation of a statistical population, a data set, or a probability distribution is the square root of its variance.
            </summary>
            <param name="source">a collection of items where the Standard Deviation is the calculated.</param>            
            <returns>
            The Standard Deviation value.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            The Standard DeviationP of a statistical population, a data set, or a probability distribution is the square root of its variance.
            </summary>
            <param name="source">a collection of items where the Standard DeviationP is the calculated.</param>            
            <returns>
            The Standard DeviationP value.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Median(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Median is the number separating the higher half of a sample, a population, or a probability distribution, from the lower half.
            </summary>
            <param name="source">a collection of items where the Median is the calculated.</param>            
            <returns>
            The Median value.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Mode(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Mode is the value that occurs the most frequently in a data set or a probability distribution.
            </summary>
            <param name="source">a collection of items where the Mode is the calculated.</param>            
            <returns>
            The Mode value.
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Histogram(System.Collections.Generic.IEnumerable{System.Double},System.Double@,System.Double@)">
            <summary>
            Calculate the optimal bins for the given data
            </summary>
            <param name="source">The data you have</param>
            <param name="xMin">The minimum element</param>
            <param name="optimalBinWidth">The width between each bin</param>
            <returns>The bins</returns>
        </member>
        <member name="M:Common.LinqExtensions.Covariance(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Covariance is a measure of how much two variables change together.
            </summary>
            <param name="source"></param> 
            <param name="other"></param>            
            <returns>       
            </returns>
        </member>
        <member name="M:Common.LinqExtensions.Pearson(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Pearson's chi square test is used to assess two types of comparisons: tests of goodness of fit, and tests of independence.
            In other words, it is a measure of how well a sample distribution matches a predicted distribution or the degree of correlation between two sample distributions. Pearson's is often used in scientific applications to test the validity of hypotheses.
            </summary>
            <param name="source"></param> 
            <param name="other"></param>            
            <returns>       
            </returns>
        </member>
        <member name="M:Common.ListExtensions.RemoveAll``1(System.Collections.Generic.List{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Remove all elements in the removal collection. 
            </summary>
            <typeparam name="T">type of element</typeparam>
            <param name="sourceList">list where items in the collection will be removed from</param>
            <param name="collectionOfItemsToRemove">items to be removed</param>
            <returns>The number of elements removed</returns>
            <remarks>
            If type T implements the IEquatable&lt;T&gt; generic interface, the equality comparer is the Equals method of that interface; otherwise, the default equality comparer is Object.Equals. 
            </remarks>
        </member>
        <member name="M:Common.Mail.ParseMailAddressString(System.Net.Mail.MailAddressCollection,System.String,System.Boolean,System.Boolean)">
            <summary>
            Updates the mail address collection based on the address string. Each address must be separated with either a comma (,) or semicolon (;). 
            
            If the comma or semicolon is within a quoted string or parentheses, it will be ignored and treated as part of the email address.
            </summary>
            <param name="addressCollection">MailAddressCollection that will be updated</param>
            <param name="addressString">A comma or semicolon delimited string of email addresses</param>
            <param name="checkAddress">
            if true (default), the email addresses are check and if invalid it will NOT be added to the address collection.
            </param>
            <param name="throwExceptionOnBadAddress">
            if true (default), the first invalid email address will result in an FormatException being thrown.
            if false, all invalid email addresses will be ignored.
            
            This parameter is only valid when checkAddress is true.
            </param>
        </member>
        <member name="M:Common.Mail.IsValidAddress(System.String)">
            <summary>
            Determines if address is RFC822 complaint 
            </summary>
            <param name="emailAddress">email address to be validated</param>
            <returns>
            true if complaint; false otherwise
            </returns>
            <seealso aref="https://en.wikipedia.org/wiki/Email_address"/>
        </member>
        <member name="M:Common.MaxMinDateTime.CompareTo(System.DateTime)">
            <summary>
            Returns -1 if compareDateTime is greater than the Max DateTime
            Returns 1 if the compareDateTime is less than the Min DateTime
            Returns 0 to indicate that the compareDateTime is within the Range (IsBetween) of the Max and Min DateTimes.
            </summary>       
        </member>
        <member name="M:Common.MaxMinDateTime.CompareTo(Common.MaxMinDateTime)">
            <summary>
            Returns 0 if the MaxMinDateTime instances are the same.
            Returns 1 to indicated that the compareMaxMinDateTime instance "Over Laps" "this" instance (the Max and Min values are greater than the Max and Min values of "this" instance)
            Returns -1 to indicated that the "this" instance "Over Laps" compareMaxMinDateTime instance (the Max and Min values are greater than the Max and Min values of compareMaxMinDateTime instance)
            Otherwise, it returns 1 if "this" instance's time span is greater than compareMaxMinDateTime's time span. -1 is returned if the time span is less than "this" instance.
            </summary>       
            <example>
                MaxMinDateTime{03/01/2012,04/12/2012}.OverLaps(MaxMinDateTime{03/10/2012,04/15/2012}) returns -1
                MaxMinDateTime{03/01/2012,04/12/2012}.OverLaps(MaxMinDateTime{03/10/2012,04/01/2012}) returns 1 (Time Span between 3/1/2012 and 4/12/2012 is greater than 3/10/2012 and 4/1/2012)
                MaxMinDateTime{03/01/2012,04/12/2012}.OverLaps(MaxMinDateTime{02/10/2012,04/15/2012}) returns -1 (Time Span between 3/1/2012 and 4/12/2012 is less than 2/10/2012 and 4/15/2012)
                MaxMinDateTime{03/01/2012,04/12/2012}.OverLaps(MaxMinDateTime{03/01/2012,04/12/2012}) returns 0 (Same Date and Times)
                MaxMinDateTime{03/10/2012,04/15/2012}.OverLaps(MaxMinDateTime{03/01/2012,04/12/2012}) returns 1
            </example>
            <seealso cref="M:Common.MaxMinDateTime.OverLaps(Common.MaxMinDateTime)"/>
        </member>
        <member name="M:Common.MaxMinDateTime.IsBetween(System.DateTime)">
            <summary>
            Returns true if checkDateTime is greater than or equal to the Min value and less than or equal to the Max value.
            </summary>
            <param name="checkDateTime">The DateTime value that will be chaecked against the Min and Max range</param>
            <returns>true if checkDateTime is between the Min and Max range</returns>
        </member>
        <member name="M:Common.MaxMinDateTime.IsBetween(Common.MaxMinDateTime)">
            <summary>
            Returns true is the checkMaxMinDateTime instance is between "this" instance's Max and Min DateTime (inclusive)
            </summary>
        </member>
        <member name="M:Common.MaxMinDateTime.OverLaps(Common.MaxMinDateTime)">
            <summary>
            Returns 0 to indicated that either the instances are equal or one of the instances isBetween the Min/Max value of the other.
            Returns 1 to indicated that the maxminDateTimeOverLap instance "Over Laps" this instance (the Max and Min values are greater than the Max and Min values of "this" instance)
            Returns -1 to indicated that the "this" instance "Over Laps" maxminDateTimeOverLap instance (the Max and Min values are greater than the Max and Min values of maxminDateTimeOverLap instance)
            </summary>
            <example>
                MaxMinDateTime{03/01/2012,04/12/2012}.OverLaps(MaxMinDateTime{03/10/2012,04/15/2012}) returns -1
                MaxMinDateTime{03/01/2012,04/12/2012}.OverLaps(MaxMinDateTime{03/10/2012,04/01/2012}) returns 0 (argument instance IsBetween 3/1/2012 and 4/12/2012)
                MaxMinDateTime{03/01/2012,04/12/2012}.OverLaps(MaxMinDateTime{03/01/2012,04/12/2012}) returns 0 (Same Date and Times)
                MaxMinDateTime{03/10/2012,04/15/2012}.OverLaps(MaxMinDateTime{03/01/2012,04/12/2012}) returns 1
            </example>
            <seealso cref="M:Common.MaxMinDateTime.CompareTo(Common.MaxMinDateTime)"/>
        </member>
        <member name="M:Common.MaxMinDateTime.op_GreaterThan(Common.MaxMinDateTime,System.DateTime)">
            <summary>
            Returns true if the RHS is greater than the Max of the MaxMinDate instance.
            </summary>
        </member>
        <member name="M:Common.MaxMinDateTime.op_GreaterThanOrEqual(Common.MaxMinDateTime,System.DateTime)">
            <summary>
            Returns true if the RHS is greater than or equal to the Max of the MaxMinDate instance.
            </summary>
        </member>
        <member name="M:Common.MaxMinDateTime.op_LessThan(Common.MaxMinDateTime,System.DateTime)">
            <summary>
            Returns true if the RHS is less than the Min of the MaxMinDate instance.
            </summary>
        </member>
        <member name="M:Common.MaxMinDateTime.op_LessThanOrEqual(Common.MaxMinDateTime,System.DateTime)">
            <summary>
            Returns true if the RHS is less than or equal the Min of the MaxMinDate instance.
            </summary>
        </member>
        <member name="M:Common.MaxMinDateTime.op_GreaterThan(System.DateTime,Common.MaxMinDateTime)">
            <summary>
            Returns true if the LHS is greater than the Min of the MaxMinDate instance.
            </summary>
        </member>
        <member name="M:Common.MaxMinDateTime.op_GreaterThanOrEqual(System.DateTime,Common.MaxMinDateTime)">
            <summary>
            Returns true if the LHS is greater than or equal to the Min of the MaxMinDate instance.
            </summary>
        </member>
        <member name="M:Common.MaxMinDateTime.op_LessThan(System.DateTime,Common.MaxMinDateTime)">
            <summary>
            Returns true if the LHS is Less than the Max of the MaxMinDate instance.
            </summary>
        </member>
        <member name="M:Common.MaxMinDateTime.op_LessThanOrEqual(System.DateTime,Common.MaxMinDateTime)">
            <summary>
            Returns true if the LHS is Less than or equal to the Max of the MaxMinDate instance.
            </summary>
        </member>
        <member name="M:Common.MaxMinDateTime.op_GreaterThan(Common.MaxMinDateTime,Common.MaxMinDateTime)">
            <summary>
            Returns true if the LHS's Max is greater than the RHS and LHS's Min is greater than the RHS.
            </summary>
        </member>
        <member name="M:Common.MaxMinDateTime.op_GreaterThanOrEqual(Common.MaxMinDateTime,Common.MaxMinDateTime)">
            <summary>
            Returns true if the LHS's Max is greater than or equal to the RHS and LHS's Min is greater than or equal to the RHS.
            </summary>
        </member>
        <member name="M:Common.MaxMinDateTime.op_LessThan(Common.MaxMinDateTime,Common.MaxMinDateTime)">
            <summary>
            Returns true if the LHS's Max is less than the RHS and LHS's Min is less than the RHS.
            </summary>
        </member>
        <member name="M:Common.MaxMinDateTime.op_LessThanOrEqual(Common.MaxMinDateTime,Common.MaxMinDateTime)">
            <summary>
            Returns true if the LHS's Max is less than or equal to the RHS and LHS's Min is less than or equal to the RHS.
            </summary>
        </member>
        <member name="T:Common.MultipleDataAdapterHostEnvironments">
            <summary>
            Allows the association of multiple SQL connection string to predefined (i.e., Development, QA, Production) and user defined environment keywords.
            </summary>
            <remarks>
            This manages a collection of adapters where each adapters' connection string is set based on the current environment's connection string.
            
            Each Data Adapter must inherit from IDataAdapterMultipleConnectionSupport...
            When using a Table Adapter Manager, it must inherit from IMultipleDataAdapterConnectionAgent...
            </remarks>
            <seealso cref="T:Common.IDataAdapterMultipleConnectionSupport"/>
            <seealso cref="T:Common.IMultipleDataAdapterConnectionAgent"/>
        </member>
        <member name="P:Common.MultipleDataAdapterHostEnvironments.HostName">
            <summary>
            The Host Name of the &quot;Current&quot; Environment's Connection String Host 
            </summary>
        </member>
        <member name="P:Common.MultipleDataAdapterHostEnvironments.ClosePriorConnection">
            <summary>
            If true the prior connection is closed before switching to the new connection environment.
            </summary>
        </member>
        <member name="P:Common.MultipleDataAdapterHostEnvironments.Environment">
            <summary>
            Gets the current environment or sets the environment to the given value. Null can be set, which indicates no environment set.
            </summary>
        </member>
        <member name="P:Common.MultipleDataAdapterHostEnvironments.Item(Common.MultipleDataAdapterHostEnvironments.Environments)">
            <summary>
            Gets the associated connection string or null to indicate that there is no associations. Sets the environment to the given connection string.
            </summary>
            <param name="environment"></param>
            <returns></returns>
        </member>
        <member name="P:Common.MultipleDataAdapterHostEnvironments.ProductionConnectionString">
            <summary>
            Sets/Gets the Production Environment's connection string.
            </summary>
        </member>
        <member name="P:Common.MultipleDataAdapterHostEnvironments.DevleopmentConnectionString">
            <summary>
            Sets/Gets the Development Environment's connection string.
            </summary>
        </member>
        <member name="P:Common.MultipleDataAdapterHostEnvironments.QAConnectionString">
            <summary>
            Sets/Gets the QA's Environment's connection string.
            </summary>
        </member>
        <member name="P:Common.MultipleDataAdapterHostEnvironments.DataAdapters">
            <summary>
            Sets/Gets an array of Associated Data Adapters. If setting value is null, all adapters are removed.
            </summary>
        </member>
        <member name="M:Common.MultipleDataAdapterHostEnvironments.Enabled(Common.MultipleDataAdapterHostEnvironments.Environments)">
            <summary>
            Determines if the environment is enabled
            </summary>
            <param name="environment">The environment to check</param>
            <returns>True to indicate that the environment is enabled. If the environment is NOT defined, false is returned.</returns>
        </member>
        <member name="M:Common.MultipleDataAdapterHostEnvironments.Enabled(Common.MultipleDataAdapterHostEnvironments.Environments,System.Boolean)">
            <summary>
            Sets the Enabled status of the environment.
            </summary>
            <param name="environment">The environment's enable status to set</param>
            <param name="enabled">The enable status</param>
            <returns>Returns the value of enabled</returns>
            <remarks>
            If environment is not defined, it is created with the enabled status.
            </remarks>
        </member>
        <member name="M:Common.MultipleDataAdapterHostEnvironments.Add(Common.IDataAdapterMultipleConnectionSupport,System.Boolean)">
            <summary>
            Adds the data adapter to the adapter collection for connection string environment management. 
            </summary>
            <param name="dataAdapter">Data Adapter</param>
            <param name="setEnvironment">If true (default), the adapter's connection string is set to the current environment's connection string. If false the adapter's connection string is NOT set but is added to the collection.</param>
            <returns>True to indicate that is was added. False to indicate that the adapter was already in the collection</returns>
        </member>
        <member name="M:Common.MultipleDataAdapterHostEnvironments.Add(System.Collections.Generic.IEnumerable{Common.IDataAdapterMultipleConnectionSupport},System.Boolean)">
            <summary>
            Adds a collection of adapters to the adapter collection for connection string environment management. 
            </summary>
            <param name="dataAdapters">A data adapter collection to associate with the management collection</param>
            <param name="setEnvironment">If true (default), the adapter's connection string is set to the current environment's connection string. If false the adapter's connection string is NOT set but is added to the collection.</param>
            <returns>True to indicate at least one adapter was added.</returns>
            <seealso cref="M:Common.MultipleDataAdapterHostEnvironments.Add(Common.IDataAdapterMultipleConnectionSupport,System.Boolean)"/>
        </member>
        <member name="M:Common.MultipleDataAdapterHostEnvironments.Remove(Common.IDataAdapterMultipleConnectionSupport)">
            <summary>
            Removes the adapter from the managed collection.
            </summary>
            <param name="dataAdapter">The adapter that will be removed</param>
            <returns>True to indicate that it was removed.</returns>
        </member>
        <member name="M:Common.MultipleDataAdapterHostEnvironments.RemoveAllDataAdapters">
            <summary>
            Removes all adapters from the manged collection.
            </summary>
            <returns>True to indicate that all adapters were removed.</returns>
        </member>
        <member name="M:Common.MultipleDataAdapterHostEnvironments.SetConnectionString(Common.MultipleDataAdapterHostEnvironments.Environments,System.String,System.Collections.Generic.IEnumerable{Common.IDataAdapterMultipleConnectionSupport})">
            <summary>
            Associates the environment with given connection string and current collection of adapters or the given collection of adapters.
            </summary>
            <param name="environment">
            The environment keyword associated with the connection string.
            
            If Environments.All is given, the connection string is associated with all defined environments based on the given adapters.
            </param>
            <param name="connectionString">The connection string</param>
            <param name="onlyForTheseAdapters">
            If null (default), the current adapter collection is associated with this environment.
            If not null, the collection of adapters are associated with this environment.
            </param>
            <remarks>
            If the environment is already defined, the connection string is replaced with this connection string. The associated adapters are update with the current adapters or the given adapters.
            </remarks>
        </member>
        <member name="M:Common.MultipleDataAdapterHostEnvironments.RemoveEnvironment(Common.MultipleDataAdapterHostEnvironments.Environments)">
            <summary>
            Removes the environment.
            </summary>
            <param name="removeEnvironment">The environment that will be removed</param>
            <returns>True to indicate that it was removed.</returns>
        </member>
        <member name="M:Common.MultipleDataAdapterHostEnvironments.RemoveAllEnvironments">
            <summary>
            Remove all environments.
            </summary>
            <returns>True to indicate that all environments were removed</returns>
        </member>
        <member name="M:Common.MultipleDataAdapterHostEnvironments.GetConnectionString(Common.MultipleDataAdapterHostEnvironments.Environments)">
            <summary>
            Returns the connection string for the environment.
            </summary>
            <param name="environment">Connection String for the given environment</param>
            <returns>The connection string or null when the environment is not defined</returns>
        </member>
        <member name="M:Common.MultipleDataAdapterHostEnvironments.GetConnectionHostName(Common.MultipleDataAdapterHostEnvironments.Environments)">
            <summary>
            Returns the connection string host for the environment
            </summary>
            <param name="environment">The host of the given environment</param>
            <returns>The connection host for the given environment. Null to indicate that the environment was not defined.</returns>
        </member>
        <member name="M:Common.MultipleDataAdapterHostEnvironments.IsEnvironmentCurrent(Common.MultipleDataAdapterHostEnvironments.Environments)">
            <summary>
            Determine if the given environment is the current environment or not...
            </summary>
            <param name="environment">Environment to check</param>
            <returns>True to indicate that it is or false that it is not</returns>
        </member>
        <member name="M:Common.MultipleDataAdapterHostEnvironments.MakeEnvironmentCurrent(Common.MultipleDataAdapterHostEnvironments.Environments,System.Collections.Generic.IEnumerable{Common.IDataAdapterMultipleConnectionSupport},System.Boolean)">
            <summary>
            Makes the given environment the current environment setting the connection string of the associated adapters or only the adapters given.
            </summary>
            <param name="environment">Environment to make the current</param>
            <param name="onlyForTheseAdapters">
            Null (default), to set the associated adapters' connection string.
            A collection of adapters where only these adapters' connection string are set based on this environment.
            </param>
            <param name="forceChange">
            If true (default false), the adapters' connection string are always updated regardless of the current environment setting.
            If false (default) and if the current environment is the same as this environment, the adapters' connection strings are NOT updated.
            </param>
            <returns>True to indicate that the current environment is now the given environment.</returns>
        </member>
        <member name="M:Common.MultipleDataAdapterHostEnvironments.HasSQLServerAlaisDefined(System.String)">
            <summary>
            Determines if the given name is a defined alias name
            </summary>
            <param name="sqlserverAliasName">The name to determine is it is an alias</param>
            <returns>True if it is an alias</returns>
        </member>
        <member name="M:Common.MultipleDataAdapterHostEnvironments.SQLServerHostEntry(System.String)">
            <summary>
            Returns the IP Host Entry object
            </summary>
            <param name="sqlserverAliasOrHostName">The SQL Server Alias or Host Name used to detrmine the iP object</param>
            <returns>The Ip Host Entry or null</returns>
        </member>
        <member name="M:Common.MultipleDataAdapterHostEnvironments.SQLServerHostName(System.String)">
            <summary>
            Returns the SQL Server Host Name based on the connection string
            </summary>
            <param name="sqlserverConnectionString">Connection String</param>
            <returns>Returns the Host Name of the connection string</returns>
        </member>
        <member name="F:Common.MultipleDataAdapterHostEnvironments.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Common.MultipleDataAdapterHostEnvironments.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Common.MultipleDataAdapterHostEnvironments.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:Common.IDataAdapterMultipleConnectionSupport">
            <summary>
            Must be defined for Data Adapters used in the MultipleDataAdapterHostEnvironments class
            </summary>
            <example>
            Below is an example of an implementation of this interface.
            <code>
            	partial class TestTableAdapter : Common.IDataAdapterMultipleConnectionSupport
            	{
            		public string Name
            		{
            			get { return this.GetType().Name; }
            		}
            
            		public System.Data.IDbConnection SQLConnection
            		{
            			get { return this.Connection; }
            			set { this.Connection = value as System.Data.SqlClient.SqlConnection; }
            		}
            
            		public bool Equals(Common.IDataAdapterMultipleConnectionSupport x, Common.IDataAdapterMultipleConnectionSupport y)
            		{
            			return x.Name == y.Name;
            		}
            
            		public int GetHashCode(Common.IDataAdapterMultipleConnectionSupport obj)
            		{
            			return this.Name.GetHashCode();
            		}
            
            		public System.Data.MissingMappingAction MissingMappingAction
            		{
            			get { return this.Adapter.MissingMappingAction; }
            			set { this.Adapter.MissingMappingAction = value; }
            		}
            
            		[System.ComponentModel.Browsable(true)]
            		public System.Data.MissingSchemaAction MissingSchemaAction
            		{
            			get { return this.Adapter.MissingSchemaAction; }
            			set { this.Adapter.MissingSchemaAction = value; }
            		}
            
            		public System.Data.ITableMappingCollection TableMappings
            		{
            			get { return this.Adapter.TableMappings; }
            		}
            
            		public int Fill(System.Data.DataSet dataSet)
            		{
            			return this.Adapter.Fill(dataSet);
            		}
            
            		public System.Data.DataTable[] FillSchema(System.Data.DataSet dataSet, System.Data.SchemaType schemaType)
            		{
            			return this.Adapter.FillSchema(dataSet, schemaType);
            		}
            
            		public System.Data.IDataParameter[] GetFillParameters()
            		{
            			return this.Adapter.GetFillParameters();
            		}
            
            		public int Update(System.Data.DataSet dataSet)
            		{
            			return this.Adapter.Update(dataSet);
            		}		
            	}
            </code>
            </example>
        </member>
        <member name="T:Common.IMultipleDataAdapterConnectionAgent">
             <summary>
             This interface is used to define an association between a Table Adapter Manager and a MultipleDataAdapterHostEnvironments object.
             </summary>
             <example>
              Below is an example of an implementation of this interface. Note that TestTableAdapter is an IDataAdapterMultipleConnectionSupport.
             <code>
             partial class TableAdapterManager : Common.IMultipleDataAdapterConnectionAgent
            	{
            		private Common.MultipleDataAdapterHostEnvironments _multipleDataAdapterHostEnvironments = null;
            
            		public Common.MultipleDataAdapterHostEnvironments MultipleDataAdapterHostEnvironments
            		{
            			get { return this._multipleDataAdapterHostEnvironments; }
            			set
            			{
            				var prevValue = this._multipleDataAdapterHostEnvironments;
            
            				if (prevValue != value)
            				{
            					if (prevValue != null)
            					{
            						if (this.TestTableAdapter != null)
            						{
            							this.MultipleDataAdapterHostEnvironments.Remove(this.TestTableAdapter);
            						}
            					}
            
            					this._multipleDataAdapterHostEnvironments = value;
            
            					if (this._multipleDataAdapterHostEnvironments != null)
            					{
            						if (this.TestTableAdapter != null)
            						{
            							this.MultipleDataAdapterHostEnvironments.Add(this.TestTableAdapter);
            						}
            					}
            				}
            			}
            		}
            	}
             </code>
             Code defined in the main body of an application.
             <code>
             class Program
            {
            	static Common.MultipleDataAdapterHostEnvironments databaseEnvironments = new Common.MultipleDataAdapterHostEnvironments();
            
                static void Main(string[] args)
                {
            			var arguments = CommandLineArguments.Parse(args);
            	
            			MyData.MyDataSet myDataSet = new MyData.MyDataSet();
            			MyData.MyTableAdapters.TableAdapterManager myDataAdapterMgr = new MyData.MyTableAdapters.TableAdapterManager();
            		
            			databaseEnvironments.ProductionConnectionString = MyData.Properties.Settings.Default.SqlConnectionStringProd;
            			databaseEnvironments.DevelopmentConnectionString = MyData.Properties.Settings.Default.SqlConnectionString;
            		
            			myDataAdapterMgr.TestTableAdapter = new MyData.MyTableAdapters.TestTableAdapter();
            
            			myDataAdapterMgr.MultipleDataAdapterHostEnvironments = databaseEnvironments;
            
            			databaseEnvironments.Environment = arguments.Environment; //Passed in from Command Line the Environment being used (e.g., Development, Production, etc.)
            			
            			//Now the Data Adapters will have the proper Connection String set...
            	}
             </code>
             
             </example>
        </member>
        <member name="T:Common.ParseSubstitution">
            \ \ 
            <summary>
            Helper class used to parse a string and substitute inline
            tags/parameters with system and/or user defined values.
            
            
            
            For more information see also <see cref="M:Common.ParseSubstitution.Parse(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Text.RegularExpressions.Regex,System.Boolean)" />.
            </summary>                                                                                                                                                                   
        </member>
        <member name="M:Common.ParseSubstitution.Parse(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Text.RegularExpressions.Regex,System.Boolean)">
            <summary>
            Parses the given string resolving any inline tags/parameters.
            </summary>
            <param name="parseString">String that
                                      will be
                                      parsed,
                                      substituting
                                      predefined or
                                      user supplied
                                      tags
                                      (parameters)
                                      with current
                                      values of
                                      those tags.</param>
            <param name="substituteVarNameValueCollection">If not null
                                                           (default is
                                                           null), a
                                                           key\-value
                                                           pair
                                                           collection
                                                           where the key
                                                           is the
                                                           parameter
                                                           name (tag)
                                                           and the value
                                                           associated
                                                           with this
                                                           tag. </param>
            <param name="matchRegurlarExpress">If not null
                                              (default is
                                              null), a
                                              regular
                                              express that
                                              is used to
                                              identify
                                              tags. if null
                                              (default),
                                              the system
                                              default will
                                              be used (see <see cref="F:Common.ConfigHelper.regexParseVarNames" text="ConfigHelper.regexParseVarNames Field" />).
                                              The default
                                              identifies
                                              tags/parameters
                                              by starting
                                              '[' and
                                              ending ']'.</param>
            <param name="checkStandardSystemParams">If True
                                                    (default),
                                                    the standard
                                                    system tags
                                                    (parameters)
                                                    are used for
                                                    substitution.
                                                    If false,
                                                    only the user
                                                    defined
                                                    collection is
                                                    used
                                                    (substituteVarNameValueCollection).</param>
            <remarks>
            A tag/parameter is identified by starting '[' and ending ']'
            characters when using the system defined regular express.
            
            \Examples of tags are [LoggedInUser], [MyDocuments], etc.
            
            
            
            If the tag/parameter is not identified, that tag is not
            substituted and returned in the string.
            </remarks>
            <returns>
            A completely parsed string where each inline tag/parameter is
            substituted with the current system/user value.
            </returns>
            __________________________________________________
            Note:
            Below are the System Defined Tags/Parameters:
            
            <xtable>
            Tag/Parameter                                                                                                \Summary                                                     Comments
             Name                                                                                                                                                                      

            AssemblyDir                                                                                                  The                                                          See <see cref="P:Common.Functions.AssemblyDir" text="Functions.AssemblyDir Property" />
                                                                                                                          directory                                                    
                                                                                                                          of the                                                       
                                                                                                                          loaded exe                                                   
                                                                                                                          Assembly.                                                    
                                                                                                                          This is                                                      
                                                                                                                          similar to                                                   
                                                                                                                          AssemblyLocation,                                            
                                                                                                                          except that                                                  
                                                                                                                          a                                                            
                                                                                                                          normalized                                                   
                                                                                                                          direction                                                    
                                                                                                                          string is                                                    
                                                                                                                          returned.                                                    
                                                                                                                          Null can be                                                  
                                                                                                                          returned.                                                    
            AssemblyFullName                                                                                             The Full                                                     See <see cref="P:Common.Functions.AssemblyFullName" text="Functions.AssemblyFullName Property" /> See
                                                                                                                          name of the                                                 
                                                                                                                          loaded exe                                                   
                                                                                                                          Assembly.                                                    
                                                                                                                          Null can be                                                  
                                                                                                                          returned.                                                    
            AssemblyLocation                                                                                             Gets the                                                     See <see cref="P:Common.Functions.AssemblyLocation" text="Functions.AssemblyLocation Property" /> See
                                                                                                                          full path                                                    <see cref="P:System.Reflection.Assembly.Location"></see>
                                                                                                                          or UNC                                                     
                                                                                                                          location of                                                  
                                                                                                                          the loaded                                                   
                                                                                                                          \file that                                                   
                                                                                                                          contains                                                     
                                                                                                                          the                                                          
                                                                                                                          manifest.                                                    
                                                                                                                          Null can be                                                  
                                                                                                                          returned.                                                    
            ApplicationName,<para></para>AppName                                                                         The                                                          See <see cref="P:Common.Functions.ApplicationName" text="Functions.ApplicationName Property" /><para></para>See
                                                                                                                          application                                                  <see cref="P:System.Reflection.AssemblyProductAttribute.Product"></see>
                                                                                                                          name that                                                    See
                                                                                                                          is                                                           <see cref="P:System.AppDomain.FriendlyName"/>
                                                                                                                          determined                                                   Property
                                                                                                                          by first                                                     
                                                                                                                          looking at                                                   
                                                                                                                          the                                                          
                                                                                                                          Assembly                                                     
                                                                                                                          Product                                                      
                                                                                                                          Attribute's                                                  
                                                                                                                          Product                                                      
                                                                                                                          property of                                                  
                                                                                                                          the                                                          
                                                                                                                          Assembly.                                                    
                                                                                                                          If this is                                                   
                                                                                                                          null, the                                                    
                                                                                                                          current                                                      
                                                                                                                          Domain's                                                     
                                                                                                                          friendly                                                     
                                                                                                                          name                                                         
                                                                                                                          (removes                                                     
                                                                                                                          the &quot;exe&quot;                                          
                                                                                                                          from the                                                     
                                                                                                                          name).                                                       
            ApplicationUserProfile,<para></para>AppUserProfile                                                           Defined as                                                   See <see cref="T:System.Environment.SpecialFolder"></see>
                                                                                                                          &quot;[MyDocuments]\\[ApplicationName]&quot;.<para></para>   Enumeration
            ApplicationVersion,<para></para>AppVersion,<para></para>AppVer                                               The                                                          See <see cref="P:Common.Functions.ApplicationVersion" text="Functions.ApplicationVersion Property" /><para></para>See
                                                                                                                          Application                                                  <see cref="P:System.Reflection.AssemblyVersionAttribute.Version"></see>
                                                                                                                          \version                                                     Property. See
                                                                                                                          (v.v.v.v)                                                    <see cref="P:System.Reflection.AssemblyName.Version"></see>
                                                                                                                          of the                                                       Property. See
                                                                                                                          executing                                                    <see cref="M:System.Reflection.Assembly.GetEntryAssembly"></see>
                                                                                                                          assembly.                                                    Method. See
                                                                                                                          The version                                                  <see cref="M:System.Reflection.Assembly.GetName"></see>
                                                                                                                          is first                                                     Method
                                                                                                                          determined                                                   
                                                                                                                          by looking                                                   
                                                                                                                          at the                                                       
                                                                                                                          Assembly                                                     
                                                                                                                          \Version                                                     
                                                                                                                          Attribute's                                                  
                                                                                                                          \Version                                                     
                                                                                                                          property.                                                    
                                                                                                                          If this is                                                   
                                                                                                                          null, the                                                    
                                                                                                                          entry                                                        
                                                                                                                          assembly's                                                   
                                                                                                                          name                                                         
                                                                                                                          object's                                                     
                                                                                                                          \Version                                                     
                                                                                                                          property is                                                  
                                                                                                                          used. Null                                                   
                                                                                                                          can be                                                       
                                                                                                                          returned.                                                    
            ApplicationVersionName,<para></para>ApplicationVerName,<para></para>AppVersionName,<para></para>AppVerName   Defined as                                                   
                                                                                                                          &quot;[ApplicationName]_[DeploymentVersion]&quot;.           
            CompanyName                                                                                                  The name of                                                  See <see cref="P:Common.Functions.CompanyName" text="Functions.CompanyName Property" /><para></para>See
                                                                                                                          the Company                                                  <see cref="P:System.Reflection.AssemblyCompanyAttribute.Company"></see>
                                                                                                                          as defined                                                   Property.
                                                                                                                          in the                                                       
                                                                                                                          Assembly.                                                    
                                                                                                                          This is                                                      
                                                                                                                          determined                                                   
                                                                                                                          by looking                                                   
                                                                                                                          at the                                                       
                                                                                                                          Assembly                                                     
                                                                                                                          Company                                                      
                                                                                                                          Attribute's                                                  
                                                                                                                          Company                                                      
                                                                                                                          property.                                                    
                                                                                                                          Null can be                                                  
                                                                                                                          returned.                                                    
            CurrentDir,<para></para>CurrentDirectory,<para></para>CurrDir                                                The Current                                                  See <see cref="M:System.IO.Directory.GetCurrentDirectory"></see>
                                                                                                                          Working                                                      Method
                                                                                                                          Directory                                                    
                                                                                                                          which can                                                    
                                                                                                                          be                                                           
                                                                                                                          different                                                    
                                                                                                                          from where                                                   
                                                                                                                          the                                                          
                                                                                                                          Application                                                  
                                                                                                                          started. This                                                
                                                                                                                          value is                                                     
                                                                                                                          based on                                                     
                                                                                                                          the                                                          
                                                                                                                          System.IO.Directory.GetCurrentDirectory()                    
                                                                                                                          method.                                                      
            DeploymentLocation,<para></para>DeployLocation,<para></para>DeploymentLoc,<para></para>DeployLoc             The                                                          See <see cref="P:System.Deployment.Application.ApplicationDeployment.CurrentDeployment"></see>
                                                                                                                          Directory                                                    Property. See
                                                                                                                          Location of                                                  <see cref="P:System.Deployment.Application.ApplicationDeployment.UpdateLocation"></see>
                                                                                                                          where the                                                    Property
                                                                                                                          Deployment                                                   
                                                                                                                          Package                                                      
                                                                                                                          was/is                                                       
                                                                                                                          being                                                        
                                                                                                                          deployed.                                                    
                                                                                                                          This is                                                      
                                                                                                                          determined                                                   
                                                                                                                          by looking                                                   
                                                                                                                          at the                                                       
                                                                                                                          Application                                                  
                                                                                                                          Deployment                                                   
                                                                                                                          Update's                                                     
                                                                                                                          Location                                                     
                                                                                                                          property.                                                    
                                                                                                                          If null,                                                     
                                                                                                                          string &quot;.&quot;                                         
                                                                                                                          is                                                           
                                                                                                                          returned,                                                    
                                                                                                                          otherwise a                                                  
                                                                                                                          local                                                        
                                                                                                                          directory                                                    
                                                                                                                          is                                                           
                                                                                                                          returned.                                                    
            DeploymentLocationData,<para></para>DeployLocData                                                            The                                                          See <see cref="P:System.Deployment.Application.ApplicationDeployment.CurrentDeployment"></see>
                                                                                                                          Directory                                                    Property. See
                                                                                                                          location of                                                  <see cref="P:System.Deployment.Application.ApplicationDeployment.DataDirectory"></see>
                                                                                                                          where the                                                    Property
                                                                                                                          data                                                         
                                                                                                                          portion of                                                   
                                                                                                                          the                                                          
                                                                                                                          deployment                                                   
                                                                                                                          package is                                                   
                                                                                                                          located. This                                                
                                                                                                                          is                                                           
                                                                                                                          determined                                                   
                                                                                                                          by looking                                                   
                                                                                                                          at the                                                       
                                                                                                                          Application                                                  
                                                                                                                          Deployment                                                   
                                                                                                                          Update's                                                     
                                                                                                                          DataDirectory                                                
                                                                                                                          property. A                                                  
                                                                                                                          local                                                        
                                                                                                                          directory                                                    
                                                                                                                          is returned                                                  
                                                                                                                          or null is                                                   
                                                                                                                          returned.                                                    
            DeploymentVersion,<para></para>DeploymentVer,<para></para>DeployVer                                          The                                                          See <see cref="T:System.Deployment.Application.ApplicationDeployment"></see>
                                                                                                                          Deployment                                                   Class. See
                                                                                                                          \Version of                                                  <see cref="P:System.Deployment.Application.ApplicationDeployment.CurrentDeployment"></see>
                                                                                                                          the                                                          Property. See
                                                                                                                          Deployment                                                   <see cref="P:System.Deployment.Application.ApplicationDeployment.CurrentVersion"></see>
                                                                                                                          Package. If                                                  Property
                                                                                                                          there is no                                                  
                                                                                                                          Deployment                                                   
                                                                                                                          Package                                                      
                                                                                                                          (version)                                                    
                                                                                                                          the                                                          
                                                                                                                          Application's                                                
                                                                                                                          \Version is                                                  
                                                                                                                          used. This                                                   
                                                                                                                          is                                                           
                                                                                                                          determined                                                   
                                                                                                                          by looking                                                   
                                                                                                                          at the                                                       
                                                                                                                          Application                                                  
                                                                                                                          Deployment's                                                 
                                                                                                                          Current                                                      
                                                                                                                          Deployment                                                   
                                                                                                                          property's                                                   
                                                                                                                          \Current                                                     
                                                                                                                          \Version                                                     
                                                                                                                          property.                                                    
                                                                                                                          If this is                                                   
                                                                                                                          null, the                                                    
                                                                                                                          Application                                                  
                                                                                                                          \Version                                                     
                                                                                                                          property's                                                   
                                                                                                                          value is                                                     
                                                                                                                          used.<para></para>                                           
            DomainName                                                                                                   The name of                                                  See <see cref="P:Common.Functions.DomainName" text="Functions.DomainName Property" /><para></para>See
                                                                                                                          the Domain                                                   <see cref="P:Common.Functions.Host" text="Functions.Host Property" />
                                                                                                                          the users                                                    
                                                                                                                          belongs to.                                                  
                                                                                                                          If the user                                                  
                                                                                                                          does not                                                     
                                                                                                                          belong to a                                                  
                                                                                                                          domain the                                                   
                                                                                                                          computer's                                                   
                                                                                                                          Name is                                                      
                                                                                                                          used. This                                                   
                                                                                                                          is                                                           
                                                                                                                          determined                                                   
                                                                                                                          by looking                                                   
                                                                                                                          at the                                                       
                                                                                                                          system                                                       
                                                                                                                          environment's                                                
                                                                                                                          User Domain                                                  
                                                                                                                          Name. If                                                     
                                                                                                                          null the                                                     
                                                                                                                          LocalHostName                                                
                                                                                                                          name is                                                      
                                                                                                                          used.                                                        
            DomainFQ                                                                                                     The Fully                                                    See <see cref="P:Common.Functions.DomainFQ" text="Functions.DomainFQ Property" /><para></para>See
                                                                                                                          qualified                                                    <see cref="M:System.Net.NetworkInformation.IPGlobalProperties.GetIPGlobalProperties"></see>
                                                                                                                          Domain name                                                  Method. See
                                                                                                                          of the                                                       <see cref="P:System.Net.NetworkInformation.IPGlobalProperties.DomainName"></see>
                                                                                                                          Domain this                                                  Property
                                                                                                                          computer                                                     
                                                                                                                          belongs to.                                                  
                                                                                                                          This is                                                      
                                                                                                                          based on                                                     
                                                                                                                          the network                                                  
                                                                                                                          IP global's                                                  
                                                                                                                          DomainName                                                   
                                                                                                                          property.                                                    
            LocalHostFullName                                                                                            The Fully                                                    See <see cref="P:Common.Functions.HostFullName" text="Functions.HostFullName Property" /><para></para>
                                                                                                                          Qualified                                                    
                                                                                                                          Name of                                                      
                                                                                                                          this                                                         
                                                                                                                          Computer                                                     
                                                                                                                          including                                                    
                                                                                                                          domain.                                                      
                                                                                                                          This                                                         
                                                                                                                          \returns                                                     
                                                                                                                          either the                                                   
                                                                                                                          fully                                                        
                                                                                                                          qualified                                                    
                                                                                                                          host name                                                    
                                                                                                                          (hostname.dns),                                              
                                                                                                                          domain-host                                                  
                                                                                                                          format                                                       
                                                                                                                          (domain\\host),                                              
                                                                                                                          or just the                                                  
                                                                                                                          host name.                                                   
            LocalHostIPAddress                                                                                           The IP 4                                                     See <see cref="P:Common.Functions.IP" text="Functions.IP Property" />
                                                                                                                          address                                                      
                                                                                                                          (x.x.x.x)                                                    
                                                                                                                          of the                                                       
                                                                                                                          local host.                                                  
                                                                                                                          If there is                                                  
                                                                                                                          no network                                                   
                                                                                                                          adapter,                                                     
                                                                                                                          null is                                                      
                                                                                                                          returned.                                                    
                                                                                                                          If there                                                     
                                                                                                                          are network                                                  
                                                                                                                          adapters                                                     
                                                                                                                          defined and                                                  
                                                                                                                          if there is                                                  
                                                                                                                          an error                                                     
                                                                                                                          trying to                                                    
                                                                                                                          get the IP                                                   
                                                                                                                          4 the loop                                                   
                                                                                                                          back IP                                                      
                                                                                                                          address is                                                   
                                                                                                                          used.                                                        
            LocalHostName                                                                                                The name of                                                  See <see cref="P:Common.Functions.Host" text="Functions.Host Property" />
                                                                                                                          this Local                                                   
                                                                                                                          Host                                                         
                                                                                                                          (without                                                     
                                                                                                                          domain).                                                     
                                                                                                                          The name is                                                  
                                                                                                                          determined                                                   
                                                                                                                          by looking                                                   
                                                                                                                          at the                                                       
                                                                                                                          system                                                       
                                                                                                                          global IP's                                                  
                                                                                                                          HostName                                                     
                                                                                                                          property.                                                    
                                                                                                                          If null,                                                     
                                                                                                                          system                                                       
                                                                                                                          Dns's                                                        
                                                                                                                          GetHostName()                                                
                                                                                                                          method, or                                                   
                                                                                                                          the system                                                   
                                                                                                                          Environment's                                                
                                                                                                                          MachineName                                                  
                                                                                                                          property.                                                    
            LocalHostNameFQDN                                                                                            The Fully                                                    See <see cref="P:Common.Functions.HostFQDN" text="Functions.HostFQDN Property" />
                                                                                                                          Qualified                                                    
                                                                                                                          Name of                                                      
                                                                                                                          this                                                         
                                                                                                                          Computer                                                     
                                                                                                                          including                                                    
                                                                                                                          domain. If                                                   
                                                                                                                          the domain                                                   
                                                                                                                          does not                                                     
                                                                                                                          exists just                                                  
                                                                                                                          the name of                                                  
                                                                                                                          this                                                         
                                                                                                                          computer.                                                    
                                                                                                                          \Returns                                                     
                                                                                                                          either the                                                   
                                                                                                                          fully                                                        
                                                                                                                          qualified                                                    
                                                                                                                          host name                                                    
                                                                                                                          (hostname.dns)                                               
                                                                                                                          or just the                                                  
                                                                                                                          host name.                                                   
            LoggedInUser                                                                                                 The user                                                     See <see cref="P:Common.Functions.CurrentUserID" text="Functions.CurrentUserID Property" />
                                                                                                                          name of the                                                  
                                                                                                                          logged in                                                    
                                                                                                                          User with                                                    
                                                                                                                          domain                                                       
                                                                                                                          (domain\\userid).                                            
            MachineName                                                                                                  The NetBIOS                                                  See <see cref="P:System.Environment.MachineName"></see>
                                                                                                                          name of                                                      Property
                                                                                                                          this local                                                   
                                                                                                                          computer.                                                    
                                                                                                                          This uses                                                    
                                                                                                                          the                                                          
                                                                                                                          Environment's                                                
                                                                                                                          MachineName                                                  
                                                                                                                          property.                                                    
            OperatingSystemVersion,<para></para>OSVersion                                                                The name of                                                  See <see cref="P:System.OperatingSystem.VersionString"></see>
                                                                                                                          the current                                                  Property. See
                                                                                                                          OS Version                                                   <see cref="P:System.Environment.OSVersion"></see>
                                                                                                                          (e.g.,                                                       Property
                                                                                                                          &quot;Microsoft                                              
                                                                                                                          Windows NT                                                   
                                                                                                                          6.0.6002                                                     
                                                                                                                          Service                                                      
                                                                                                                          Pack 2&quot;).                                               
                                                                                                                          This uses                                                    
                                                                                                                          the                                                          
                                                                                                                          Environment's                                                
                                                                                                                          OSVersion                                                    
                                                                                                                          property.                                                    
            OSPlatformId                                                                                                 The OS                                                       See <see cref="P:System.Environment.OSVersion"></see>
                                                                                                                          platform id                                                  Property
                                                                                                                          as defined                                                   
                                                                                                                          by                                                           
                                                                                                                          Microsoft.                                                   
            ProcessId                                                                                                    The process                                                  See <see cref="P:Common.Functions.ProcessId" text="Functions.ProcessId Property" />. See<see cref="M:System.Diagnostics.Process.GetCurrentProcess"></see>
                                                                                                                          id of the                                                    Method
                                                                                                                          current                                                      
                                                                                                                          process.                                                     
                                                                                                                          This uses                                                    
                                                                                                                          the                                                          
                                                                                                                          Diagnostics                                                  
                                                                                                                          Process's                                                    
                                                                                                                          get Current                                                  
                                                                                                                          Process Id                                                   
                                                                                                                          method.                                                      
            StartUpDirectory,<para></para>StartUpDir                                                                     The                                                          See <see cref="P:Common.Functions.StartUpDir" text="Functions.StartUpDir Property" /><para></para>See<see cref="M:System.Diagnostics.Process.GetCurrentProcess"></see>
                                                                                                                          directory                                                    Method<para></para>See
                                                                                                                          where the                                                    <see cref="P:System.Diagnostics.Process.StartInfo"></see>
                                                                                                                          Process/Application                                          Property
                                                                                                                          started.                                                     
                                                                                                                          This value                                                   
                                                                                                                          is                                                           
                                                                                                                          determined                                                   
                                                                                                                          by the                                                       
                                                                                                                          Diagnostics                                                  
                                                                                                                          Process's                                                    
                                                                                                                          StartInfo                                                    
                                                                                                                          property.                                                    
            UserName                                                                                                     The display                                                  See <see cref="P:System.Environment.UserName"></see>
                                                                                                                          name of the                                                  Property<para></para>See
                                                                                                                          logged in                                                    <see cref="P:Common.Functions.CurrentUserName" text="Functions.CurrentUserName Property" />
                                                                                                                          user. This                                                   
                                                                                                                          first looks                                                  
                                                                                                                          at the                                                       
                                                                                                                          Environment's                                                
                                                                                                                          UserName                                                     
                                                                                                                          property.                                                    
                                                                                                                          If null,                                                     
                                                                                                                          the                                                          
                                                                                                                          CurrentUserName's                                            
                                                                                                                          value is                                                     
                                                                                                                          used.                                                        
            WorkingDirectory,<para></para>WorkingDir,<para></para>WorkDir                                                \Returns                                                     See <see cref="P:System.Environment.CurrentDirectory"></see>
                                                                                                                          the fully                                                    Property
                                                                                                                          qualified                                                    
                                                                                                                          path of the                                                  
                                                                                                                          current                                                      
                                                                                                                          working                                                      
                                                                                                                          directory.                                                   
            $&quot;EnvironmentVariableName&quot;                                                                         \Returns                                                     See <see cref="M:System.Environment.GetEnvironmentVariable(System.String)"></see>
                                                                                                                          the                                                          Method
                                                                                                                          environment                                                  
                                                                                                                          variable's                                                   
                                                                                                                          value.                                                       
                                                                                                                          (note that                                                   
                                                                                                                          quotes                                                       
                                                                                                                          should not                                                   
                                                                                                                          be included                                                  
                                                                                                                          in the                                                       
                                                                                                                          name).                                                       
                                                                                                                          \Examples                                                    
                                                                                                                          are:                                                         
                                                                                                                          [$PATH],                                                     
                                                                                                                          [$HOMEDRIVE]                                                 
            &quot;EnvironmentSpecialFolderName&quot;                                                                     An argument                                                  See <see cref="T:System.Environment.SpecialFolder"></see> Enumeration
                                                                                                                          name that                                                    
                                                                                                                          represents                                                   
                                                                                                                          the                                                          
                                                                                                                          System.Environment.SpecialFolder                             
                                                                                                                          Enumeration                                                  
                                                                                                                          value.<para></para>Examples                                  
                                                                                                                          are:                                                         
                                                                                                                          [MyComputer],                                                
                                                                                                                          [MyMusic],                                                   
                                                                                                                          [CommonApplicationData],                                     
                                                                                                                          [LocalApplicationData],                                      
                                                                                                                          [MyDocuments],                                               
                                                                                                                          [ProgramFiles],                                              
                                                                                                                          [CommonProgramFiles]<para></para><para></para>Note           
                                                                                                                          that quotes                                                  
                                                                                                                          should not                                                   
                                                                                                                          be included                                                  
                                                                                                                          in the name                                                  
            Search(&quot;DirList&quot;                                                                                   A &quot;special&quot;                                        \Examples:<para></para>Search(c:[MyDocuments];c:docs;\\networkhostdocs
             ,                                                                                                            function                                                     ,
             &quot;FileList&quot;)                                                                                        that takes                                                   myFile.doc;company.doc)<para></para><para></para>Search
                                                                                                                          two                                                          the
                                                                                                                          \arguments.                                                  &quot;c:[MyDocuments]&quot;,
                                                                                                                          This                                                         &quot;c:docs&quot;,
                                                                                                                          functions                                                    and
                                                                                                                          searches                                                     &quot;\\networkhostdocs&quot;
                                                                                                                          for the                                                      directories
                                                                                                                          exists of                                                    for either
                                                                                                                          the file                                                     one of the
                                                                                                                          within the                                                   following
                                                                                                                          FileList                                                     files
                                                                                                                          collection                                                   &quot;myFile.doc&quot;
                                                                                                                          within the                                                   or
                                                                                                                          DirList                                                      &quot;Company.doc&quot;.
                                                                                                                          collection.                                                  If found
                                                                                                                          This                                                         the
                                                                                                                          function                                                     absolute
                                                                                                                          \returns                                                     path of the
                                                                                                                          the                                                          \file
                                                                                                                          complete                                                     (including
                                                                                                                          path of the                                                  filename)
                                                                                                                          \file that                                                   is
                                                                                                                          is found                                                     returned. 
                                                                                                                          first. Each                                                  
                                                                                                                          argument is                                                  
                                                                                                                          defined as                                                   
                                                                                                                          a list of                                                    
                                                                                                                          files/directories                                            
                                                                                                                          separated                                                    
                                                                                                                          by a                                                         
                                                                                                                          semicolon                                                    
                                                                                                                          (;). If                                                      
                                                                                                                          none of the                                                  
                                                                                                                          files                                                        
                                                                                                                          exists,                                                      
                                                                                                                          null is                                                      
                                                                                                                          returned.<para></para><para></para>Note                      
                                                                                                                          that inline                                                  
                                                                                                                          tags/parameters                                              
                                                                                                                          or special                                                   
                                                                                                                          functions                                                    
                                                                                                                          can be                                                       
                                                                                                                          embedded                                                     
                                                                                                                          within                                                       
                                                                                                                          either                                                       
                                                                                                                          argument. Quotes                                             
                                                                                                                          should not                                                   
                                                                                                                          be included                                                  
                                                                                                                          in the                                                       
                                                                                                                          \arguments.                                                  
            SearchNewest(&quot;DirList&quot;                                                                             Similar to                                                   
             ,                                                                                                            the Search                                                   
             &quot;FileList&quot;)                                                                                        function,                                                    
                                                                                                                          instead of                                                   
                                                                                                                          returning                                                    
                                                                                                                          the first                                                    
                                                                                                                          found file,                                                  
                                                                                                                          this will                                                    
                                                                                                                          return the                                                   
                                                                                                                          \file that                                                   
                                                                                                                          has the                                                      
                                                                                                                          most                                                         
                                                                                                                          recently                                                     
                                                                                                                          accessed                                                     
                                                                                                                          \file.                                                       
            CheckNOTNull(&quot;PathList&quot;)                                                                           A &quot;special&quot;                                        For
                                                                                                                          function                                                     \Example:<para></para>CheckNull([WorkingDirectory],
                                                                                                                          used to                                                      [StartUpDirectory],
                                                                                                                          ignore any inline                                            Search(c:[MyDocuments];c:docs;\\networkhostdocs
                                                                                                                          tags/parameters                                              ,
                                                                                                                          and/or                                                       myFile.doc;company.doc),
                                                                                                                          &quot;special&quot;                                          c:\\bin)<para></para><para></para>Evaluates
                                                                                                                          functions                                                    each item
                                                                                                                          that return                                                  in order to
                                                                                                                          null. When                                                   determine
                                                                                                                          an argument                                                  the
                                                                                                                          \returns                                                     returned
                                                                                                                          null, the                                                    value. The
                                                                                                                          next                                                         item that
                                                                                                                          argument is                                                  \returns
                                                                                                                          executed.                                                    the fist
                                                                                                                          Each                                                         non-null
                                                                                                                          function/tag/parameter                                       value is
                                                                                                                          should be                                                    returned.<para></para>
                                                                                                                          separated                                                    
                                                                                                                          by a                                                         
                                                                                                                          semicolon                                                    
                                                                                                                          (;).<para></para><para></para>Note                           
                                                                                                                          that quotes                                                  
                                                                                                                          should not                                                   
                                                                                                                          be included                                                  
                                                                                                                          in the                                                       
                                                                                                                          \arguments.                                                  
            </xtable
        </member>
        <member name="P:Common.IPropertySpec.Category">
            <summary>
            Gets or sets the category name of this property.
            </summary>
        </member>
        <member name="P:Common.IPropertySpec.ConverterTypeName">
            <summary>
            Gets or sets the fully qualified name of the type converter
            type for this property.
            </summary>
        </member>
        <member name="P:Common.IPropertySpec.DefaultValue">
            <summary>
            Gets or sets the default value of this property.
            </summary>
        </member>
        <member name="P:Common.IPropertySpec.Description">
            <summary>
            Gets or sets the help text description of this property.
            </summary>
        </member>
        <member name="P:Common.IPropertySpec.EditorTypeName">
            <summary>
            Gets or sets the fully qualified name of the editor type for
            this property.
            </summary>
        </member>
        <member name="P:Common.IPropertySpec.Name">
            <summary>
            Gets or sets the name of this property.
            </summary>
        </member>
        <member name="P:Common.IPropertySpec.TypeName">
            <summary>
            Gets or sets the fully qualified name of the type of this
            property.
            </summary>
        </member>
        <member name="T:Common.PropertySpec`1">
            <summary>
            Represents a single property in a PropertySpec.
            </summary>
        </member>
        <member name="M:Common.PropertySpec`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
        </member>
        <member name="M:Common.PropertySpec`1.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
        </member>
        <member name="M:Common.PropertySpec`1.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
            <param name="description">A string that is displayed in the help area of the
            property grid.</param>
        </member>
        <member name="M:Common.PropertySpec`1.#ctor(System.String,System.String,System.String,`0)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
            <param name="description">A string that is displayed in the help area of the
            property grid.</param>
            <param name="defaultValue">The default value of the property, or null if there is
            no default value.</param>
        </member>
        <member name="M:Common.PropertySpec`1.#ctor(System.String,System.String,System.String,`0,System.String,System.String)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
            <param name="description">A string that is displayed in the help area of the
            property grid.</param>
            <param name="defaultValue">The default value of the property, or null if there is
            no default value.</param>
            <param name="editor">The fully qualified name of the type of the editor for this
            property.  This type must derive from UITypeEditor.</param>
            <param name="typeConverter">The fully qualified name of the type of the type
            converter for this property.  This type must derive from TypeConverter.</param>
        </member>
        <member name="M:Common.PropertySpec`1.#ctor(System.String,System.String,System.String,`0,System.Type,System.String)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
            <param name="description">A string that is displayed in the help area of the
            property grid.</param>
            <param name="defaultValue">The default value of the property, or null if there is
            no default value.</param>
            <param name="editor">The Type that represents the type of the editor for this
            property.  This type must derive from UITypeEditor.</param>
            <param name="typeConverter">The fully qualified name of the type of the type
            converter for this property.  This type must derive from TypeConverter.</param>
        </member>
        <member name="M:Common.PropertySpec`1.#ctor(System.String,System.String,System.String,`0,System.String,System.Type)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
            <param name="description">A string that is displayed in the help area of the
            property grid.</param>
            <param name="defaultValue">The default value of the property, or null if there is
            no default value.</param>
            <param name="editor">The fully qualified name of the type of the editor for this
            property.  This type must derive from UITypeEditor.</param>
            <param name="typeConverter">The Type that represents the type of the type
            converter for this property.  This type must derive from TypeConverter.</param>
        </member>
        <member name="M:Common.PropertySpec`1.#ctor(System.String,System.String,System.String,`0,System.Type,System.Type,System.Boolean,System.Int32,System.Object)">
            <summary>
            Initializes a new instance of the PropertySpec class.
            </summary>
            <param name="name">The name of the property displayed in the property grid.</param>
            <param name="category">The category under which the property is displayed in the
            property grid.</param>
            <param name="description">A string that is displayed in the help area of the
            property grid.</param>
            <param name="defaultValue">The default value of the property, or null if there is
            no default value.</param>
            <param name="editor">The Type that represents the type of the editor for this
            property.  This type must derive from UITypeEditor.</param>
            <param name="typeConverter">The Type that represents the type of the type
            converter for this property.  This type must derive from TypeConverter.</param>
            <param name="isDataColumn"></param>
            <param name="position"></param>
            <param name="tag"></param>
        </member>
        <member name="P:Common.PropertySpec`1.Attributes">
            <summary>
            Gets or sets a collection of additional Attributes for this property.  This can
            be used to specify attributes beyond those supported intrinsically by the
            PropertySpec class, such as ReadOnly and Browsable.
            </summary>
        </member>
        <member name="P:Common.PropertySpec`1.Category">
            <summary>
            Gets or sets the category name of this property.
            </summary>
        </member>
        <member name="P:Common.PropertySpec`1.ConverterTypeName">
            <summary>
            Gets or sets the fully qualified name of the type converter
            type for this property.
            </summary>
        </member>
        <member name="P:Common.PropertySpec`1.DefaultValue">
            <summary>
            Gets or sets the default value of this property.
            </summary>
        </member>
        <member name="P:Common.PropertySpec`1.Description">
            <summary>
            Gets or sets the help text description of this property.
            </summary>
        </member>
        <member name="P:Common.PropertySpec`1.EditorTypeName">
            <summary>
            Gets or sets the fully qualified name of the editor type for
            this property.
            </summary>
        </member>
        <member name="P:Common.PropertySpec`1.Name">
            <summary>
            Gets or sets the name of this property.
            </summary>
        </member>
        <member name="P:Common.PropertySpec`1.TypeName">
            <summary>
            Gets or sets the fully qualified name of the type of this
            property.
            </summary>
        </member>
        <member name="T:Common.PropertySpecEventArgs">
            <summary>
            Provides data for the GetValue and SetValue events of the PropertyBag class.
            </summary>
        </member>
        <member name="M:Common.PropertySpecEventArgs.#ctor(Common.IPropertySpec,System.Object)">
            <summary>
            Initializes a new instance of the PropertySpecEventArgs class.
            </summary>
            <param name="property">The PropertySpec that represents the property whose
            value is being requested or set.</param>
            <param name="val">The current value of the property.</param>
        </member>
        <member name="P:Common.PropertySpecEventArgs.Property">
            <summary>
            Gets the PropertySpec that represents the property whose value is being
            requested or set.
            </summary>
        </member>
        <member name="P:Common.PropertySpecEventArgs.Value">
            <summary>
            Gets or sets the current value of the property.
            </summary>
        </member>
        <member name="T:Common.PropertySpecEventHandler">
            <summary>
            Represents the method that will handle the GetValue and SetValue events of the
            PropertyBag class.
            </summary>
        </member>
        <member name="T:Common.PropertyBag">
            <summary>
            Represents a collection of custom properties that can be selected into a
            PropertyGrid to provide functionality beyond that of the simple reflection
            normally used to query an object's properties.
            </summary>
        </member>
        <member name="T:Common.PropertyBag.PropertySpecCollection">
            <summary>
            Encapsulates a collection of PropertySpec objects.
            </summary>
        </member>
        <member name="M:Common.PropertyBag.PropertySpecCollection.#ctor">
            <summary>
            Initializes a new instance of the PropertySpecCollection class.
            </summary>
        </member>
        <member name="P:Common.PropertyBag.PropertySpecCollection.Count">
            <summary>
            Gets the number of elements in the PropertySpecCollection.
            </summary>
            <value>
            The number of elements contained in the PropertySpecCollection.
            </value>
        </member>
        <member name="P:Common.PropertyBag.PropertySpecCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the PropertySpecCollection has a fixed size.
            </summary>
            <value>
            true if the PropertySpecCollection has a fixed size; otherwise, false.
            </value>
        </member>
        <member name="P:Common.PropertyBag.PropertySpecCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the PropertySpecCollection is read-only.
            </summary>
        </member>
        <member name="P:Common.PropertyBag.PropertySpecCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is synchronized (thread-safe).
            </summary>
            <value>
            true if access to the PropertySpecCollection is synchronized (thread-safe); otherwise, false.
            </value>
        </member>
        <member name="P:Common.PropertyBag.PropertySpecCollection.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            In C#, this property is the indexer for the PropertySpecCollection class.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <value>
            The element at the specified index.
            </value>
        </member>
        <member name="M:Common.PropertyBag.PropertySpecCollection.Add(Common.IPropertySpec)">
            <summary>
            Adds a PropertySpec to the end of the PropertySpecCollection.
            </summary>
            <param name="value">The PropertySpec to be added to the end of the PropertySpecCollection.</param>			
        </member>
        <member name="M:Common.PropertyBag.PropertySpecCollection.AddRange(Common.IPropertySpec[])">
            <summary>
            Adds the elements of an array of PropertySpec objects to the end of the PropertySpecCollection.
            </summary>
            <param name="array">The PropertySpec array whose elements should be added to the end of the
            PropertySpecCollection.</param>
        </member>
        <member name="M:Common.PropertyBag.PropertySpecCollection.Clear">
            <summary>
            Removes all elements from the PropertySpecCollection.
            </summary>
        </member>
        <member name="M:Common.PropertyBag.PropertySpecCollection.Contains(Common.IPropertySpec)">
            <summary>
            Determines whether a PropertySpec is in the PropertySpecCollection.
            </summary>
            <param name="item">The PropertySpec to locate in the PropertySpecCollection. The element to locate
            can be a null reference (Nothing in Visual Basic).</param>
            <returns>true if item is found in the PropertySpecCollection; otherwise, false.</returns>
        </member>
        <member name="M:Common.PropertyBag.PropertySpecCollection.Contains(System.String)">
            <summary>
            Determines whether a PropertySpec with the specified name is in the PropertySpecCollection.
            </summary>
            <param name="name">The name of the PropertySpec to locate in the PropertySpecCollection.</param>
            <returns>true if item is found in the PropertySpecCollection; otherwise, false.</returns>
        </member>
        <member name="M:Common.PropertyBag.PropertySpecCollection.CopyTo(Common.IPropertySpec[])">
            <summary>
            Copies the entire PropertySpecCollection to a compatible one-dimensional Array, starting at the
            beginning of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied
            from PropertySpecCollection. The Array must have zero-based indexing.</param>
        </member>
        <member name="M:Common.PropertyBag.PropertySpecCollection.CopyTo(Common.IPropertySpec[],System.Int32)">
            <summary>
            Copies the PropertySpecCollection or a portion of it to a one-dimensional array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied
            from the collection.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Common.PropertyBag.PropertySpecCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the PropertySpecCollection.
            </summary>
            <returns>An IEnumerator for the entire PropertySpecCollection.</returns>
        </member>
        <member name="M:Common.PropertyBag.PropertySpecCollection.IndexOf(Common.IPropertySpec)">
            <summary>
            Searches for the specified PropertySpec and returns the zero-based index of the first
            occurrence within the entire PropertySpecCollection.
            </summary>
            <param name="value">The PropertySpec to locate in the PropertySpecCollection.</param>
            <returns>The zero-based index of the first occurrence of value within the entire PropertySpecCollection,
            if found; otherwise, -1.</returns>
        </member>
        <member name="M:Common.PropertyBag.PropertySpecCollection.IndexOf(System.String)">
            <summary>
            Searches for the PropertySpec with the specified name and returns the zero-based index of
            the first occurrence within the entire PropertySpecCollection.
            </summary>
            <param name="name">The name of the PropertySpec to locate in the PropertySpecCollection.</param>
            <returns>The zero-based index of the first occurrence of value within the entire PropertySpecCollection,
            if found; otherwise, -1.</returns>
        </member>
        <member name="M:Common.PropertyBag.PropertySpecCollection.Insert(System.Int32,Common.IPropertySpec)">
            <summary>
            Inserts a PropertySpec object into the PropertySpecCollection at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The PropertySpec to insert.</param>
        </member>
        <member name="M:Common.PropertyBag.PropertySpecCollection.Remove(Common.IPropertySpec)">
            <summary>
            Removes the first occurrence of a specific object from the PropertySpecCollection.
            </summary>
            <param name="obj">The PropertySpec to remove from the PropertySpecCollection.</param>
        </member>
        <member name="M:Common.PropertyBag.PropertySpecCollection.Remove(System.String)">
            <summary>
            Removes the property with the specified name from the PropertySpecCollection.
            </summary>
            <param name="name">The name of the PropertySpec to remove from the PropertySpecCollection.</param>
        </member>
        <member name="M:Common.PropertyBag.PropertySpecCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the object at the specified index of the PropertySpecCollection.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Common.PropertyBag.PropertySpecCollection.ToArray">
            <summary>
            Copies the elements of the PropertySpecCollection to a new PropertySpec array.
            </summary>
            <returns>A PropertySpec array containing copies of the elements of the PropertySpecCollection.</returns>
        </member>
        <member name="M:Common.PropertyBag.#ctor">
            <summary>
            Initializes a new instance of the PropertyBag class.
            </summary>
        </member>
        <member name="P:Common.PropertyBag.DefaultProperty">
            <summary>
            Gets or sets the name of the default property in the collection.
            </summary>
        </member>
        <member name="P:Common.PropertyBag.Properties">
            <summary>
            Gets the collection of properties contained within this PropertyBag.
            </summary>
        </member>
        <member name="E:Common.PropertyBag.OnGetValue">
            <summary>
            Occurs when a PropertyGrid requests the value of a property.
            </summary>
        </member>
        <member name="E:Common.PropertyBag.OnSetValue">
            <summary>
            Occurs when the user changes the value of a property in a PropertyGrid.
            </summary>
        </member>
        <member name="M:Common.PropertyBag.GetValue(Common.PropertySpecEventArgs)">
            <summary>
            Raises the OnGetValue event.
            </summary>
            <param name="e">A PropertySpecEventArgs that contains the event data.</param>
        </member>
        <member name="M:Common.PropertyBag.SetValue(Common.PropertySpecEventArgs)">
            <summary>
            Raises the OnSetValue event.
            </summary>
            <param name="e">A PropertySpecEventArgs that contains the event data.</param>
        </member>
        <member name="T:Common.PropertyTable">
            <summary>
            An extension of PropertyBag that manages a table of property values, in
            addition to firing events when property values are requested or set.
            </summary>
        </member>
        <member name="M:Common.PropertyTable.#ctor">
            <summary>
            Initializes a new instance of the PropertyTable class.
            </summary>
        </member>
        <member name="P:Common.PropertyTable.Item(Common.IPropertySpec)">
            <summary>
            Gets or sets the value of the property with the specified name.
            <p>In C#, this property is the indexer of the PropertyTable class.</p>
            </summary>
        </member>
        <member name="P:Common.PropertyTable.Item(System.String)">
            <summary>
            Gets or sets the value of the property with the specified name.
            <p>In C#, this property is the indexer of the PropertyTable class.</p>
            </summary>
        </member>
        <member name="M:Common.PropertyTable.GetValue(Common.PropertySpecEventArgs)">
            <summary>
            This member overrides PropertyBag.GetValue.
            </summary>
        </member>
        <member name="M:Common.PropertyTable.SetValue(Common.PropertySpecEventArgs)">
            <summary>
            This member overrides PropertyBag.SetValue.
            </summary>
        </member>
        <member name="M:Common.ReflectionExecutionStack.GetValue(System.Object,System.Object[],System.Nullable{System.Boolean})">
            <summary>
            Returns the last value in the Execution Path
            </summary>
            <param name="objectInstance">Instance of the Base Type</param>
            <param name="parameters">An array of arrays that is passed to each execution depth</param>
            <param name="evaluateMethodArgumentsUponGetValue">null to indicate that EvaluateMethodArguments proptery should be used. True to allow evaluation of the MethodArguments property value. False to just use the MethodArguments property value.</param>
            <returns>Returns the last return value of the last item in the Execution Path</returns>
            <remarks>
            Note that a null can be returned to indicate failure.
            
            If evaluateMethodArgumentsUponGetValue is set (value of true or false), this value will override all IReflectionInfo GetValue calls!
            </remarks> 
        </member>
        <member name="M:Common.ReflectionExecutionStack.SetValue(System.Object,System.Object)">
            <summary>
            Sets the given value in the last instance of the Execution Path
            </summary>
            <param name="objectInstance">instance of the Base Type</param>
            <param name="setNewValue">Value that will be set in the last instance of the exectuion path</param>
            <returns>returns the value of the SetValue on the Last Execution Path Item</returns>
            <remarks>
            Note that a null can be returned to indicate failure.
            </remarks> 
        </member>
        <member name="M:Common.ReflectionExecutionStack.SetValue(System.Object,System.Object[],System.Nullable{System.Boolean})">
            <summary>
            Sets the given value in the last instance of the Execution Path
            </summary>
            <param name="objectInstance">instance of the Base Type</param>
            <param name="values">An array of arrays where the last array element is used to set the last instance</param>
            <param name="evaluateMethodArgumentsUponGetValue">null to indicate that EvaluateMethodArguments proptery should be used. True to allow evaluation of the MethodArguments property value. False to just use the MethodArguments property value.</param>        
            <returns>returns the value of the SetValue on the Last Execution Path Item</returns>
            <remarks>
            Note that a null can be returned to indicate failure.
            
            If evaluateMethodArgumentsUponGetValue is set (value of true or false), this value will override all IReflectionInfo SetValue calls!
            </remarks> 
        </member>
        <member name="M:Common.ReflectionExecutionStack.Invoke(System.Object,System.Object[],System.Nullable{System.Boolean})">
            <summary>
            Invoke each item in the Execution Path
            </summary>
            <param name="objectInstance">instance of the Base Type</param>
            <param name="values">Arguments pass to each item. Values must be an array of arrays</param>
            <param name="evaluateMethodArgumentsUponGetValue">null to indicate that EvaluateMethodArguments proptery should be used. True to allow evaluation of the MethodArguments property value. False to just use the MethodArguments property value.</param>        
            <returns>returns the last return value of the last item in the Execution Path</returns>
            <remarks>
            Note that a null can be returned to indicate failure.
            
            If evaluateMethodArgumentsUponGetValue is set (value of true or false), this value will override all IReflectionInfo SetValue calls!
            </remarks> 
        </member>
        <member name="T:Common.ReflectionInfo.IArgumentPlaceHolder">
            <summary>
            PlaceHolder for Method Argument List. 
            </summary>
        </member>
        <member name="T:Common.ReflectionInfo.IArrayPlaceHolder">
            <summary>
            Used to define an Array Place Holder for Method Arguments. 
            
            Upon execution of the GetValue, SetValue, or Invoke for a Method each element in ArgumentArray is evaluated if this 
            feature is enabled for the ReflectionInfo object.
            </summary>
        </member>
        <member name="T:Common.ReflectionInfo.ArgumentPlaceHolder">
            <summary>
            Used to define user define argument placeholders.
            </summary>
            <remarks>
            Note that if the PlaceHolder is not replaced before execution of a method the default value is used of the argument data type.
            
            </remarks>
        </member>
        <member name="M:Common.ReflectionInfo.ArgumentPlaceHolder.#ctor(System.String,System.Type)">
            <summary>
            If this constructor is used ArgumentValue will be set to NoValueSet and
            HasArgumentValue is set to false. 
            </summary>
            <param name="key">User defined Key or Name</param>
            <param name="argumentDataTable">The data type of the argument value</param>
            <remarks>
            DBNull is used to indicates that ArgumentValue has no set value (HasArgumentValue is false). 
            </remarks>
        </member>
        <member name="M:Common.ReflectionInfo.ArgumentPlaceHolder.#ctor(System.String,System.Type,System.Object)">
            <summary>
            If this constructor is used ArgumentValue will be set to whatever value is passed into argumentValue and
            HasArgumentValue is set to true.
            </summary>
            <param name="key">User defined Key or Name</param>
            <param name="argumentDataTable">The data type of the argument value</param>
            <param name="argumentValue">The default value for the argument</param>
        </member>
        <member name="T:Common.ReflectionInfo.ThisPlaceHolder">
            <summary>
            This structure is used to indicated in a method argument list that the method's target instance should be used as an argument in that position.
            </summary>
        </member>
        <member name="T:Common.ReflectionInfo.LastReturnedValuePlaceHolder">
            <summary>
            This structure is used to indicated in a method argument list the value of the last returned value in an Reflection Execution Path.
            </summary>
        </member>
        <member name="T:Common.ReflectionInfo.DefaultValuePlaceHolder">
            <summary>
            This structure is used to indicated in a method argument list that if the argument is an optional argument the default value should be used otherwise it indicates 
            that the argument data type's default value should be used as that argument.
            </summary>
        </member>
        <member name="T:Common.ReflectionInfo.NoArgumentValuePlaceHolder">
            <summary>
            Indicates that no argument value was given for this argument.
            
            At GetValue, SetValue, or Invoke this will return a default value for the argument type.
            </summary>
        </member>
        <member name="T:Common.ReflectionInfo.ArrayPlaceHolder">
            <summary>
            An argument placeholder for methods that is used for passing arrays or params to a method. You can always use the system 
            array type when using Method Arguments, but this type is used to evaluate each element in this object when the
            GetValue, SetValue or Invoke is executed. 
            </summary>
            <remarks>
            When working with params you must send in an object array or use this
            wrapper!
            </remarks>
            <seealso cref="T:Common.ReflectionInfo.ArrayPlaceHolder`1"/>
        </member>
        <member name="T:Common.ReflectionInfo.ArrayPlaceHolder`1">
            <summary>
            <see cref="T:Common.ReflectionInfo.ArrayPlaceHolder"/>
            </summary>
            <typeparam name="T">The element data type of the array</typeparam>
        </member>
        <member name="F:Common.ReflectionInfo.ThisArgumentHolder">
            <summary>
            Used to indicated in a method argument list that the method's target instance should be used as an argument in that position.
            </summary>
        </member>
        <member name="F:Common.ReflectionInfo.DefaultValueArgumentHolder">
            <summary>
            Used to indicated in a method argument list that if the argument is an optional argument the default value should be used otherwise it indicates 
            that the argument data type's default value should be used as that argument.
            </summary>
        </member>
        <member name="F:Common.ReflectionInfo.NoArgumentValueGivenHolder">
            <summary>
            Used to indicate that a value was not given for the associated argument.
            </summary>
        </member>
        <member name="P:Common.ReflectionInfo.Parameters">
            <summary>
            A collection of parameters defined for the associated method or null to indicate no parameters.
            </summary>
        </member>
        <member name="P:Common.ReflectionInfo.MethodArguments">
            <summary>
            If defined and if no arguments are passed to a method on a SetValue, GetValue, or Invoke method call,
            these argument will be used to call the method.
            </summary>
            <see cref="P:Common.ReflectionInfo.EvaluateMethodArgumentsUponExecution"/>
            <seealso cref="T:Common.ReflectionInfo.ThisPlaceHolder"/>
            <seealso cref="T:Common.ReflectionInfo.DefaultValuePlaceHolder"/>
            <seealso cref="T:Common.ReflectionInfo.ArrayPlaceHolder"/>
            <seealso cref="T:Common.ReflectionInfo.NoArgumentValuePlaceHolder"/>
            <seealso cref="T:Common.ReflectionInfo.ArgumentPlaceHolder"/>
            <remarks>
            This array can be used by the consumer to loop through looking for ArgumentPlaceHolders or NoArgumentValuePlaceHolders and
            substituting those value for the proper values and than passing this new array on to the target ReflectionInfo method.
            In this manner the Place Holder objects are persevered for similar processing.
            </remarks>
        </member>
        <member name="P:Common.ReflectionInfo.EvaluateMethodArgumentsUponExecution">
            <summary>
            Used to indicate that any Method Arguments <see cref="P:Common.ReflectionInfo.MethodArguments"/> should be evaluated first looking
            for any argument place holds (e.g., ThisPlaceHolder) or IReflectionInfo objects so that these items can be evaluated and 
            substituted in the actual arguments supplied to the method.
            
            True to indicate evaluate Method Argument, false (default) to indicate do not evaluate.
            </summary>
        </member>
        <member name="P:Common.ReflectionInfo.MethodArgumentPlaceHolders">
            <summary>
            Returns all the argument place holders with in the Method Argument Collection.
            Null is return to indicate none.
            </summary>
        </member>
        <member name="P:Common.ReflectionInfo.ObjectValueType">
            <summary>
            This is the data type of the result (return type) from a GetValue or a Invoke execution.
            </summary>
        </member>
        <member name="P:Common.ReflectionInfo.BaseType">
            <summary>
            The data type that is the target (type of objectInstance) of the GetValue, SetValue, or Invoke.
            This would be the same as the DeclaringType property for a PropertyInfo/MethodInfo object.
            </summary>
        </member>
        <member name="P:Common.ReflectionInfo.InstanceReference">
            <summary>
            Get/Set an user defined Instance Reference that can be used for the GetValue/SetValue methods...
            </summary>
        </member>
        <member name="P:Common.ReflectionInfo.Tag">
            <summary>
            Get/Set User defined Tag
            </summary>
        </member>
        <member name="M:Common.ReflectionInfo.GetValue(System.Object,System.Object[],System.Nullable{System.Boolean})">
            <summary>
            Returns the get value of the property or the return value of the method.
            </summary>
            <param name="objectInstance">
            The target instance of the property or method.
            For extended static methods this should be passed with the proper target instance and the ThisArgumentHolder must be the first argument for parameters and evaluateMethodArgumentsUponGetValue must be true.
            For static methods this field is ignored.
            </param>
            <param name="parameters">Parameters that will be passed to a method. Ignored for properties.</param>
            <param name="evaluateMethodArgumentsUponExecution">Null to use the value of EvaluateMethodArgumentsUponExecution property. True to evaulate method arguments and false not to evaulate method arguments</param>
            <returns>Returns the get value of the property or the return value of the method.</returns>
            <remarks>Note that a null can be returned to indicate failure.</remarks>
        </member>
        <member name="M:Common.ReflectionInfo.SetValue(System.Object,System.Object)">
            <summary>
            Sets a value for a property or calls the associated method.
            </summary>
            <param name="objectInstance">
            The target instance of the property or method.
            For extended static methods this should be passed with the proper target instance and the ThisArgumentHolder must be the first argument for parameters and evaluateMethodArgumentsUponGetValue must be true.
            For static methods this field is ignored.
            </param>
            <param name="setNewValue">New Value to set</param>
            <returns>Returns the new value of the property or the return value of the method.</returns>
            <remarks>Note that a null can be returned to indicate failure.</remarks>
        </member>
        <member name="M:Common.ReflectionInfo.SetValue(System.Object,System.Object[],System.Nullable{System.Boolean})">
            <summary>
            Sets a value for a property or calls the associated method.
            </summary>
            <param name="objectInstance">
            The target instance of the property or method.
            For extended static methods this should be passed with the proper target instance and the ThisArgumentHolder must be the first argument for parameters and evaluateMethodArgumentsUponGetValue must be true.
            For static methods this field is ignored.
            </param>
            <param name="values">Parameters that will be passed to a method. Ignored for properties.</param>
            <param name="evaluateMethodArgumentsUponExecution">Null to use the value of EvaluateMethodArgumentsUponExecution property. True to evaulate method arguments and false not to evaulate method arguments</param>
            <returns>Returns the new value of the property or the return value of the method.</returns>
            <remarks>Note that a null can be returned to indicate failure.</remarks>
        </member>
        <member name="M:Common.ReflectionInfo.Invoke(System.Object,System.Object[],System.Nullable{System.Boolean})">
            <summary>
            Invokes the associates property (i.e., calls GetValue) or executes the associated method.
            </summary>
            <param name="objectInstance">
            The target instance of the property or method.
            For extended static methods this should be passed with the proper target instance and the ThisArgumentHolder must be the first argument for parameters and evaluateMethodArgumentsUponGetValue must be true.
            For static methods this field is ignored.
            </param>
            <param name="values">Parameters that will be passed to a method. Ignored for properties.</param>
            <param name="evaluateMethodArgumentsUponExecution">Null to use the value of EvaluateMethodArgumentsUponExecution property. True to evaulate method arguments and false not to evaulate method arguments</param>
            <returns>Returns the new value of the property or the return value of the method.</returns>
            <remarks>Note that a null can be returned to indicate failure.</remarks>        
        </member>
        <member name="M:Common.ReflectionInfoHelper.GetMethodInfoFromString(System.Type,System.String,System.Collections.Generic.IEnumerable{System.Object}@,System.String,System.Boolean)">
            <summary>
            Returns a MethodInfo object based on the methodString and baseType given.
            </summary>
            <param name="baseType">The type where the method is declared</param>
            <param name="methodString">the method string including any arguments. If arguments are present they have to be either the Type name or a value where the cast is the Type name</param>
            <param name="argumentValues">returns a colleciton of the actual argument values if given</param>
            <param name="defaultAssembly">the full name of the assembly where the data types can be found</param>
            <param name="isStaticMethod"></param>
            <returns>MethodInfo object or null indicating that the method string is not a method or could not be found</returns>
            <remarks>
            methodString can take several different formats used to override the baseType. They are:
            
                ::ClassName.FunctionName() -- In this format baseType will be overridden with the ClassName's type.
                                                baseType's namespace will be used to get to ClassName's type.
                
                ::+SubClassName.FunctionName() -- In this format baseType will be overridden with the SubClassName's type.
                +SubClassName.FunctionName()        In this case SubClassName must be a sub-class of the baseType
            
                global::Namespace.NameSpace1.ClassName.FunctionName() -- In this format baseType is override with the ClassName's type.
                                                                            In this form a fully qualified class name, including assembly, can be given.
                                                                            If defaultAssembly is not provide the baseType's assembly is used as the default
                                                                            but will not override the assembly if this is given in this form.
            </remarks>
        </member>
        <member name="M:Common.ReflectionInfoHelper.CreateReflectionInfoFromString(System.String,System.Collections.Generic.Dictionary{System.Type,Common.ReflectionInfo},System.Boolean)">
            <summary>
            Creates a collection of Key/Value Pair where the Key is the Type and Value is a ReflectionInfo Instance. 
            This method parses typeNameDelimiterString into the Key/Value Pair
            </summary>
            <param name="typeNameDelimiterString">
            A string where the first item is a Fully Qualified Type Name or System Type separated by a semicolon.
            The Second Item is a list of public properties and/or methods separated by commas and/or keywords.
            Keywords are:
            	&lt;All&gt;
            	&lt;AllProperties&gt;
            	&lt;AllMethods&gt;
            	&lt;Default&gt;
            Additional pairs can be included separated by semicolons.
            Example: MyNameSpace.MySubNameSpace.MyClass,MyAssembleQualifiedName;MyProperyA, MyPropertyB, MyFunctionA(), MyFunctionB(10);MyNameSpace.MySubNameSpace.MyOtherClass,MyAssembleQualifiedName;&lt;ALL&gt;
            </param>
            <param name="reflectionInfoDictionary">
            If given, This collection will be used to merge the parsed typeNameDelimiterString into. Duplicates will not be added to this collection. This collection is returned!
            If NOT given, a new collection is created and returned.
            </param>
            <param name="sortReflectionItems"></param>
        </member>
        <member name="M:Common.ReflectionInfoHelper.ParseArgumentValueToString(System.Object,System.Boolean)">
            <summary>
            Returns a String representation of the argValue properly delimited. For example in the case of an array an string of all elements are returned...
            </summary>
            <param name="argValue">The value that will be translated to a string</param>
            <param name="useHashAsDateTimeIndicator">True (default) the Database date/time string indicators are used (i.e., #). False uses the .Net string delimiater (i.e., &quot;) (</param>
            <returns>A string representation of the argValue</returns>
            <remarks>
            If argValue is a class or structure the ToString method for that object is returned.
            If argValue is a ReflectionInfo.IArgumentPlaceHolder, the place holder(s) will be properly parsed and returned. 
            </remarks>
        </member>
        <member name="M:Common.ReflectionInfoHelper.ParseIntoMethodNameWithArgumenst(Common.ReflectionInfo,System.String,System.Boolean,System.Boolean)">
            <summary>
            Translate a ReflectionInfo object into it&quot;s DisplayName plus any arguments including argument placeholders.
            </summary>
            <param name="propertyInfoItem">ReflectionInfo instance</param>
            <param name="chainedExecutionMethodNameArgumentsString">
            A string that represents chained execution items or parent/namespace nodes.
            </param>
            <param name="includeFullClassName">
            If true (default), the reflection item&quot;s base type full name is appended to the display name only when it is a static item.
            </param>
            <param name="includeNamespaceParentNames">
            Only valid when includeFullClassName is true.
            
            If false (default true), item&quot;s base type name (not full name) is used.
            </param>
            <returns>
            A string that includes the DisplayName plus arguments and/or argument placeholders.
            </returns>
        </member>
        <member name="M:Common.ReflectionInfoHelper.ParseAssemblyQualifiedClassNameIntoParts(System.String,System.String@,System.String@)">
            <summary>
            Parses an Assembly Qualified Class Name into the fully qualified class and the assembly name.
            
            If Assembly Qualified Class Name is just a class name, the class name is returned and assembly name is null.
            </summary>
            <param name="strAssemblyQualifiedClassName">The Assembly Qualified Class Name or Class Name</param>
            <param name="className">Returns the Class Name. If there is no class name null is returned.</param>
            <param name="assembly">Returns the Assembly Name without any vesion, culture, etc. information. If there is no assembly name null is returned.</param>
            <returns>returns true when parsed or false to indicate that the strAssemblyQualifiedClassName is null or an empty string</returns>
        </member>
        <member name="M:Common.ReflectionInfoHelper.MakeNormaizedClassName(System.String,System.Boolean)">
            <summary>
            Ensures the class name is a valid C# class name which includes transforming it into the proper generic name for C# syntax...
            </summary>        
            <param name="className">Class name being normalized. Class name can be an Assembly Qualified Class Name</param>
            <param name="removeNamespace">
            if true (default false), all name spaces are removed.
            </param>
            <returns>
            Returns a normalized class name.
            </returns>      
        </member>
        <member name="P:Common.StringFunctions.CountDelimiterInformation.SeenOrder">
            <summary>
            The order of when it was first discovered
            </summary>
        </member>
        <member name="P:Common.StringFunctions.CountDelimiterInformation.OpenCount">
            <summary>
            The total number of open/close delimiters.
            
            If position, more open delimiters. If negative, more close delimiters.
            </summary>
        </member>
        <member name="P:Common.StringFunctions.CountSingleDelimiterInformation.TotalCount">
            <summary>
            The total number of text delimiters regardless of paring...
            </summary>
        </member>
        <member name="M:Common.StringFunctions.CountSpecialDelimiters(System.String,Common.StringFunctions.CountSpecialDelimiterFlag)">
            <summary>
            Counts the number of Occurrence within text based on he delimiter flag. 
            
            Outputs the number of occurrence counts by delimiter. For delimiters that are paired (e.g., (), []), it outputs
            the number of open and closed delimiters.
            </summary>              
            <returns>        
            </returns>
        </member>
        <member name="F:Common.StringFunctions.SplitBehaviorOptions.MismatchedWithinDelimitersTreatAsSingleElement">
            <summary>
            Mismatches &quot;within&quot; delimiters will treat the string at the first mismatched delimiter and after as the last string element in the returned collection. 
            
            For Example: 
                StringFunctions.Split(&quot;a,b,c,d,[e,f,g&quot;, &apos;,&apos;, IgnoreWithinDelimiterFlag.Bracket, MismatchedWithinDelimitersTreatAsSingleElement) => {&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;[e,f,g&quot;}
                StringFunctions.Split(&quot;a,b,c,d,[e,f,g&quot;, &apos;,&apos;, IgnoreWithinDelimiterFlag.Bracket, IgnoreMismatchedWithinDelimiters) => {&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;[e&quot;,&quot;f&quot;,&quot;g&quot;}
            </summary>
            <see cref="F:Common.StringFunctions.SplitBehaviorOptions.IgnoreMismatchedWithinDelimiters"/>
        </member>
        <member name="F:Common.StringFunctions.SplitBehaviorOptions.IgnoreMismatchedWithinDelimiters">
            <summary>
            Mismatches &quot;within&quot; delimiter will be ignored the mismatched delimeter and continue spliting disabling the mismatched delimiter for the remainder of the string to be split.
            
            For Example: 
                StringFunctions.Split(&quot;a,b,c,d,[e,f,g&quot;, &apos;,&apos;, IgnoreWithinDelimiterFlag.Bracket, MismatchedWithinDelimitersTreatAsSingleElement) => {&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;[e,f,g&quot;}
                StringFunctions.Split(&quot;a,b,c,d,[e,f,g&quot;, &apos;,&apos;, IgnoreWithinDelimiterFlag.Bracket, IgnoreMismatchedWithinDelimiters) => {&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;[e&quot;,&quot;f&quot;,&quot;g&quot;}
            </summary>
            <see cref="F:Common.StringFunctions.SplitBehaviorOptions.MismatchedWithinDelimitersTreatAsSingleElement"/>
        </member>
        <member name="F:Common.StringFunctions.SplitBehaviorOptions.StringTrimEachElement">
            <summary>
            If enabled, all elements are trimmed before being placed into the returned collection.
            </summary>
        </member>
        <member name="F:Common.StringFunctions.SplitBehaviorOptions.RemoveEmptyEntries">
            <summary>
            Removes any empty/null elements in the collection
            </summary>
        </member>
        <member name="F:Common.StringFunctions.IgnoreWithinDelimiterFlag.None">
            <summary>
            The string is split based just on the given delimiter.
            </summary>
        </member>
        <member name="F:Common.StringFunctions.IgnoreWithinDelimiterFlag.Quotes">
            <summary>
            If any text delimiters (double quote) are found anything within the double quotes are NOT split
            </summary>
        </member>
        <member name="F:Common.StringFunctions.IgnoreWithinDelimiterFlag.Brace">
            <summary>
            If any array delimiters, &quot;{}&quot;, are found anything within the array delimiters are NOT split
            </summary>
        </member>
        <member name="F:Common.StringFunctions.IgnoreWithinDelimiterFlag.Parenthese">
            <summary>
            If any Parentheses, &quot;()&quot;, are found anything within the Parentheses are NOT split
            </summary>
        </member>
        <member name="F:Common.StringFunctions.IgnoreWithinDelimiterFlag.AngleBracket">
            <summary>
            If any &quot;&lt;&gt;&quot;, &quot;&lt;&gt;&quot;, are found anything within those delimiters are NOT split
            </summary>
        </member>
        <member name="F:Common.StringFunctions.IgnoreWithinDelimiterFlag.Bracket">
            <summary>
            If any bracket delimiters, &quot;[]&quot;, are found anything within those delimiters are NOT split
            </summary>
        </member>
        <member name="F:Common.StringFunctions.IgnoreWithinDelimiterFlag.Apostrophes">
            <summary>
            If any apostrophe delimiters, &quot;&apos;&quot;, are found anything within those delimiters are NOT split
            </summary>
        </member>
        <member name="F:Common.StringFunctions.IgnoreWithinDelimiterFlag.Text">
            <summary>
            Defines both Apostrophes and Quotes
            </summary>
        </member>
        <member name="F:Common.StringFunctions.IgnoreWithinDelimiterFlag.Default">
            <summary>
            The Default &quot;Ignore Within&quot; options (Text)
            </summary>
        </member>
        <member name="M:Common.StringFunctions.Split``1(System.String,``0,System.Int32,Common.StringFunctions.StringSplittingDelegate{``0},Common.StringFunctions.IgnoreWithinDelimiterFlag,Common.StringFunctions.SplitBehaviorOptions)">
            <summary>
            Splits a string based on delimiter into parts that are returned as a list.
            </summary>
            <typeparam name="DelimiterType">The data type of the delimiter (usually string or character)</typeparam>
            <param name="value">The string that will be split</param>
            <param name="delimiter">The delimiter used to split the string</param>
            <param name="delimiterLength">The lenght of the delimiter (for character this is 1 for string the length of the string.</param>
            <param name="stringSplittingFunction">
            The function used to split the string. This is usually string.IndexOf or string.IndexOfAny.
            
            The function takes three arguments. They are:
                stringToBeSearch -- the string that will be searched.
                delimiter -- the delimiter used to find in the string.
                startPosition -- the starting location of the search within the string
                
            This function will return the location of the delimiter if found. -1 to indicate that the delimiter was NOT found.
            </param>
            <param name="ignoreWithinOptions">
            The options used to ignore the delimiter within these delimiters.
            </param>
            <param name="behaviorOptions">
            The behavior options of the Split method.
            </param>
            <returns>
            Returns a list of strings that were split. If the string was not split, the value string is returned as the only element in the list.
            If value is null or empty, a empty list is returned.
            </returns>
        </member>
        <member name="M:Common.StringFunctions.Split(System.String,System.Char,Common.StringFunctions.IgnoreWithinDelimiterFlag,Common.StringFunctions.SplitBehaviorOptions)">
            <summary>
            Splits a string based on delimiter into parts that are returned as a list.
            </summary>
            <param name="value">The string that will be split</param>
            <param name="delimiter">The delimiter used to split the string</param>        
            <param name="ignoreWithinOptions">
            The options used to ignore the delimiter within these delimiters.
            </param>
            <param name="behaviorOptions">
            The behavior options of the Split method.
            </param>
            <returns>
            Returns a list of strings that were split. If the string was not split, the value string is returned as the only element in the list.
            If value is null or empty, a empty list is returned.
            </returns>
        </member>
        <member name="M:Common.StringFunctions.Split(System.String,System.String,Common.StringFunctions.IgnoreWithinDelimiterFlag,Common.StringFunctions.SplitBehaviorOptions)">
            <summary>
            Splits a string based on delimiter into parts that are returned as a list.
            </summary>
            <param name="value">The string that will be split</param>
            <param name="delimiter">
            The delimiter string used to split the string. 
            
            This delimiter string must match exactly including case.</param>        
            <param name="ignoreWithinOptions">
            The options used to ignore the delimiter within these delimiters.
            </param>
            <param name="behaviorOptions">
            The behavior options of the Split method.
            </param>
            <returns>
            Returns a list of strings that were split. If the string was not split, the value string is returned as the only element in the list.
            If value is null or empty, a empty list is returned.
            </returns>
        </member>
        <member name="M:Common.StringFunctions.Split(System.String,System.String,System.StringComparison,Common.StringFunctions.IgnoreWithinDelimiterFlag,Common.StringFunctions.SplitBehaviorOptions)">
            <summary>
            Splits a string based on delimiter into parts that are returned as a list.
            </summary>
            <param name="value">The string that will be split</param>
            <param name="delimiter">
            The delimiter string used to split the string. 
            
            This delimiter string must match exactly based on the comparison type.</param>
            <param name="comparisionType">
            One of the enumeration values that specifies the rules for the search. 
            </param>
            <param name="ignoreWithinOptions">
            The options used to ignore the delimiter within these delimiters.
            </param>
            <param name="behaviorOptions">
            The behavior options of the Split method.
            </param>
            <returns>
            Returns a list of strings that were split. If the string was not split, the value string is returned as the only element in the list.
            If value is null or empty, a empty list is returned.
            </returns>
        </member>
        <member name="M:Common.StringFunctions.Split(System.String,System.Char[],Common.StringFunctions.IgnoreWithinDelimiterFlag,Common.StringFunctions.SplitBehaviorOptions)">
            <summary>
            Splits a string based on delimiter into parts that are returned as a list.
            </summary>
            <param name="value">The string that will be split</param>
            <param name="delimiters">
            A Unicode character array containing one or more characters to be used to split the string.
            </param>
            <param name="ignoreWithinOptions">
            The options used to ignore the delimiter within these delimiters.
            </param>
            <param name="behaviorOptions">
            The behavior options of the Split method.
            </param>
            <returns>
            Returns a list of strings that were split. If the string was not split, the value string is returned as the only element in the list.
            If value is null or empty, a empty list is returned.
            </returns>
        </member>
        <member name="M:Common.StringFunctions.SortGroup(System.String,System.Char,System.Boolean,System.Boolean,Common.StringFunctions.IgnoreWithinDelimiterFlag)">
            <summary>
            Returns a string where each element from value is stored based on the delimiter.
            
            Example: SortGroup(&quot;a, z, g, e, i&quot;, ',') returns &quot;a, e, g, i, z&quot;
            </summary>
            <param name="value">string value to be sorted</param>
            <param name="delimiter">used it identify the string elment</param>
            <param name="caseInsentive">If true used an case insentive sort.</param>
            <param name="formatPretty">if true a space is placed after the elment's delimiter</param>
            <param name="ignoreWithinOptions"></param>
            <returns>Returns the sorted string</returns>
        </member>
        <member name="M:Common.StringFunctions.SortGroup(System.String,System.String,System.Boolean,System.Boolean,Common.StringFunctions.IgnoreWithinDelimiterFlag)">
            <summary>
            Returns a string where each element from value is stored based on the delimiter.
            
            Example: SortGroup(&quot;a, z, g, e, i&quot;, ',') returns &quot;a, e, g, i, z&quot;
            </summary>
            <param name="value">string value to be sorted</param>
            <param name="delimiter">used it identify the string elment</param>
            <param name="caseInsentive">If true used an case insentive sort.</param>
            <param name="formatPretty">if true a space is placed after the elment's delimiter</param>
            <param name="ignoreWithinOptions"></param>
            <returns>Returns the sorted string</returns>
        </member>
        <member name="M:Common.StringFunctions.ParseIntoFuncationParams(System.String,System.String@,System.Collections.Generic.List{System.String}@)">
            <summary>
            Parses the given value into the function's name and individual params. If the value cannot be parsed into a function, null is returned.
            If the function has a return type, it will be ignored.
            
            Note that this does not support generic functions like Func &lt; one, two &gt;(Arg1, Arg2)! It does allow generic types as parameters.
            </summary>
            <param name="value">The item to be parsed</param>
            <param name="funcName">The name of the function or String.Empty if value does not have a function name</param>
            <param name="funcParams">The functions params or a list of no elements. Null is returned if the value cannot be parsed. The returned list is created by this function.</param>
            <returns>Returns the string that has been parsed. If the value has a return value that is NOT returned. Null indicated that the string could NOT be parsed.</returns>
            <example>
            
                string functName;
                List &lt; string &gt; funcParams;
                
                Common.StringFunctions.ParseIntoFuncationParams(&quot;int FuncX(Arg1, Arg2, Arg3)&quot;, out funcName, out funcParams);
                    Returns => FuncX(Arg1, Arg2, Arg3)
                    funcName => FuncX
                    funcParams => {Arg1, Arg2, Arg3}
                    
                Common.StringFunctions.ParseIntoFuncationParams(&quot;int FuncX()&quot;, out funcName, out funcParams);
                    Returns => FuncX()
                    funcName => FuncX
                    funcParams => {}
                   
                Common.StringFunctions.ParseIntoFuncationParams(&quot;int FuncX&quot;, out funcName, out funcParams);
                    Returns => null
                    funcName => 
                    funcParams => null
            
            </example>
        </member>
        <member name="M:Common.StringFunctions.ParseIntoGenericTypeParams(System.String,System.String@,System.Collections.Generic.List{System.String}@)">
            <summary>
            This function will parse a generic value into the name and arguments. Null is returned if the value is NOT generic type value. If the value is a generic function the function's name and the function's generic params are only returned.
            </summary>
            <param name="value">value being parsed</param>
            <param name="genericTypeName">The generic name</param>
            <param name="genericTypeParams">arguments/paramaters list of the generic item. This list is created by the function and null is returned if the value cannot be parsed.</param>
            <returns>null to indicate that the value could not be parsed or a string of what was parsed.</returns>
            <example>
            
                string genericName;
                List &lt; string &gt; genericParams;
                
                Common.StringFunctions.ParseIntoGenericTypeParams(&quot;gName&lt; ga1, ga2 &gt;&quot;, out genericName, out genericParams);
                    Return Value => genicName&lt; ga1, ga2 &gt;
                    genericName => gName
                    genericParams => { ga1, ga2 }
                    
                Common.StringFunctions.ParseIntoGenericTypeParams(&quot;funcX(a, b, c)&quot;, out genericName, out genericParams);
                    Return Value => null
                    genericName => 
                    genericParams => null
                    
                Common.StringFunctions.ParseIntoGenericTypeParams(&quot;int funcX &lt; ga1, ga2 &gt;(a, b, c)&quot;, out genericName, out genericParams);
                    Return Value => funcX &lt; ga1, ga2 &gt;
                    genericName => funcx
                    genericParams => {ga1, ga2}
                
            </example>
        </member>
        <member name="M:Common.StringFunctions.ParseIntoVariableArray(System.String,System.Boolean,System.Boolean,System.Boolean,System.Text.RegularExpressions.Regex)">
             <summary>
             Parses the string looking for variables. A variable is determined by an open and close bracket ([]).
            
             </summary>
             <param name="value"></param>
             <param name="matchRegularExpress">If given (default null) this regular express is used instead of the default which searches for open/closing brackets</param>
             <param name="removeVariableBrackets">
             If true (default), the brackets are removed from the variable name otherwise (false) they are returned.
             Note that if a custom Regex is given and this argument is true, the first and last characters are removed from the value string.
             </param>
             <param name="trimVariableName">if true (default), the variable name is string trimmed</param>
             <param name="makeVariableNameLowerCase">if true (default), the variable name is made into lower case</param>
             <example>
                 ParseIntoVariableArray("[VarA  ].[  VarB]@MyDomain.com") ==> {"vara", "varb"}
                 ParseIntoVariableArray("[VarA  ].[  VarB]@MyDomain.com", false) ==> {"[vara]", "[varb]"}
                 ParseIntoVariableArray("[VarA  ].[  VarB]@MyDomain.com", false, false) ==> {"[vara  ]", "[  varb]"}
                 ParseIntoVariableArray("[VarA  ].[  VarB]@MyDomain.com", false, false, false) ==> {"[VarB  ]", "[  VarB]"}
             </example>
             <returns>A collection of variable names or an empty collection.</returns>
        </member>
        <member name="M:Common.StringFunctions.ParseVariableString(System.String,System.Func{System.String,System.String},System.Text.RegularExpressions.Regex)">
            <summary>
            Returns a new string were variables within the variableString are replaced with the return value from the obtainVariableValueFunction.
            </summary>
            <param name="variableString">The string used to parse and replace inline variables. A variable is defined by opening and closing brackets</param>
            <param name="obtainVariableValueFunction">
            The function is called where the first argument is the variable name (without brackets). The variable name has been trimmed.
            This function returns the variable's value or null to indicate that no substitution should occur.
            </param>
            <param name="matchRegularExpress">If given (default null) this regular express is used instead of the default which searches for open/closing brackets</param>
            <returns>
            The new string based on variableString were each variable name has been replaced with its associated value.
            If no variables are found within variableString, this string is just returned.
            </returns>
        </member>
        <member name="M:Common.StringFunctions.IsValidNumeric(System.String,System.Boolean)">
            <summary>
            Checks to determine if the numericString give is a valid numeric.
            
            The numericString can contain formatting characters, positive/negative sign (spaces are not allowed between sign and first number), etc.
            </summary>
            <param name="numericString">string to check</param>
            <param name="testForIntegersOnly">
            If true (default is false), only check to see if it is an integer value (no decimals).
            </param>
            <returns>true to indicate that it is valid.</returns>
        </member>
        <member name="M:Common.StringFunctions.ValidateNumeric(System.String,System.Boolean@)">
            <summary>
            Checks to see if the numericString is a valid numeric value. 
            </summary>
            <param name="numericString">string to check</param>
            <param name="isInteger">Returns true to indicate that it is an interger value or false to indicate that it is a decimal value or it is not a valid numeric</param>
            <returns>true to indicate that it is valid.</returns>
        </member>
        <member name="M:Common.StringFunctions.ParseIntoNumeric(System.String,System.Object@,System.Boolean,System.Boolean)">
            <summary>
            Parses a string into a numeric object. This can include hex strings and numeric literals (positioned as the last character in a numeric value).
            
            Numeric Literals are:
            F or f -- Float
            U or u -- unsigned int
            L or l -- long
            UL or ul -- unsigned long
            M or m -- Decimal 
            </summary>
            <param name="possibleNumeric">
            A string that can contain numbers, commas, decimal point, numeric literal, and an optional sign. If a character is NOT one of these false is returned and numericValue is null.       
            </param>
            <param name="numericValue">null to indicate that the possibleNumeric was not a number or a numeric object</param>
            <param name="findBestNumericType">
            If true the best numeric type is determined and returned based on the value range of the numeric. 
            If false this option is not performed.
            
            This is only valid for integer values where a numeric literal is NOT provided. The default is false.
            </param>
            <param name="tryDefaultType">
            If true and if the value properly fits in the default data type of int, int is returned.
            If false this option is not performed. If findBestNumericType is true this options is not performed.
            
            This is only valid for integer values where a numeric literal is NOT provided. The default is false.
            </param>
            <returns>
            true to indicate that the value has been parsed into a numeric object.
            </returns>
            <remarks>
            If a Numeric Literals is provided that associated data type is returned. If a hex string value is provide a long or ulong is returned.
            </remarks>
        </member>
        <member name="M:Common.StringFunctions.ToHexString(System.Byte[])">
            <summary>
            Returns the Hex String representation of the byteArray. 
            </summary>
            <param name="byteArray">Byte Array</param>
            <returns>Returns the Hex String of the byte array in the standard '0x####' format</returns>
            <remarks>
            To create a Hex String for a C# native numeric type use the Hexadecimal (&quot;X&quot;) format specifier of ToString...
            </remarks>
            <seealso href="http://msdn.microsoft.com/en-us/library/dwhawy9k.aspx#XFormatString"/>
        </member>
        <member name="M:Common.StringFunctions.ToHexString(System.Guid)">
            <summary>
            Returns the Hex String representation of the guid value
            </summary>      
        </member>
        <member name="M:Common.StringFunctions.CalculateHash(System.String)">
            <summary>
            Creates platform (x86/x64) independent hashing algorithm based on SuperFastHash
            </summary>
            <param name="stringToHash">String to Hash</param>
            <returns>A hash code of unsigned int32</returns>
        </member>
        <member name="M:Common.StringFunctions.RemoveConsecutiveChar(System.String,System.Char,System.Boolean)">
            <summary>
            Remove any found consecutive characters in the string.
            </summary>
            <param name="removeConsecutiveCharString">String to search for consecutive characters</param>
            <param name="removeChar">Character to remove (if convective). The default is a space.</param>
            <param name="removeAllConsecutiveChars">
            If false (default), one consecutive character is inserted.
            If true, all consecutive characters are removed.
            </param>
            <returns>string where the consecutive characters have been removed.</returns>
            <example>
                Removing spaces (default), removeAllConsecutiveChars is false (default)
                    &quot;123  456 789  0 abc     + +++ +      def&quot; ==&gt; &quot;123 456 789 0 abc + +++ +  def&quot;
                
                Removing plus signs (+), removeAllConsecutiveChars is false (default)
                    &quot;123  456 789  0 abc     + +++ +      def&quot; ==&gt; &quot;123  456 789  0 abc     + + +      def&quot;
                
                Removing plus signs (+) where removeAllConsecutiveChars is true
                    &quot;123  456 789  0 abc     + +++ +      def&quot; ==&gt; &quot;123  456 789  0 abc             def&quot;
            </example>
        </member>
        <member name="M:Common.StringFunctions.RemoveConsecutiveChar(System.String,System.Char[],System.Boolean,System.Boolean)">
            <summary>
            Remove any found consecutive characters in the string.
            </summary>
            <param name="removeConsecutiveCharString">String to search for consecutive characters</param>
            <param name="removeChars">Characters to remove (if convective).</param>
            <param name="anyConsecutiveCharOrder">
            If true (default), all characters in removeChars are treated as one consecutive character and will be removed.
            If false, each individual character in removeChars is treated as one consecutive group and that group will be removed.
            </param>
            <param name="removeAllConsecutiveChars">
            If false (default), one consecutive character is inserted.
            If true, all consecutive characters are removed.
            </param>
            <returns>string where the consecutive characters have been removed.</returns>
            <example>
                Removing spaces and pluses where anyConsecutiveCharOrder is true (default) and removeAllConsecutiveChars is false (default)
                    &quot;123  456 789  0 abc     + +++ +      def&quot; ==&gt; &quot;123 456 789 0 abc def&quot;
                
                Removing + where anyConsecutiveCharOrder is false and removeAllConsecutiveChars is false (default)
                    &quot;123  456 789  0 abc     + +++ +      def&quot; ==&gt; &quot;123 456 789 0 abc + + + def&quot;
                
                Removing spaces and pluses where anyConsecutiveCharOrder is true (default) and removeAllConsecutiveChars is true
                    &quot;123  456 789  0 abc     + +++ +      def&quot; ==&gt; &quot;1234567890abcdef&quot;
                
                Removing spaces and pluses where anyConsecutiveCharOrder is false and removeAllConsecutiveChars is true
                    &quot;123  456 789  0 abc     + +++ +      def&quot; ==&gt; &quot;1234567890abcdef&quot;
                Note that the same result will occur regardless of the anyConsecutiveCharOrder value when removeAllConsecutiveChars is true!
            
            </example>
        </member>
        <member name="M:Common.StringFunctions.IsASCII(System.Char)">
            <summary>
            Returns true if the character is an ASCII character (&gt;=0 and &lt;= 127)
            </summary>
            <param name="isASCIIChar">character to check</param>
            <returns>True for ASCII character, false otherwise</returns>
        </member>
        <member name="M:Common.StringFunctions.NbrASCIIChars(System.String)">
            <summary>
            The number of ASCII characters in the string
            </summary>
            <param name="src">string used to count the number of ASCII characters</param>
            <returns>Number of ASCI characters in the string</returns>
        </member>
        <member name="M:Common.StringFunctions.NbrUniCodeChars(System.String)">
            <summary>
            The number of Non-ASCII characters in the string
            </summary>
            <param name="src">string used to count the number of Non-ASCII characters</param>
            <returns>Number of Non-ASCI characters in the string</returns>
        </member>
        <member name="M:Common.StringFunctions.ConvertDiacritics(System.Char)">
            <summary>
            Converts an Unicode character using a custom converter to an ASCII converted character.
            </summary>
            <param name="convertChar">Unicode Character to be converted</param>
            <returns>Converted Custom ASCII character</returns>
            <remarks>
            To used a Normalized form call RemoveDiacriticsEnum.
            </remarks>
        </member>
        <member name="M:Common.StringFunctions.RemoveDiacriticsEnum(System.String,System.Boolean,System.Func{System.Char,System.Char})">
            <summary>
            Removes the Diacritics from the source string.
            </summary>
            <param name="src">Source String</param>
            <param name="comparableNormalization">If true it will use the NormalizationForm.FormKD. If false it uses NormalizationForm.FormD.</param>
            <param name="customCharConverter">A custom function used to convert characters that were not able to be normalized.</param>
            <returns>Returns a string where the diacritics were removed.</returns>
        </member>
        <member name="M:Common.StringFunctions.RemoveDiacritics(System.String,System.Boolean,System.Func{System.Char,System.Char})">
            <summary>
            Removes the Diacritics from the source string.
            </summary>
            <param name="src">Source String</param>
            <param name="comparableNormalization">If true it will use the NormalizationForm.FormKD. If false it uses NormalizationForm.FormD.</param>
            <param name="customCharConverter">A custom function used to convert characters that were not able to be normalized.</param>
            <returns>Returns a string where the diacritics were removed.</returns>
        </member>
        <member name="M:Common.StringFunctions.RemoveDiacritics(System.String,System.Boolean)">
            <summary>
            Removes the Diacritics from the source string.
            </summary>
            <param name="src">Source String</param>
            <param name="comparableNormalization">
            If true (default), it will use the NormalizationForm.FormKD and no additional conversions are performed.
            If false it uses NormalizationForm.FormD and the ConvertDiacritics custom converter is also called to convert any remaining non-ASCII characters.
            </param>        
            <returns>Returns a string where the diacritics were removed.</returns>
        </member>
        <member name="M:Common.StringFunctions.IsAllUpper(System.String,System.Boolean)">
            <summary>
            Check to determine if all characters are upper case.
            </summary>
            <param name="checkForUpper">String to check for upper characters</param>
            <param name="onlyLetters">
            If true (default), only letters (as defined by Char.IsLetter) are checked (ignores non-letters).
            If false, all characters are checked.
            </param>
            <returns>True to indicate that all characters are upper case.</returns>
        </member>
        <member name="M:Common.StringFunctions.IsAllLower(System.String,System.Boolean)">
            <summary>
            Check to determine if all characters are lower case.
            </summary>
            <param name="checkForLower">String to check for lower characters</param>
            <param name="onlyLetters">
            If true (default), only letters (as defined by Char.IsLetter) are checked (ignores non-letters).
            If false, all characters are checked.
            </param>
            <returns>True to indicate that all characters are lower case.</returns>
        </member>
        <member name="M:Common.StringFunctions.EscapeCharacterString(System.Char)">
            <summary>
            Escape&apos;s a character to it&apos;s string representation
            </summary>
            <param name="escapeCharacter">The character to escape</param>
            <returns>Escape String either with the C# shortcut escape or the \uxxxx format.</returns>
            <remarks>
            C# defines the following character escape sequences: 
            \&apos; - single quote, needed for character literals
            \&quot; - double quote, needed for string literals
            \\ - backslash
            \0 - Unicode character 0
            \a - Alert (character 7)
            \b - Backspace (character 8)
            \f - Form feed (character 12)
            \n - New line (character 10)
            \r - Carriage return (character 13)
            \t - Horizontal tab (character 9)
            \v - Vertical quote (character 11)
            \uxxxx - Unicode escape sequence for character with hex value xxxx
            \xn[n][n][n] - Unicode escape sequence for character with hex value nnnn (variable length version of \uxxxx)
            \Uxxxxxxxx - Unicode escape sequence for character with hex value xxxxxxxx (for generating surrogates)
            </remarks>
        </member>
        <member name="M:Common.StringFunctions.IsEscapeCharacter(System.Char)">
            <summary>
            Returns true if character is an Escape character (Is control, high, or low character defined by C#.
            </summary>
            <param name="testCharacter">Character to test</param>
            <returns>True if character is an Escape character</returns>
        </member>
        <member name="M:Common.StringFunctions.ReplaceFirst(System.String,System.String,System.String)">
            <summary>
            Replaces the first occurrence of search and replaces it with the replace value
            </summary>
            <param name="text">string that will be searched</param>
            <param name="search">value used to locate the first occurence</param>
            <param name="replace">new value that willbe used as the replacement</param>
            <returns>A new string where the seatch value is replaced with the replace value</returns>
        </member>
        <member name="T:Common.TypeHelpers">
            <summary>
            Helper Class used to aid in working with System.Type objects.
            </summary>
            <remarks>
            Class Common.TypedDataTable.LoadAssembly can be used to load assemblies that can be used to find a Type based on a string name.
            Common.TypedDataTable.DataTableHelpers.GetDataType Method can be used as an advanced version to find a Type (and load the assembly, if required) based on string name.
            </remarks>
            <seealso cref="T:Common.ReflectionInfoHelper"/>
            <seealso cref="T:Common.TypeHelpers"/>
        </member>
        <member name="M:Common.TypeHelpers.GetEnumerableElementType(System.Type)">
            <summary>
            Returns the element type of the underlying Enumerable/Enumerator type.
            </summary>
            <param name="enumerableType">A type of Array or inherirts from IEnumerable/IEnumerator</param>
            <returns>The underlying data type or null to indicate that the type is not an Array or IEnumerable/IEnumerator</returns>
        </member>
        <member name="M:Common.TypeHelpers.IsDataTypeArray(System.String)">
            <summary>
            Determines if the arraySyntaxString given has the proper syntax to be an Array.
            </summary>
            <param name="arraySyntaxString">The data type name and syntax</param>
            <returns>True to indicate that the syntax can be an Array or false to indicate otherwise</returns>
            <example>
            IsDataTypeArray(&quot;int[]&quot;) => true
            IsDataTypeArray(&quot;int[2,3]&quot;) => true
            IsDataTypeArray(&quot;int&quot;) => false
            </example>
        </member>
        <member name="M:Common.TypeHelpers.IsDataTypeArray(System.String,System.String@,System.Int32@,System.Int32[]@)">
            <summary>
            Determines if the arraySyntaxString given has the proper syntax to be an Array and parses the arraySyntaxString into array properties.
            </summary>
            <param name="arraySyntaxString">The data type name and syntax</param>
            <param name="dataType">Returns the data type of the array. If arraySyntaxString is not an array, null is returned.</param>
            <param name="dimensions">Returns the number of array dimensions. If arraySyntaxString is not an array, int.MinValue is returned.</param>
            <param name="dimensionSizes">Returns the array diminsion sizes as an array. if arraySyntaxString is not an array or when dimensions not given, null is returned.</param>
            <returns>True to indicate that the syntax can be an Array or false to indicate otherwise</returns>
            <example>
            	<code>
            		string dataType;
            		int dimensions;
            		int[] dimensionSizes;
            		
            		IsDataTypeArray(&quot;int[,]&quot;, out dataType, out dimensions, out dimensionSizes)
            			//Returns true, dataType: int, dimensions: 2, dimensionSizes: null
            	
            		IsDataTypeArray(&quot;int[2,3]&quot;, out dataType, out dimensions, out dimensionSizes)
            			//Returns true, dataType: int, dimensions: 2, dimensionSizes: {2,3}
            	
            		IsDataTypeArray(&quot;int[23]&quot;, out dataType, out dimensions, out dimensionSizes)
            			//Returns true, dataType: int, dimensions: 1, dimensionSizes: {23}
            	
            		IsDataTypeArray(&quot;int[]&quot;, out dataType, out dimensions, out dimensionSizes)
            			//Returns true, dataType: int, dimensions: 1, dimensionSizes: null
            	
            		IsDataTypeArray(&quot;int&quot;, out dataType, out dimensions, out dimensionSizes)
            			//Returns false, dataType: null, dimensions: int.MinValue, dimensionSizes: null
            	</code>
            </example>
        </member>
        <member name="M:Common.TypeHelpers.TryParseIntoNativeDataType(System.String,System.Boolean)">
            <summary>
            Tries to parse the given string into a native type.
            </summary>
            <param name="possibleNativeTypeName">
            A fully qualified type name or a name with no namespace which would be treated as a native type or a type
            within the System namespace if tryUsingSystemNamespace is true.
            </param>
            <param name="tryUsingSystemNamespace">true (default), if the name cannot be found and does NOT have the System namespace in the name, the string System is appended and re-parsed.</param>
            <returns>Returns the Type or null to indicate that the name could not be parsed into a Type.</returns>
            <remarks>
            This method will not be able to parse arrays and generic types.
            </remarks>
        </member>
        <member name="M:Common.TypeHelpers.GetDataType(System.String,System.String,System.Boolean)">
            <summary>
            Parses typeName into a Type if possible.
            </summary>
            <param name="typeName">A name of a type or a fully qualified type name. Type Name can be an array or generic type.</param>
            <param name="assemblyQualifiedName">An assembly name of where the type maybe found</param>
            <param name="searchForTypeInAssemblies">True (default), searches in the currently loaded assemblies.</param>
            <returns>The Type or null to indicate that typeName could not be parsed</returns>
            <remarks>
            This method can support both the standard generic syntax and the quoted generic syntax. It also supports nested classes.
            </remarks>
            <seealso cref="M:Common.TypeHelpers.GetDataType(System.String,System.String,System.Boolean)"/>
        </member>
        <member name="M:Common.TypeHelpers.GetDataType(System.String,System.Reflection.Assembly)">
            <summary>
            Parses typeName into a Type if possible.
            </summary>
            <param name="typeName">A name of a type or a fully qualified type name. Type Name can be an array or generic type.</param>
            <param name="assembly">The assembly that the type is defined within</param>
            <returns>The Type or null to indicate that typeName could not be parsed</returns>
            <remarks>
            This method can support both the standard generic syntax and the quoted generic syntax.
            </remarks>
            <seealso cref="M:Common.TypeHelpers.GetDataType(System.String,System.Reflection.Assembly)"/>
        </member>
        <member name="M:Common.TypeHelpers.IsEqualToOrSubclassOf(System.Type,System.Type)">
            <summary>
            Determines if checkType is equal to or a sub-class of typeToCompare.
            </summary>
            <param name="checkType">Type to check</param>
            <param name="typeToCompare">Comparison type</param>
            <returns>True if checkType is equal to or a sub-class of typeToCompare. False otherwise</returns>
            <remarks>
            This method can be used to compare any type including generics, Arrays, and interfaces...
            </remarks>
        </member>
        <member name="M:Common.TypeHelpers.IsEqualToOrSubclassOf(System.Type,System.Object)">
            <summary>
            Determines if object's type is equal to or a sub-class of typeToCompare.
            </summary>
            <param name="typeToCompare">Comparison type</param>
            <param name="checkObjectType">Object's type used to compare to the comparison type.</param>
            <returns>True if checkType is equal to or a sub-class of typeToCompare. False otherwise</returns>
            <remarks>
            This method can be used to compare any type including generics, Arrays, and interfaces...
            </remarks>
            <seealso cref="M:Common.TypeHelpers.IsEqualToOrSubclassOf(System.Type,System.Type)"/>
        </member>
        <member name="M:Common.TypeHelpers.CreateAnonymousInstance``1(``0,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Creates an Anonymous Type with anonymousValues as its' values.
            </summary>
            <typeparam name="AT">Anonymous Structure Layout</typeparam>
            <param name="anonymousTypeTemplate">An anonymous instance used as the template to create the new anonymous structure with its' default values.</param>
            <param name="anonymousValues">
            A collection of values used to create a new Anonymous Type.
            The items in the collection must match the same order and type as in the template.</param>
            <returns>A new anonymous type with default values</returns>
            <example>
            <code>
            	var newAnonymousValues = new object[] { "Item1Str", 1, (long) 2, new DateTime(2012, 12, 14, 9, 34, 35) };
            	var newAnonymousType = TypeHelpers.CreateAnonymousInstance(new { Item1=String.Empty, Item2=int.MinValue, Item3=long.MinValue, Item4=new System.Nullable&lt;DateTime&gt;() },
            																newAnonymousValues);
            																
            	/// newAnonymousType now have the following Values:
            	///		newAnonymousType.Item1 => "Item1Str"
            	///		newAnonymousType.Item2 => 1
            	///		newAnonymousType.Item3 => 2
            	///		newAnonymousType.Item4 => #12/14/2012 9:34:35#
            </code>	
            </example>
        </member>
        <member name="M:Common.TypeHelpers.CreateAnonymousInstance``1(``0,System.Collections.IEnumerable)">
            <summary>
            Creates an Anonymous Type with anonymousValues as its' values.
            </summary>
            <typeparam name="AT">Anonymous Structure Layout</typeparam>
            <param name="anonymousTypeTemplate">An anonymous instance used as the template to create the new anonymous structure with its' default values.</param>		
            <param name="anonymousValues">
            A collection of values used to create a new Anonymous Type.
            The items in the collection must match the same order and type as in the template.</param>
            <returns>A new anonymous type with default values</returns>
            <seealso cref="M:Common.TypeHelpers.CreateAnonymousInstance``1(``0,System.Collections.Generic.IEnumerable{System.Object})"/>
        </member>
        <member name="M:Common.TypeHelpers.IsNumericType(System.Type)">
            <summary>
            Returns true when type is a Numeric Type
            </summary>
            <param name="checkType">Type to check</param>
            <returns>True when type is a Numeric Type; false otherwise.</returns>
            <remarks>
            SByte and Byte are NOT considered Numeric with this method.
            </remarks>
        </member>
        <member name="M:Common.TypeHelpers.EnumTryParse(System.Type,System.String,System.Object@)">
            <summary>
            Converts the string representation of an enum to its Enum equivalent value. A return value indicates whether the operation succeeded.
            This method does not rely on Enum.Parse and therefore will never raise any first or second chance exception.
            </summary>
            <param name="type">The enum target type. May not be null.</param>
            <param name="input">
            The input text. May be null.
            
            Note that the input string should only consist of the actual (non-qualified) name(s) of the enum elements.  
            </param>
            <param name="value">
            Contains Enum equivalent value to the enum contained in input on success.
            If on failure the default enum value is returned for type.
            </param>
            <returns>
            true if input was converted successfully; otherwise, false.
            </returns>
        </member>
        <member name="M:Common.TypeHelpers.EnumStringTryParse(System.String,System.Object@,System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="value"></param>
            <param name="possibleOwnerType"></param>
            <param name="defaultAssembly"></param>
            <returns></returns>
        </member>
        <member name="T:Common.TypeSwitch">
            <summary>
            This is a special static utility class used like a switch statement in cased where you need to check a object's type and execute code based on a collection of types. 
            </summary>
            <example>
            <code>
                public interface AI
                {}
            
                public class A1 : AI
                {}
            
                public class A2 : AI
                {}
            
                public class A11 : A1
                {}
            
                public class B
                {}
            
                public class AG&lt;T&gt; : AI
                {}
                
                void Main()
                {
                    var testInstance = new A1();
            
                    TypeSwitch.Test(testInstance,
                                     TypeSwitch.Case&lt;A1&gt;(() =&gt; Console.WriteLine("Is of this Type")),
                                     TypeSwitch.Case&lt;AI&gt;(() =&gt; Assert.IsTrue(false, "AI case should NOT have been Triggered")),
                                     TypeSwitch.Default(() =&gt; Assert.IsTrue(false, "Default Case should NOT have been Triggered"))
                                    );
                                    
                    TypeSwitch.Test(testInstance,
                                            TypeSwitch.Case&lt;A11&gt;(() =&gt; Assert.IsTrue(false, "A11 case should NOT have been Triggered")),
                                            TypeSwitch.Case&lt;AI&gt;(() =&gt; Console.WriteLine("Is of this Type")),
                                            TypeSwitch.Default(() =&gt; Assert.IsTrue(false, "Default Case should NOT have been Triggered"))
                                            );
            
                    testInstance = new A11();
                    
                    TypeSwitch.Test(testInstance,
                                           TypeSwitch.Case&lt;A1&gt;(() =&gt; Assert.IsTrue(true)),
                                            TypeSwitch.Case&lt;A11&gt;(() =&gt; Assert.IsTrue(false, "A11 case should NOT have been Triggered, since it is after the A1 case")),
                                            TypeSwitch.Case&lt;AI&gt;(() =&gt; Assert.IsTrue(false, "AI case should NOT have been Triggered")),
                                            TypeSwitch.Default(() =&gt; Assert.IsTrue(false, "Default Case should NOT have been Triggered"))
                                            );
                                            
                    TypeSwitch.Test(testInstance,
                                            TypeSwitch.ExplicitCase&lt;A1&gt;(() =&gt; Assert.IsTrue(false, "A1 case should NOT have been Triggered, must be the same type.")),
                                            TypeSwitch.ExplicitCase&lt;A11&gt;(() =&gt; Assert.IsTrue(true)),
                                            TypeSwitch.ExplicitCase&lt;AI&gt;(() =&gt; Assert.IsTrue(false, "AI case should NOT have been Triggered")),
                                            TypeSwitch.Default(() =&gt; Assert.IsTrue(false, "Default Case should NOT have been Triggered"))
                                            );
                                            
                    AI testInstance4 = new AG&lt;int&gt;();
            
                    TypeSwitch.Test(testInstance4,
                                            TypeSwitch.Case&lt;A11&gt;(() =&gt; Assert.IsTrue(false, "A11 case should NOT have been Triggered")),
                                            TypeSwitch.Case&lt;AI&gt;(() =&gt; Assert.IsTrue(true)),
                                            TypeSwitch.Default(() =&gt; Assert.IsTrue(false, "Default Case should NOT have been Triggered"))
                                            );
            
                    TypeSwitch.Test(testInstance4,
                                            TypeSwitch.Case&lt;AG&lt;AI&gt;&gt;(() =&gt; Assert.IsTrue(false, "AG case should NOT have been Triggered")),
                                            TypeSwitch.ExplicitCase&lt;AI&gt;(() =&gt; Assert.IsTrue(false, "AI case should NOT have been Triggered")),
                                            TypeSwitch.Case&lt;AG&lt;int&gt;&gt;(() =&gt; Assert.IsTrue(true)),
                                            TypeSwitch.Default(() =&gt; Assert.IsTrue(false, "Default Case should NOT have been Triggered"))
                                            );
                                            
                    var testInstance6 = new int[] { 1, 2, 3 };
                    
                    TypeSwitch.Test(testInstance6,
                                      TypeSwitch.Case&lt;int[,]&gt;(() =&gt; Assert.IsTrue(false, "int[,] case should NOT have been Triggered")),
                                      TypeSwitch.Case&lt;int[]&gt;(() =&gt; Assert.IsTrue(true)),
                                      TypeSwitch.Default(() =&gt; Assert.IsTrue(false, "Default Case should NOT have been Triggered"))
                                      );
                                      
                    TypeSwitch.Test(testInstance6,
                                      TypeSwitch.ExplicitCase&lt;Array&gt;(() =&gt; Assert.IsTrue(false, "Array Explicit case should NOT have been Triggered")),
                                      TypeSwitch.Case&lt;Array&gt;(() =&gt; Assert.IsTrue(true)),
                                      TypeSwitch.Default(() =&gt; Assert.IsTrue(false, "Default Case should NOT have been Triggered"))
                                      );
            }
            </code>
            </example>
        </member>
        <member name="M:Common.TypeSwitch.Test(System.Object,Common.TypeSwitch.CaseInfo[])">
            <summary>
            The static method used to execute the System.Type cases. Execution is in order of the define cases. 
            </summary>
            <param name="testObjectOfType">The object&apos;s type that will be tested</param>
            <param name="testCases">A set of System.Type caes used to &quot;test&quot; the object&apos;s type and execution the action if a match occurs</param>
            <remarks>
            If a default case is defined, it is always executed as the last action in the testCases collection.
            </remarks>
        </member>
        <member name="M:Common.TypeSwitch.Case``1(System.Action)">
            <summary>
            Defines a System.Type case and if the object&apos;s type matches or is a subclass of this type, action is executed.
            </summary>
            <typeparam name="T">the test System.Type used to determine if a match occurs</typeparam>
            <param name="action">The action that is executed if the System.Types match.</param>
            <returns>An internal structure</returns>
        </member>
        <member name="M:Common.TypeSwitch.Case``1(System.Action{``0})">
            <summary>
            Defines a System.Type case and if the object&apos;s type matches or is a subclass of this type, action is executed.
            </summary>
            <typeparam name="T">the test System.Type used to determine if a match occurs</typeparam>
            <param name="action">The action that is executed if the System.Types match.</param>
            <returns>An internal structure</returns>
        </member>
        <member name="M:Common.TypeSwitch.ExplicitCase``1(System.Action)">
            <summary>
            Defines a System.Type Explicit case where the object&apos;s type must be the same System.Type.
            </summary>
            <typeparam name="T">the test System.Type used to determine if a match occurs</typeparam>
            <param name="action">The action that is executed if the System.Types match.</param>
            <returns>An internal structure</returns>
        </member>
        <member name="M:Common.TypeSwitch.ExplicitCase``1(System.Action{``0})">
            <summary>
            Defines a System.Type Explicit case where the object&apos;s type must be the same System.Type.
            </summary>
            <typeparam name="T">the test System.Type used to determine if a match occurs</typeparam>
            <param name="action">The action that is executed if the System.Types match.</param>
            <returns>An internal structure</returns>
        </member>
        <member name="M:Common.TypeSwitch.CustomCase``1(System.Func{System.Type,System.Type,System.Boolean},System.Action)">
            <summary>
            Defines a System.Type Custom case where the the case type and the object type use a custom comparer.
            </summary>
            <typeparam name="T">the test System.Type used to determine if a match occurs</typeparam>
            <param name="typeComparer">
            A custom function where the first argument is a System.Type of T (case System.Type)
            and the second argument is the object&apos;s System.Type. The function returns true to indicate that the types match.
            </param>
            <param name="action">The action that is executed if the System.Types match.</param>
            <returns></returns>
        </member>
        <member name="M:Common.TypeSwitch.CustomCase``1(System.Func{System.Type,System.Type,System.Boolean},System.Action{``0})">
            <summary>
            Defines a System.Type Custom case where the the case type and the object type use a custom comparer.
            </summary>
            <typeparam name="T">the test System.Type used to determine if a match occurs</typeparam>
            <param name="typeComparer">
            A custom function where the first argument is a System.Type of T (case System.Type)
            and the second argument is the object&apos;s System.Type. The function returns true to indicate that the types match.
            </param>
            <param name="action">The action that is executed if the System.Types match.</param>
            <returns></returns>
        </member>
        <member name="M:Common.TypeSwitch.Default(System.Action)">
            <summary>
            The default case that is executed if no other System.Type cases are match. This is always executed as the last case regardless of the position of the case within the test case collection.
            </summary>
            <param name="action">Action that is executed if on other System.tye cases are matched</param>
            <returns>An internal structure</returns>
        </member>
        <member name="T:Common.XmlHelper">
            <summary>
            Summary description for XmlHelper.
            </summary>
        </member>
        <member name="M:Common.XmlHelper.GetAttributeValue(System.Xml.XmlNode,System.String,System.String@)">
            -----------------------------------------------------------------------------
            <summary>
            Gets the value from an attribute at the specified node.
            </summary>
            <param name="node">The XmlNode from which this method will get the value of an attribute.</param>
            <param name="attributeName">Name of the attribute that will be read.</param>
            <param name="value">Attribute value read by this method</param>
            <returns>True if node is found and value is retrieved successfully.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:Common.XmlHelper.GetAttributeValue(System.Xml.XmlNode,System.String,System.Int32@)">
            -----------------------------------------------------------------------------
            <summary>
            Gets the value from an attribute at the specified node.
            </summary>
            <param name="node">The XmlNode from which this method will get the value of an attribute.</param>
            <param name="attributeName">Name of the attribute that will be read.</param>
            <param name="value">Attribute value read by this method</param>
            <returns>True if success.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:Common.XmlHelper.GetAttributeValue(System.Xml.XmlNode,System.String,System.UInt32@)">
            -----------------------------------------------------------------------------
            <summary>
            Gets the value from an attribute at the specified node.
            </summary>
            <param name="node">The XmlNode from which this method will get the value of an attribute.</param>
            <param name="attributeName">Name of the attribute that will be read.</param>
            <param name="value">Attribute value read by this method</param>
            <returns>True if success.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:Common.XmlHelper.SetAttributeValue(System.Xml.XmlNode,System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Sets the value of an attribute for a given XmlNode.
            </summary>
            <param name="node">XmlNode whose attribute will be set.</param>
            <param name="attributeName">Name of the attribute to set.</param>
            <param name="value">Value to be set</param>
            <returns>True if success.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:Common.XmlHelper.SetAttributeValue(System.Xml.XmlNode,System.String,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Sets the value of an attribute for a given XmlNode.
            </summary>
            <param name="node">XmlNode whose attribute will be set.</param>
            <param name="attributeName">Name of the attribute to set.</param>
            <param name="value">Value to be set</param>
            <returns>True if success.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:Common.XmlHelper.SetAttributeValue(System.Xml.XmlNode,System.String,System.UInt32)">
            -----------------------------------------------------------------------------
            <summary>
            Sets the value of an attribute for a given XmlNode.
            </summary>
            <param name="node">XmlNode whose attribute will be set.</param>
            <param name="attributeName">Name of the attribute to set.</param>
            <param name="value">Value to be set</param>
            <returns>True if success.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:Common.XmlHelper.GetDataTable(System.Xml.XmlNodeList)">
            -----------------------------------------------------------------------------
            <summary>s 
            Converts a list of Xml nodes to a DataTable.
            </summary>
            <param name="nodelist">List of Xml nodes</param>
            <returns>DataTable</returns>
            <remarks>
            This method convert
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:Common.XmlHelper.GetDataTable(System.Xml.XmlNodeList,System.String,System.Boolean)">
            <summary>
            Converts a list of Xml nodes to a DataTable and sets one of the columns as a primary key.
            </summary>
            <param name="nodelist"></param>		
            <param name="primaryKeyColumn"></param>
            <param name="autoIncrement"></param>
            <returns></returns>
        </member>
        <member name="M:Common.XmlHelper.UpdateChildNodesWithDataTable(System.Xml.XmlNode,System.Data.DataTable,System.String)">
            <summary>
            Updates the child nodes of "parentNode" by using the fields from a datatable.
            </summary>
            <param name="parentNode"></param>
            <param name="table"></param>
            <param name="keyField">The column name of the datatable that acts as a primary key.</param>
            <remarks>
            The child nodes that will be updated must have attribute fields that correspond to
            the DataTable.  The "keyField" will be used to identify the attribute that serves as 
            an identifier of the rows.  The datatable can have less fields than the nodes so
            you have the chance to update smaller subsets.
            Make sure that you did not call "AcceptChanges" before passing the datatable or this
            function will not find any change.
            </remarks>
        </member>
        <member name="M:Common.XmlHelper.UpdateChildNodesWithDataTable(System.Xml.XmlNode,System.Data.DataTable)">
            <summary>
            Update child nodes with data from datatable.
            Note that the datatable requires a primary key column defined.
            </summary>
            <param name="parentNode"></param>
            <param name="table"></param>
        </member>
        <member name="M:Common.XmlHelper.GetAttributeArray(System.Xml.XmlNodeList,System.String)">
            <summary>
            This method same as getting a column from a table. 
            </summary>
            <param name="nodeList"></param>
            <param name="attributeName"></param>
            <returns></returns>
        </member>
        <member name="M:Common.XmlHelper.NodeToString(System.Xml.XmlNode)">
            -----------------------------------------------------------------------------
            <summary>
            Returns contents of an XmlNode in a string.
            </summary>
            <param name="node">The XmlNode whose contents will be read into a string.</param>
            <returns>Xml formatted string with contents of "node" parameter.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:Common.XmlHelper.NodeListToString(System.Xml.XmlNodeList)">
            <summary>
            Method to convert a XmlNodeList to string.
            </summary>
            <param name="nodeList"></param>
            <returns></returns>
        </member>
        <member name="M:Common.XmlHelper.DocumentToString(System.Xml.XmlDocument)">
            -----------------------------------------------------------------------------
            <summary>
            Method to convert a XmlDocument to string.
            </summary>
            <param name="xmlDoc">XmlDocument that will be converted to string.</param>
            <returns>A xml formatted string.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:Common.XmlHelper.CreateChildNodes(System.Xml.XmlNode,System.String[])">
            -----------------------------------------------------------------------------
            <summary>
            Converts a string array to XmlNodes and appends all those nodes to a root node.
            </summary>
            <param name="rootNode"></param>
            <param name="names"></param>
            <returns></returns>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:Common.XmlHelper.CreateChildNodes(System.Xml.XmlNode,System.String,System.String,System.String[])">
            <summary>
            Creates child nodes that would resemble a table whose values are passed in parameter attributeValues.
            </summary>
            <param name="rootNode"></param>
            <param name="nodeName"></param>
            <param name="attributeName"></param>
            <param name="attributeValues"></param>
        </member>
        <member name="T:Common.XmlHelper.NodeNavigator">
            <summary>
            Class required to navigate through children nodes
            </summary>
        </member>
        <member name="M:Common.XmlHelper.InsertNode(System.Xml.XmlNode,System.String[],System.Int32)">
            <summary>
            Inserts a node at the specified segment if it doesn't exist, otherwise
            traverses the node.
            </summary>
            <param name="node">The current node.</param>
            <param name="segments">The path segment list.</param>
            <param name="idx">The current segment.</param>
            <returns></returns>
        </member>
        <member name="M:Common.XmlHelper.CreateColumns(System.Data.DataTable,System.Xml.XmlNode)">
            <summary>
            Creates columns given an XmlNode.
            </summary>
            <param name="dt">The target DataTable.</param>
            <param name="node">The source XmlNode.</param>
        </member>
    </members>
</doc>
