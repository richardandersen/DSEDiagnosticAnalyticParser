//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DSEDiagnosticAnalyticParserConsole.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "14.0.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1800000")]
        public int MaxRowInExcelWorkBook {
            get {
                return ((int)(this["MaxRowInExcelWorkBook"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("600000")]
        public int MaxRowInExcelWorkSheet {
            get {
                return ((int)(this["MaxRowInExcelWorkSheet"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("500")]
        public int GCFlagThresholdInMS {
            get {
                return ((int)(this["GCFlagThresholdInMS"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("-1")]
        public int CompactionFlagThresholdInMS {
            get {
                return ((int)(this["CompactionFlagThresholdInMS"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("2000")]
        public int SlowLogQueryThresholdInMS {
            get {
                return ((int)(this["SlowLogQueryThresholdInMS"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.DateTime LogCurrentDate {
            get {
                return ((global::System.DateTime)(this["LogCurrentDate"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Collections.Specialized.StringCollection LogSummaryIgnoreTaskExceptions {
            get {
                return ((global::System.Collections.Specialized.StringCollection)(this["LogSummaryIgnoreTaskExceptions"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string LogSummaryPeriods {
            get {
                return ((string)(this["LogSummaryPeriods"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("[{\"Item1\":\"4.00:00:00\",\"Item2\":\"00:30:00\"},{\"Item1\":\"3.00:00:00\",\"Item2\":\"12:00:0" +
            "0\"},{\"Item1\":\"4.00:00:00\",\"Item2\":\"1.00:00:00\"}]")]
        public string LogSummaryPeriodRanges {
            get {
                return ((string)(this["LogSummaryPeriodRanges"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string LogExcelWorkbookFilter {
            get {
                return ((string)(this["LogExcelWorkbookFilter"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(".\\dseTemplate.xlsm")]
        public string ExcelTemplateFilePath {
            get {
                return ((string)(this["ExcelTemplateFilePath"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("[DeskTop]\\Test.xlsm")]
        public string ExcelFilePath {
            get {
                return ((string)(this["ExcelFilePath"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("[Personal]\\DSEData\\HL_Statim_Cluster-diagnostics-2016_09_12_14_39_32_UTC")]
        public string DiagnosticPath {
            get {
                return ((string)(this["DiagnosticPath"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string AlternativeLogFilePath {
            get {
                return ((string)(this["AlternativeLogFilePath"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string AlternativeDDLFilePath {
            get {
                return ((string)(this["AlternativeDDLFilePath"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Node Information")]
        public string ExcelWorkSheetRingInfo {
            get {
                return ((string)(this["ExcelWorkSheetRingInfo"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Ring Token Ranges")]
        public string ExcelWorkSheetRingTokenRanges {
            get {
                return ((string)(this["ExcelWorkSheetRingTokenRanges"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("CFStats")]
        public string ExcelWorkSheetCFStats {
            get {
                return ((string)(this["ExcelWorkSheetCFStats"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("NodeStats")]
        public string ExcelWorkSheetNodeStats {
            get {
                return ((string)(this["ExcelWorkSheetNodeStats"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Cassandra Log")]
        public string ExcelWorkSheetLogCassandra {
            get {
                return ((string)(this["ExcelWorkSheetLogCassandra"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("DDL Keyspaces")]
        public string ExcelWorkSheetDDLKeyspaces {
            get {
                return ((string)(this["ExcelWorkSheetDDLKeyspaces"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("DDL Tables")]
        public string ExcelWorkSheetDDLTables {
            get {
                return ((string)(this["ExcelWorkSheetDDLTables"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Compaction History")]
        public string ExcelWorkSheetCompactionHist {
            get {
                return ((string)(this["ExcelWorkSheetCompactionHist"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Settings-Yamls")]
        public string ExcelWorkSheetYaml {
            get {
                return ((string)(this["ExcelWorkSheetYaml"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("OS-Machine Info")]
        public string ExcelWorkSheetOSMachineInfo {
            get {
                return ((string)(this["ExcelWorkSheetOSMachineInfo"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Cassandra Summary Logs")]
        public string ExcelWorkSheetSummaryLogCassandra {
            get {
                return ((string)(this["ExcelWorkSheetSummaryLogCassandra"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Cassandra Status Logs")]
        public string ExcelWorkSheetStatusLogCassandra {
            get {
                return ((string)(this["ExcelWorkSheetStatusLogCassandra"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"<?xml version=""1.0"" encoding=""utf-16""?>
<ArrayOfString xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
  <string>dse_system</string>
  <string>system_auth</string>
  <string>system_distributed</string>
  <string>system_schema</string>
  <string>system</string>
  <string>dse_security</string>
  <string>solr_admin</string>
  <string>dse_auth</string>
  <string>dse_leases</string>
  <string>system_traces</string>
  <string>dse_perf</string>
</ArrayOfString>")]
        public global::System.Collections.Specialized.StringCollection IgnoreKeySpaces {
            get {
                return ((global::System.Collections.Specialized.StringCollection)(this["IgnoreKeySpaces"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"<?xml version=""1.0"" encoding=""utf-16""?>
<ArrayOfString xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
  <string>memory used</string>
  <string>bytes</string>
  <string>space used</string>
  <string>data size</string>
</ArrayOfString>")]
        public global::System.Collections.Specialized.StringCollection CFStatsCreateMBColumns {
            get {
                return ((global::System.Collections.Specialized.StringCollection)(this["CFStatsCreateMBColumns"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("nodes")]
        public string DiagNodeDir {
            get {
                return ((string)(this["DiagNodeDir"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("nodetool")]
        public string NodetoolDir {
            get {
                return ((string)(this["NodetoolDir"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("dsetool")]
        public string DSEToolDir {
            get {
                return ((string)(this["DSEToolDir"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("logs")]
        public string LogsDir {
            get {
                return ((string)(this["LogsDir"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("ring")]
        public string NodetoolRingFile {
            get {
                return ((string)(this["NodetoolRingFile"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("ring")]
        public string DSEtoolRingFile {
            get {
                return ((string)(this["DSEtoolRingFile"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("cfstats")]
        public string NodetoolCFStatsFile {
            get {
                return ((string)(this["NodetoolCFStatsFile"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("tpstats")]
        public string NodetoolTPStatsFile {
            get {
                return ((string)(this["NodetoolTPStatsFile"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("info")]
        public string NodetoolInfoFile {
            get {
                return ((string)(this["NodetoolInfoFile"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("compactionhistory")]
        public string NodetoolCompactionHistFile {
            get {
                return ((string)(this["NodetoolCompactionHistFile"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("system")]
        public string LogCassandraSystemLogFile {
            get {
                return ((string)(this["LogCassandraSystemLogFile"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("{0}*")]
        public string LogCassandraSystemLogFileArchive {
            get {
                return ((string)(this["LogCassandraSystemLogFileArchive"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(".\\conf\\cassandra")]
        public string ConfCassandraDir {
            get {
                return ((string)(this["ConfCassandraDir"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("cassandra.yaml")]
        public string ConfCassandraFile {
            get {
                return ((string)(this["ConfCassandraFile"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(".\\conf\\dse")]
        public string ConfDSEDir {
            get {
                return ((string)(this["ConfDSEDir"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("dse.yaml")]
        public string ConfDSEYamlFile {
            get {
                return ((string)(this["ConfDSEYamlFile"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("dse")]
        public string ConfDSEFile {
            get {
                return ((string)(this["ConfDSEFile"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(".\\cqlsh\\describe_schema")]
        public string CQLDDLDirFile {
            get {
                return ((string)(this["CQLDDLDirFile"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("*.cql")]
        public string CQLDDLDirFileExt {
            get {
                return ((string)(this["CQLDDLDirFileExt"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"<?xml version=""1.0"" encoding=""utf-16""?>
<ArrayOfString xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
  <string>java_heap.json</string>
  <string>java_system_properties.json</string>
  <string>machine-info.json</string>
  <string>os-info.json</string>
  <string>agent_version.json</string>
  <string>.\os-metrics\cpu.json</string>
  <string>.\os-metrics\load_avg.json</string>
  <string>.\os-metrics\memory.json</string>
  <string>.\ntp\ntpstat</string>
  <string>.\ntp\ntptime</string>
</ArrayOfString>")]
        public global::System.Collections.Specialized.StringCollection OSMachineFiles {
            get {
                return ((global::System.Collections.Specialized.StringCollection)(this["OSMachineFiles"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(".\\opscenterd")]
        public string OPSCenterDir {
            get {
                return ((string)(this["OPSCenterDir"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<ArrayOfString xmlns:xsi=\"http://www.w3." +
            "org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\r\n  <s" +
            "tring>node_info.json</string>\r\n  <string>repair_service.json</string>\r\n</ArrayOf" +
            "String>")]
        public global::System.Collections.Specialized.StringCollection OPSCenterFiles {
            get {
                return ((global::System.Collections.Specialized.StringCollection)(this["OPSCenterFiles"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("tablehistogram")]
        public string TableHistogramFileName {
            get {
                return ((string)(this["TableHistogramFileName"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("TableHistogram")]
        public string ExcelCFHistogramWorkSheet {
            get {
                return ((string)(this["ExcelCFHistogramWorkSheet"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("cfhistogram")]
        public string CFHistogramFileName {
            get {
                return ((string)(this["CFHistogramFileName"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<ArrayOfString xmlns:xsi=\"http://www.w3." +
            "org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\r\n  <s" +
            "tring>Average live cells per slice (last five minutes)</string>\r\n  <string>Avera" +
            "ge tombstones per slice (last five minutes)</string>\r\n  <string>Batch size maxim" +
            "um</string>\r\n  <string>Batch size mean</string>\r\n  <string>Batch size minimum</s" +
            "tring>\r\n  <string>Batch size occurrences</string>\r\n  <string>Bloom filter false " +
            "positives</string>\r\n  <string>Bloom filter false ratio</string>\r\n  <string>Bloom" +
            " filter off heap memory used</string>\r\n  <string>Bloom filter space used</string" +
            ">\r\n  <string>Compacted partition maximum bytes</string>\r\n  <string>Compacted par" +
            "tition mean bytes</string>\r\n  <string>Compacted partition minimum bytes</string>" +
            "\r\n  <string>Compaction maximum latency</string>\r\n  <string>Compaction maximum ra" +
            "te</string>\r\n  <string>Compaction mean latency</string>\r\n  <string>Compaction me" +
            "an rate</string>\r\n  <string>Compaction minimum latency</string>\r\n  <string>Compa" +
            "ction minimum rate</string>\r\n  <string>Compaction occurrences</string>\r\n  <strin" +
            "g>Compression metadata off heap memory used</string>\r\n  <string>Index summary of" +
            "f heap memory used</string>\r\n  <string>Local read count</string>\r\n  <string>Loca" +
            "l read latency</string>\r\n  <string>Local write count</string>\r\n  <string>Local w" +
            "rite latency</string>\r\n  <string>Maximum live cells per slice (last five minutes" +
            ")</string>\r\n  <string>Maximum tombstones per slice (last five minutes)</string>\r" +
            "\n  <string>MemTable Write OPS maximum</string>\r\n  <string>MemTable Write OPS mea" +
            "n</string>\r\n  <string>MemTable Write OPS minimum</string>\r\n  <string>MemTable Wr" +
            "ite Size maximum</string>\r\n  <string>MemTable Write Size mean</string>\r\n  <strin" +
            "g>MemTable Write Size minimum</string>\r\n  <string>MemTable Write occurrences</st" +
            "ring>\r\n  <string>Memtable cell count</string>\r\n  <string>Memtable data size</str" +
            "ing>\r\n  <string>Memtable off heap memory used</string>\r\n  <string>Memtable switc" +
            "h count</string>\r\n  <string>Number of keys (estimate)</string>\r\n  <string>Off he" +
            "ap memory used (total)</string>\r\n  <string>Partition large maximum</string>\r\n  <" +
            "string>Partition large mean</string>\r\n  <string>Partition large minimum</string>" +
            "\r\n  <string>Partition large occurrences</string>\r\n  <string>Pending flushes</str" +
            "ing>\r\n  <string>Read Count</string>\r\n  <string>Read latency</string>\r\n  <string>" +
            "Read latency maximum</string>\r\n  <string>SSTable Compression Ratio</string>\r\n  <" +
            "string>SSTable count</string>\r\n  <string>SSTable read maximum </string>\r\n  <stri" +
            "ng>Space used (live)</string>\r\n  <string>Space used (total)</string>\r\n  <string>" +
            "Space used by snapshots (total)</string>\r\n  <string>Tombstones warning Total</st" +
            "ring>\r\n  <string>Tombstones warning maximum</string>\r\n  <string>Tombstones warni" +
            "ng mean</string>\r\n  <string>Tombstones warning minimum</string>\r\n  <string>Tombs" +
            "tones warning occurrences</string>\r\n  <string>Write Count</string>\r\n  <string>Wr" +
            "ite latency</string>\r\n  <string>Write latency maximum</string>\r\n  <string>Unlogg" +
            "ed Batch Partitions Count Total</string>\r\n  <string>Unlogged Batch Partitions Co" +
            "unt maximum</string>\r\n  <string>Unlogged Batch Partitions Count mean</string>\r\n " +
            " <string>Unlogged Batch Partitions Count minimum</string>\r\n  <string>Unlogged Ba" +
            "tch Partitions Count occurrences</string>\r\n  <string>Tombstones query aborted To" +
            "tal</string>\r\n  <string>Tombstones query aborted maximum</string>\r\n  <string>Tom" +
            "bstones query aborted mean</string>\r\n  <string>Tombstones query aborted minimum<" +
            "/string>\r\n  <string>Tombstones query aborted occurences</string>\r\n  <string>Read" +
            " Repair maximum latency</string>\r\n  <string>Read Repair minimum latency</string>" +
            "\r\n  <string>Read Repair mean latency</string>\r\n  <string>Read Repair occurrences" +
            "</string>\r\n  <string>Read Repair Aborted occurrences</string>\r\n  <string>Solr re" +
            "index duration maximum</string>\r\n  <string>Solr reindex duration minimum</string" +
            ">\r\n  <string>Solr reindex duration mean</string>\r\n  <string>Solr reindex duratio" +
            "n stdev</string>\r\n  <string>Solr reindex occurrences</string>\r\n  <string>AntiCom" +
            "paction maximum latency</string>\r\n  <string>AntiCompaction mean latency</string>" +
            "\r\n  <string>AntiCompaction minimum latency</string>\r\n  <string>AntiCompaction oc" +
            "currences</string>\r\n  <string>AntiCompaction SSTable count</string>\r\n  <string>A" +
            "ntiCompaction maximum rate</string>\r\n  <string>AntiCompaction mean rate</string>" +
            "\r\n  <string>AntiCompaction minimum rate</string>\r\n  <string>AntiCompaction rate " +
            "occurrences</string>\r\n  <string>Memtable Flush maximum latency</string>\r\n  <stri" +
            "ng>Memtable Flush mean latency</string>\r\n  <string>Memtable Flush minimum latenc" +
            "y</string>\r\n  <string>Memtable Flush occurrences</string>\r\n  <string>Memtable Fl" +
            "ush maximum IORate</string>\r\n  <string>Memtable Flush mean IORate</string>\r\n  <s" +
            "tring>Memtable Flush minimum IORate</string>\r\n  <string>Memtable Flush maximum S" +
            "torage</string>\r\n  <string>Memtable Flush mean Storage</string>\r\n  <string>Memta" +
            "ble Flush minimum Storage</string>\r\n  <string>Memtable Flush total Storage</stri" +
            "ng>\r\n  <string>Solr Hard Commit duration maximum</string>\r\n  <string>Solr Hard C" +
            "ommit duration minimum</string>\r\n  <string>Solr Hard Commit duration mean</strin" +
            "g>\r\n  <string>Solr Hard Commit duration stdev</string>\r\n  <string>Solr Hard Comm" +
            "it occurrences</string>\r\n  <string>Schema Created occurrences</string>\r\n  <strin" +
            "g>Schema Dropped occurrences</string>\r\n  <string>Schema Updated occurrences</str" +
            "ing>\r\n  <string>MemTable Write OPS Delta maximum</string>\r\n  <string>MemTable Wr" +
            "ite OPS Delta minimum</string>\r\n  <string>MemTable Write OPS Delta mean</string>" +
            "\r\n  <string>MemTable Write Delta occurrences</string>\r\n  <string>MemTable Write " +
            "Size Delta maximum</string>\r\n  <string>MemTable Write Size Delta minimum</string" +
            ">\r\n  <string>MemTable Write Size Delta mean</string>\r\n  <string>MemTable Write S" +
            "ize Delta Total</string>\r\n  <string>Query read warning Total</string>\r\n  <string" +
            ">Query read warning maximum</string>\r\n  <string>Query read warning minimum</stri" +
            "ng>\r\n  <string>Query read warning mean</string>\r\n  <string>Query read warning oc" +
            "currences</string>\r\n</ArrayOfString>")]
        public global::System.Collections.Specialized.StringCollection CFStatsAttribs {
            get {
                return ((global::System.Collections.Specialized.StringCollection)(this["CFStatsAttribs"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<ArrayOfString xmlns:xsi=\"http://www.w3." +
            "org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\r\n  <s" +
            "tring>AntiEntropySessions</string>\r\n  <string>AntiEntropyStage</string>\r\n  <stri" +
            "ng>AntiEntropyStage Total</string>\r\n  <string>AntiEntropyStage maximum</string>\r" +
            "\n  <string>AntiEntropyStage mean</string>\r\n  <string>AntiEntropyStage minimum</s" +
            "tring>\r\n  <string>AntiEntropyStage occurrences</string>\r\n  <string>BINARY</strin" +
            "g>\r\n  <string>COUNTER_MUTATION</string>\r\n  <string>CacheCleanupExecutor</string>" +
            "\r\n  <string>CommitLogArchiver</string>\r\n  <string>CompactionExecutor</string>\r\n " +
            " <string>CompactionExecutor Total</string>\r\n  <string>CompactionExecutor maximum" +
            "</string>\r\n  <string>CompactionExecutor mean</string>\r\n  <string>CompactionExecu" +
            "tor minimum</string>\r\n  <string>CompactionExecutor occurrences</string>\r\n  <stri" +
            "ng>CounterMutationStage</string>\r\n  <string>CounterMutationStage Total</string>\r" +
            "\n  <string>CounterMutationStage maximum</string>\r\n  <string>CounterMutationStage" +
            " mean</string>\r\n  <string>CounterMutationStage minimum</string>\r\n  <string>Count" +
            "erMutationStage occurrences</string>\r\n  <string>GC maximum latency</string>\r\n  <" +
            "string>GC mean latency</string>\r\n  <string>GC minimum latency</string>\r\n  <strin" +
            "g>GC occurrences</string>\r\n  <string>GossipStage</string>\r\n  <string>GossipStage" +
            " Total</string>\r\n  <string>GossipStage maximum</string>\r\n  <string>GossipStage m" +
            "ean</string>\r\n  <string>GossipStage minimum</string>\r\n  <string>GossipStage occu" +
            "rrences</string>\r\n  <string>HintedHandoff</string>\r\n  <string>HintedHandoff Tota" +
            "l</string>\r\n  <string>HintedHandoff maximum</string>\r\n  <string>HintedHandoff me" +
            "an</string>\r\n  <string>HintedHandoff minimum</string>\r\n  <string>HintedHandoff o" +
            "ccurrences</string>\r\n  <string>InternalResponseStage</string>\r\n  <string>Interna" +
            "lResponseStage Total</string>\r\n  <string>InternalResponseStage maximum</string>\r" +
            "\n  <string>InternalResponseStage mean</string>\r\n  <string>InternalResponseStage " +
            "minimum</string>\r\n  <string>InternalResponseStage occurrences</string>\r\n  <strin" +
            "g>MUTATION</string>\r\n  <string>MemtableFlushWriter</string>\r\n  <string>MemtableF" +
            "lushWriter Total</string>\r\n  <string>MemtableFlushWriter maximum</string>\r\n  <st" +
            "ring>MemtableFlushWriter mean</string>\r\n  <string>MemtableFlushWriter minimum</s" +
            "tring>\r\n  <string>MemtableFlushWriter occurrences</string>\r\n  <string>MemtablePo" +
            "stFlush</string>\r\n  <string>MemtablePostFlush Total</string>\r\n  <string>Memtable" +
            "PostFlush maximum</string>\r\n  <string>MemtablePostFlush mean</string>\r\n  <string" +
            ">MemtablePostFlush minimum</string>\r\n  <string>MemtablePostFlush occurrences</st" +
            "ring>\r\n  <string>MemtableReclaimMemory</string>\r\n  <string>MemtableReclaimMemory" +
            " Total</string>\r\n  <string>MemtableReclaimMemory maximum</string>\r\n  <string>Mem" +
            "tableReclaimMemory mean</string>\r\n  <string>MemtableReclaimMemory minimum</strin" +
            "g>\r\n  <string>MemtableReclaimMemory occurrences</string>\r\n  <string>MigrationSta" +
            "ge</string>\r\n  <string>MigrationStage Total</string>\r\n  <string>MigrationStage m" +
            "aximum</string>\r\n  <string>MigrationStage mean</string>\r\n  <string>MigrationStag" +
            "e minimum</string>\r\n  <string>MigrationStage occurrences</string>\r\n  <string>Mis" +
            "cStage</string>\r\n  <string>MutationStage</string>\r\n  <string>MutationStage Total" +
            "</string>\r\n  <string>MutationStage maximum</string>\r\n  <string>MutationStage mea" +
            "n</string>\r\n  <string>MutationStage minimum</string>\r\n  <string>MutationStage oc" +
            "currences</string>\r\n  <string>PAGED_RANGE</string>\r\n  <string>Pause maximum late" +
            "ncy</string>\r\n  <string>Pause mean latency</string>\r\n  <string>Pause minimum lat" +
            "ency</string>\r\n  <string>Pause occurrences</string>\r\n  <string>PendingRangeCalcu" +
            "lator</string>\r\n  <string>PendingRangeCalculator Total</string>\r\n  <string>Pendi" +
            "ngRangeCalculator maximum</string>\r\n  <string>PendingRangeCalculator mean</strin" +
            "g>\r\n  <string>PendingRangeCalculator minimum</string>\r\n  <string>PendingRangeCal" +
            "culator occurrences</string>\r\n  <string>RANGE_SLICE</string>\r\n  <string>READ</st" +
            "ring>\r\n  <string>READ_REPAIR</string>\r\n  <string>REQUEST_RESPONSE</string>\r\n  <s" +
            "tring>ReadRepairStage</string>\r\n  <string>ReadRepairStage Total</string>\r\n  <str" +
            "ing>ReadRepairStage maximum</string>\r\n  <string>ReadRepairStage mean</string>\r\n " +
            " <string>ReadRepairStage minimum</string>\r\n  <string>ReadRepairStage occurrences" +
            "</string>\r\n  <string>ReadStage</string>\r\n  <string>ReadStage Total</string>\r\n  <" +
            "string>ReadStage maximum</string>\r\n  <string>ReadStage mean</string>\r\n  <string>" +
            "ReadStage minimum</string>\r\n  <string>ReadStage occurrences</string>\r\n  <string>" +
            "RequestResponseStage</string>\r\n  <string>RequestResponseStage Total</string>\r\n  " +
            "<string>RequestResponseStage maximum</string>\r\n  <string>RequestResponseStage me" +
            "an</string>\r\n  <string>RequestResponseStage minimum</string>\r\n  <string>RequestR" +
            "esponseStage occurrences</string>\r\n  <string>Sampler</string>\r\n  <string>Slow Qu" +
            "ery maximum latency</string>\r\n  <string>Slow Query mean latency</string>\r\n  <str" +
            "ing>Slow Query minimum latency</string>\r\n  <string>Slow Query occurrences</strin" +
            "g>\r\n  <string>ValidationExecutor</string>\r\n  <string>_TRACE</string>\r\n  <string>" +
            "OutOfMemoryError occurrences</string>\r\n  <string>CommitLogFlushFailure occurrenc" +
            "es</string>\r\n  <string>Dropped Hints Total</string>\r\n  <string>Dropped Hints max" +
            "imum</string>\r\n  <string>Dropped Hints mean</string>\r\n  <string>Dropped Hints mi" +
            "nimum</string>\r\n  <string>Dropped Hints occurrences</string>\r\n  <string>Allocati" +
            "on Failed Maximum Memory Reached Total</string>\r\n  <string>Allocation Failed Max" +
            "imum Memory Reached maximum</string>\r\n  <string>Allocation Failed Maximum Memory" +
            " Reached minimum</string>\r\n  <string>Allocation Failed Maximum Memory Reached me" +
            "an</string>\r\n  <string>Allocation Failed Maximum Memory Reached occurrences</str" +
            "ing>\r\n  <string>Dropped Mutation Total</string>\r\n  <string>Dropped Mutation maxi" +
            "mum</string>\r\n  <string>Dropped Mutation mean</string>\r\n  <string>Dropped Mutati" +
            "on minimum</string>\r\n  <string>Dropped Mutation occurrences</string>\r\n  <string>" +
            "GC Continuous maximum latency</string>\r\n  <string>GC Continuous minimum latency<" +
            "/string>\r\n  <string>GC Continuous mean latency</string>\r\n  <string>GC Continuous" +
            " occurrences</string>\r\n  <string>GC Continuous latency</string>\r\n  <string>GC Co" +
            "ntinuous standard deviation latency</string>\r\n  <string>GC TimeFrame maximum lat" +
            "ency</string>\r\n  <string>GC TimeFrame minimum latency</string>\r\n  <string>GC Tim" +
            "eFrame mean latency</string>\r\n  <string>GC TimeFrame occurrences</string>\r\n  <st" +
            "ring>GC TimeFrame latency</string>\r\n  <string>GC TimeFrame standard deviation la" +
            "tency</string>\r\n  <string>GC TimeFrame percent</string>\r\n  <string>Timedout Hint" +
            "s Total</string>\r\n  <string>Timedout Hints maximum</string>\r\n  <string>Timedout " +
            "Hints mean</string>\r\n  <string>Timedout Hints minimum</string>\r\n  <string>Timedo" +
            "ut Hints occurrences</string>\r\n  <string>Concurrent Compaction maximum</string>\r" +
            "\n  <string>Concurrent Compaction minimum</string>\r\n  <string>Concurrent Compacti" +
            "on mean</string>\r\n  <string>Concurrent Compaction standard deviation</string>\r\n " +
            " <string>Concurrent Compaction Total</string>\r\n  <string>Concurrent Compaction o" +
            "ccurrences</string>\r\n  <string>Concurrent MemtableFlush maximum</string>\r\n  <str" +
            "ing>Concurrent MemtableFlush minimum</string>\r\n  <string>Concurrent MemtableFlus" +
            "h mean</string>\r\n  <string>Concurrent MemtableFlush standard deviation</string>\r" +
            "\n  <string>Concurrent MemtableFlush Total</string>\r\n  <string>Concurrent Memtabl" +
            "eFlush occurrences</string>\r\n  <string>Concurrent Compaction/Flush Performance W" +
            "arnings maximum</string>\r\n  <string>Concurrent Compaction/Flush Performance Warn" +
            "ings minimum</string>\r\n  <string>Concurrent Compaction/Flush Performance Warning" +
            "s mean</string>\r\n  <string>Concurrent Compaction/Flush Performance Warnings stan" +
            "dard deviation</string>\r\n  <string>Concurrent Compaction/Flush GC maximum</strin" +
            "g>\r\n  <string>Concurrent Compaction/Flush GC minimum</string>\r\n  <string>Concurr" +
            "ent Compaction/Flush GC mean</string>\r\n  <string>Concurrent Compaction/Flush GC " +
            "standard deviation</string>\r\n  <string>Shard State Change Schema</string>\r\n  <st" +
            "ring>Shard State Change Dead Node</string>\r\n  <string>Node Marked Down (Dropped " +
            "Hints)</string>\r\n  <string>Node Not Responding (Timed Out Hints)</string>\r\n</Arr" +
            "ayOfString>")]
        public global::System.Collections.Specialized.StringCollection NodeAttribs {
            get {
                return ((global::System.Collections.Specialized.StringCollection)(this["NodeAttribs"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"<?xml version=""1.0"" encoding=""utf-16""?>
<ArrayOfString xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
  <string>SSTables</string>
  <string>Write Latency</string>
  <string>Read Latency</string>
  <string>Partition Size</string>
  <string>Cell Count</string>
</ArrayOfString>")]
        public global::System.Collections.Specialized.StringCollection TableHistogramAttribs {
            get {
                return ((global::System.Collections.Specialized.StringCollection)(this["TableHistogramAttribs"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<ArrayOfString xmlns:xsi=\"http://www.w3." +
            "org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\r\n  <s" +
            "tring>system_traces</string>\r\n  <string>dse_perf</string>\r\n</ArrayOfString>")]
        public global::System.Collections.Specialized.StringCollection PerformanceKeyspaces {
            get {
                return ((global::System.Collections.Specialized.StringCollection)(this["PerformanceKeyspaces"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"<?xml version=""1.0"" encoding=""utf-16""?>
<ArrayOfString xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
  <string>SliceQueryFilter.java</string>
  <string>BatchStatement.java</string>
  <string>CompactionController.java</string>
  <string>HintedHandoffMetrics.java</string>
  <string>GCInspector.java</string>
  <string>MessagingService.java</string>
  <string>CompactionTask.java</string>
  <string>RepairSession.java</string>
  <string>SSTableWriter.java</string>
  <string>CqlSlowLogWriter.java</string>
  <string>CqlSolrQueryExecutor.java</string>
</ArrayOfString>")]
        public global::System.Collections.Specialized.StringCollection LogSummaryTaskItems {
            get {
                return ((global::System.Collections.Specialized.StringCollection)(this["LogSummaryTaskItems"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"<?xml version=""1.0"" encoding=""utf-16""?>
<ArrayOfString xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
  <string>warn</string>
  <string>error</string>
  <string>internal_error</string>
  <string>failed</string>
</ArrayOfString>")]
        public global::System.Collections.Specialized.StringCollection SummaryIgnoreExceptions {
            get {
                return ((global::System.Collections.Specialized.StringCollection)(this["SummaryIgnoreExceptions"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Cassandra Exception Summary Log")]
        public string ExcelWorkSheetExceptionSummaryLogCassandra {
            get {
                return ((string)(this["ExcelWorkSheetExceptionSummaryLogCassandra"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(".xlsx")]
        public string ExcelWorkBookFileExtension {
            get {
                return ((string)(this["ExcelWorkBookFileExtension"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string TableHistogramDirPath {
            get {
                return ((string)(this["TableHistogramDirPath"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("250")]
        public int ToleranceContinuousGCInMS {
            get {
                return ((int)(this["ToleranceContinuousGCInMS"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("00:05:00")]
        public global::System.TimeSpan GCTimeFrameDetection {
            get {
                return ((global::System.TimeSpan)(this["GCTimeFrameDetection"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0.25")]
        public decimal GCTimeFrameDetectionPercentage {
            get {
                return ((decimal)(this["GCTimeFrameDetectionPercentage"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"<?xml version=""1.0"" encoding=""utf-16""?>
<ArrayOfString xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
  <string>.\cassandra\system.log</string>
  <string>.\cassandra\cassandra-system.log</string>
  <string>.\system.log</string>
</ArrayOfString>")]
        public global::System.Collections.Specialized.StringCollection LogCassandraDirSystemLogs {
            get {
                return ((global::System.Collections.Specialized.StringCollection)(this["LogCassandraDirSystemLogs"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("{\"Item1\":null,\"Item2\":\"[Keyspace Name] ASC, [Name] ASC\",\"Item3\":\"CurrentRows\"}")]
        public string DDLTableWorksheetFilterSort {
            get {
                return ((string)(this["DDLTableWorksheetFilterSort"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("{\"Item1\":null,\"Item2\":\"[Data Center] ASC, [Node IPAddress] ASC, [Start Token (exc" +
            "lusive)] ASC\",\"Item3\":\"CurrentRows\"}")]
        public string TokenRangeWorksheetFilterSort {
            get {
                return ((string)(this["TokenRangeWorksheetFilterSort"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("{\"Item1\":null,\"Item2\":\"[Node IPAddress] ASC, [Data Center] ASC\",\"Item3\":\"CurrentR" +
            "ows\"}")]
        public string OSMachineInfoWorksheetFilterSort {
            get {
                return ((string)(this["OSMachineInfoWorksheetFilterSort"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("{\"Item1\":null,\"Item2\":\"[Yaml Type] ASC, [Property] ASC, [Data Center] ASC, [Node " +
            "IPAddress] ASC\",\"Item3\":\"CurrentRows\"}")]
        public string YamlSettingsInfoWorksheetFilterSort {
            get {
                return ((string)(this["YamlSettingsInfoWorksheetFilterSort"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("{\"Item1\":null,\"Item2\":\"[Node IPAddress] ASC\",\"Item3\":\"CurrentRows\"}")]
        public string NodeStatsWorksheetFilterSort {
            get {
                return ((string)(this["NodeStatsWorksheetFilterSort"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("{\"Item1\":null,\"Item2\":\"[Name] ASC, [Data Center] ASC\",\"Item3\":\"CurrentRows\"}")]
        public string DDLKeyspaceWorksheetFilterSort {
            get {
                return ((string)(this["DDLKeyspaceWorksheetFilterSort"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("{\"Item1\":null,\"Item2\":\"[Node IPAddress] ASC, [Data Center] ASC\",\"Item3\":\"CurrentR" +
            "ows\"}")]
        public string RingInfoWorksheetFilterSort {
            get {
                return ((string)(this["RingInfoWorksheetFilterSort"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("{\"Item1\":null,\"Item2\":\"[Timestamp Period] DESC, [Data Center], [Key], [Path]\",\"It" +
            "em3\":\"CurrentRows\"}")]
        public string SummaryLogWorksheetFilterSort {
            get {
                return ((string)(this["SummaryLogWorksheetFilterSort"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("^\\.|^.+\\.zip\\.?")]
        public string ExcludePathNamesRegEx {
            get {
                return ((string)(this["ExcludePathNamesRegEx"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("3")]
        public int ContinuousGCNbrInSeries {
            get {
                return ((int)(this["ContinuousGCNbrInSeries"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("5")]
        public decimal CompactionFlagThresholdAsIORate {
            get {
                return ((decimal)(this["CompactionFlagThresholdAsIORate"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Detect")]
        public string LogParsingExcelOptions {
            get {
                return ((string)(this["LogParsingExcelOptions"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("ParseLoadWorksheets - ParseCompacationHistFiles")]
        public string ParsingExcelOptions {
            get {
                return ((string)(this["ParsingExcelOptions"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"[{""Item1"":""SimpleSnitch"",""Item2"":null},{""Item1"":""RackInferringSnitch"",""Item2"":null},{""Item1"":""PropertyFileSnitch"",""Item2"":"".\\cassandra-topology.properties""},{""Item1"":""GossipingPropertyFileSnitch"",""Item2"":"".\\cassandra-rackdc.properties""},{""Item1"":""CloudstackSnitch"",""Item2"":null},{""Item1"":""GoogleClouldSnitch"",""Item2"":"".\\cassandra-rackdc.properties""},{""Item1"":""EC2Snitch"",""Item2"":"".\\cassandra-rackdc.properties""},{""Item1"":""EC2MultiRegionSnitch"",""Item2"":"".\\cassandra-rackdc.properties""}]")]
        public string SnitcheFiles {
            get {
                return ((string)(this["SnitcheFiles"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("{\"Item1\":null,\"Item2\":\"[Data Center] ASC, [Node IPAddress] ASC, [KeySpace] ASC, [" +
            "Table] ASC, [Compaction Timestamp (UTC)] ASC\",\"Item3\":\"CurrentRows\"}")]
        public string CompactionHistWorksheetFilterSort {
            get {
                return ((string)(this["CompactionHistWorksheetFilterSort"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("{\"Item1\":null,\"Item2\":\"[Data Center], [Timestamp] ASC\",\"Item3\":\"CurrentRows\"}")]
        public string StatsWorkBookFilterSort {
            get {
                return ((string)(this["StatsWorkBookFilterSort"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Read Repair History")]
        public string ReadRepairWorkSheetName {
            get {
                return ((string)(this["ReadRepairWorkSheetName"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("{\"Item1\":null,\"Item2\":\"[Start Timestamp] ASC, [Session Path] ASC, [Data Center], " +
            "[Node IPAddress]\",\"Item3\":\"CurrentRows\"}")]
        public string ReadRepairWorksheetFilterSort {
            get {
                return ((string)(this["ReadRepairWorksheetFilterSort"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("OpsCtrDiagStruct")]
        public string FileParsingOptions {
            get {
                return ((string)(this["FileParsingOptions"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<ArrayOfString xmlns:xsi=\"http://www.w3." +
            "org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\r\n  <s" +
            "tring>.zip</string>\r\n  <string>.tar</string>\r\n  <string>.rar</string>\r\n</ArrayOf" +
            "String>")]
        public global::System.Collections.Specialized.StringCollection IgnoreLogFileExtensions {
            get {
                return ((global::System.Collections.Specialized.StringCollection)(this["IgnoreLogFileExtensions"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<ArrayOfString xmlns:xsi=\"http://www.w3." +
            "org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\r\n  <s" +
            "tring>.zip</string>\r\n</ArrayOfString>")]
        public global::System.Collections.Specialized.StringCollection ExtractFilesWithExtensions {
            get {
                return ((global::System.Collections.Specialized.StringCollection)(this["ExtractFilesWithExtensions"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("-1")]
        public int MaxNbrAchievedLogFiles {
            get {
                return ((int)(this["MaxNbrAchievedLogFiles"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("150")]
        public int ReadRepairThresholdInMS {
            get {
                return ((int)(this["ReadRepairThresholdInMS"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("{IndicatorPos:0,TaskPos:1,ItemPos:4,TimeStampPos:2,DescribePos:5}")]
        public string CLogLineFormatPositions {
            get {
                return ((string)(this["CLogLineFormatPositions"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"<?xml version=""1.0"" encoding=""utf-16""?>
<ArrayOfString xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
  <string>system.paxos</string>
  <string>system_traces</string>
  <string>dse_perf</string>
  <string>system_auth</string>
  <string>dse_security</string>
  <string>system.batches</string>
  <string>system.hints</string>
</ArrayOfString>")]
        public global::System.Collections.Specialized.StringCollection TableUseWarning {
            get {
                return ((global::System.Collections.Specialized.StringCollection)(this["TableUseWarning"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"<?xml version=""1.0"" encoding=""utf-16""?>
<ArrayOfString xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
  <string>system_distributed</string>
  <string>dse_perf</string>
  <string>system_auth</string>
  <string>dse_security</string>
  <string>system_traces</string>
  <string>dse_leases</string>
  <string>OpsCenter</string>
</ArrayOfString>")]
        public global::System.Collections.Specialized.StringCollection AlwayIncludeDLLKeyspacess {
            get {
                return ((global::System.Collections.Specialized.StringCollection)(this["AlwayIncludeDLLKeyspacess"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool DivideWorksheetIfExccedMaxRows {
            get {
                return ((bool)(this["DivideWorksheetIfExccedMaxRows"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("100")]
        public int QueueDroppedBlockedWarningThreshold {
            get {
                return ((int)(this["QueueDroppedBlockedWarningThreshold"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("30")]
        public int QueueDroppedBlockedWarningPeriodInMins {
            get {
                return ((int)(this["QueueDroppedBlockedWarningPeriodInMins"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("15")]
        public long LogReadThrottleTaskCount {
            get {
                return ((long)(this["LogReadThrottleTaskCount"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1000")]
        public int LogReadThrottleWaitPeriodMS {
            get {
                return ((int)(this["LogReadThrottleWaitPeriodMS"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("25")]
        public decimal ConcurrentAccumulativeIORateThreshold {
            get {
                return ((decimal)(this["ConcurrentAccumulativeIORateThreshold"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("2000")]
        public int SolrHardCommitLatencyThresholdInMS {
            get {
                return ((int)(this["SolrHardCommitLatencyThresholdInMS"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("2000")]
        public int SolrReIndexLatencyThresholdInMS {
            get {
                return ((int)(this["SolrReIndexLatencyThresholdInMS"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("^debug\\.log(?:.+)?$")]
        public string DebugLogFileRegExMatch {
            get {
                return ((string)(this["DebugLogFileRegExMatch"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<ArrayOfString xmlns:xsi=\"http://www.w3." +
            "org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\r\n  <s" +
            "tring>.\\cassandra\\debug.log</string>\r\n  <string>.\\debug.log</string>\r\n</ArrayOfS" +
            "tring>")]
        public global::System.Collections.Specialized.StringCollection LogCassandraDebugDirSystemLogs {
            get {
                return ((global::System.Collections.Specialized.StringCollection)(this["LogCassandraDebugDirSystemLogs"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("10000")]
        public int AntiCompactionLatencyThresholdMS {
            get {
                return ((int)(this["AntiCompactionLatencyThresholdMS"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(".\\driver\\schema")]
        public string CQLDDLDirFileOpsCtr6 {
            get {
                return ((string)(this["CQLDDLDirFileOpsCtr6"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("4000")]
        public int GCComplexAnalysisDisabledOverEvents {
            get {
                return ((int)(this["GCComplexAnalysisDisabledOverEvents"]));
            }
        }
        
        [global::System.Configuration.ApplicationScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("3000")]
        public int GCComplexAnalysisTakeEventsWhenOver {
            get {
                return ((int)(this["GCComplexAnalysisTakeEventsWhenOver"]));
            }
        }
    }
}
